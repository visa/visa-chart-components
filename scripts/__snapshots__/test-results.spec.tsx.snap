// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<jest-test-report> test errors should match what we had before 1`] = `
Object {
  "alluvial-diagram": Array [
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "class-logic",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> class-logic should build",
      "location": null,
      "status": "passed",
      "title": "should build",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html should build",
      "location": null,
      "status": "passed",
      "title": "should build",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "render",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html render should render with minimal props[data,accessors] given",
      "location": null,
      "status": "passed",
      "title": "should render with minimal props[data,accessors] given",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "render",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html render localization: should render localized with minimal props[data,accessors] given",
      "location": null,
      "status": "passed",
      "title": "localization: should render localized with minimal props[data,accessors] given",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite height: default height on load",
      "location": null,
      "status": "passed",
      "title": "height: default height on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite height: set height on load",
      "location": null,
      "status": "passed",
      "title": "height: set height on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite height: set height on update",
      "location": null,
      "status": "passed",
      "title": "height: set height on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite width: default width on load",
      "location": null,
      "status": "passed",
      "title": "width: default width on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite width: set width on load",
      "location": null,
      "status": "passed",
      "title": "width: set width on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite width: set width on update",
      "location": null,
      "status": "passed",
      "title": "width: set width on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite mainTitle: default mainTitle on load",
      "location": null,
      "status": "passed",
      "title": "mainTitle: default mainTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite mainTitle: set mainTitle on load",
      "location": null,
      "status": "passed",
      "title": "mainTitle: set mainTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite mainTitle: set mainTitle on update",
      "location": null,
      "status": "passed",
      "title": "mainTitle: set mainTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite subTitle: default subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: default subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite subTitle: set subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: set subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite subTitle: set subTitle on update",
      "location": null,
      "status": "passed",
      "title": "subTitle: set subTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite subTitle: set legend subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: set legend subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite subTitle: set legend subTitle on update",
      "location": null,
      "status": "passed",
      "title": "subTitle: set legend subTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite margin: default margin on load",
      "location": null,
      "status": "passed",
      "title": "margin: default margin on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite margin: custom margin on load",
      "location": null,
      "status": "passed",
      "title": "margin: custom margin on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite margin: custom margin on update",
      "location": null,
      "status": "passed",
      "title": "margin: custom margin on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite padding: default padding on load",
      "location": null,
      "status": "passed",
      "title": "padding: default padding on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite padding: custom padding on load",
      "location": null,
      "status": "passed",
      "title": "padding: custom padding on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite padding: custom padding on update",
      "location": null,
      "status": "passed",
      "title": "padding: custom padding on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite uniqueID: default uniqueID on load",
      "location": null,
      "status": "passed",
      "title": "uniqueID: default uniqueID on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite uniqueID: custom uniqueID on load",
      "location": null,
      "status": "passed",
      "title": "uniqueID: custom uniqueID on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite uniqueID: custom uniqueID on update",
      "location": null,
      "status": "passed",
      "title": "uniqueID: custom uniqueID on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite accessibility: should print accessibility console warnings and logs when accessibility.disableValidation defaults to false",
      "location": null,
      "status": "passed",
      "title": "accessibility: should print accessibility console warnings and logs when accessibility.disableValidation defaults to false",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite accessibility: should not print accessibility console warnings and logs when accessibility.disableValidation set to true",
      "location": null,
      "status": "passed",
      "title": "accessibility: should not print accessibility console warnings and logs when accessibility.disableValidation set to true",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite localization: should print localization console warnings and logs when localization.skipValidation defaults to false",
      "location": null,
      "status": "passed",
      "title": "localization: should print localization console warnings and logs when localization.skipValidation defaults to false",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite localization: should not print localization console warnings and logs when localization.skipValidation set to true",
      "location": null,
      "status": "passed",
      "title": "localization: should not print localization console warnings and logs when localization.skipValidation set to true",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
        "layout",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite layout should render chart horizontally by default",
      "location": null,
      "status": "passed",
      "title": "should render chart horizontally by default",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
        "layout",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite layout should render chart vertically on load",
      "location": null,
      "status": "passed",
      "title": "should render chart vertically on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
        "layout",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite layout should render chart vertically on update",
      "location": null,
      "status": "passed",
      "title": "should render chart vertically on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
        "data",
        "uniqueId",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite data uniqueId refer to generic results above for uniqueID tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for uniqueID tests",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
        "data",
        "data - generic data tests must be modified for alluvial-diagram",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite data data - generic data tests must be modified for alluvial-diagram data: custom data on load",
      "location": null,
      "status": "passed",
      "title": "data: custom data on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
        "data",
        "data - generic data tests must be modified for alluvial-diagram",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite data data - generic data tests must be modified for alluvial-diagram data: custom data enter on update",
      "location": null,
      "status": "passed",
      "title": "data: custom data enter on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "generic test suite",
        "data",
        "data - generic data tests must be modified for alluvial-diagram",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html generic test suite data data - generic data tests must be modified for alluvial-diagram data: custom data exit on update",
      "location": null,
      "status": "passed",
      "title": "data: custom data exit on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: default instruction elements should exist and have screen reader class",
      "location": null,
      "status": "passed",
      "title": "accessibility: default instruction elements should exist and have screen reader class",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: custom instruction elements should exist and have screen reader class on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: custom instruction elements should exist and have screen reader class on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: custom instruction elements should exist and have screen reader class on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: custom instruction elements should exist and have screen reader class on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have default html tags",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have default html tags",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have h3+ html tags and headings on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have h3+ html tags and headings on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have div html tags on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have div html tags on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have h4+ html tags and all headings on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have h4+ html tags and all headings on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have p html tags on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have p html tags on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component renders in default state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component renders in default state",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component shows header in focus state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component shows header in focus state",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component displays table in click state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component displays table in click state",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component displays table in click state with space enabled",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component displays table in click state with space enabled",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: attributes should be added to static geometries on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: attributes should be added to static geometries on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: attributes should be added to geometries on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: attributes should be added to geometries on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: controller div should be created and attributes should be added on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: controller div should be created and attributes should be added on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: controller div should be created and static image attributes should be added on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: controller div should be created and static image attributes should be added on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: focus marker style should be applied on focus",
      "location": null,
      "status": "pending",
      "title": "accessibility: focus marker style should be applied on focus",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: focus group style should be applied on focus",
      "location": null,
      "status": "passed",
      "title": "accessibility: focus group style should be applied on focus",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: test whether space bar performs click action",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: test whether space bar performs click action",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: group - shift+enter will exit group",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: group - shift+enter will exit group",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - right arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - right arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - right arrow goes to first from last",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - right arrow goes to first from last",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - left arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - left arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - left arrow loops to last from first",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - left arrow loops to last from first",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [
        "Error: expected to not have css class \\"vcl-accessibility-focus-source\\"
    at call (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:1798:47)
    at step (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:66:23)
    at Object.next (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:47:53)
    at fulfilled (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:37:58)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)",
      ],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - up arrow goes to next",
      "location": null,
      "status": "failed",
      "title": "accessibility: keyboard nav: cousin - up arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [
        "Error: expected to not have css class \\"vcl-accessibility-focus-source\\"
    at call (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:1798:47)
    at step (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:66:23)
    at Object.next (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:47:53)
    at fulfilled (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:37:58)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)",
      ],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - down arrow goes to next",
      "location": null,
      "status": "failed",
      "title": "accessibility: keyboard nav: cousin - down arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: tooltip should get hidden on ESC key",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: tooltip should get hidden on ESC key",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain xAxis description on load if xAxis exists on chart",
      "location": null,
      "status": "pending",
      "title": "accessibility: instruction elements should contain xAxis description on load if xAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should not contain xAxis description on load if xAxis is not visible on chart",
      "location": null,
      "status": "pending",
      "title": "accessibility: instruction elements should not contain xAxis description on load if xAxis is not visible on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain xAxis description on update if xAxis exists on chart",
      "location": null,
      "status": "pending",
      "title": "accessibility: instruction elements should contain xAxis description on update if xAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain yAxis description on load if yAxis exists on chart",
      "location": null,
      "status": "pending",
      "title": "accessibility: instruction elements should contain yAxis description on load if yAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should not contain yAxis description on load if yAxis is not visible on chart",
      "location": null,
      "status": "pending",
      "title": "accessibility: instruction elements should not contain yAxis description on load if yAxis is not visible on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain yAxis description on update if yAxis exists on chart",
      "location": null,
      "status": "pending",
      "title": "accessibility: instruction elements should contain yAxis description on update if yAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are applied by default on load",
      "location": null,
      "status": "pending",
      "title": "accessibility: accessibility textures are applied by default on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are removed on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: accessibility textures are removed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are removed on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: accessibility textures are removed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are applied in default order on load",
      "location": null,
      "status": "pending",
      "title": "accessibility: accessibility textures are applied in default order on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is false by default",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is false by default",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is true when passed on load",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is true when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is true when passed on update",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is true when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite annotations: instruction elements should contain annotation description on load if annotation exists on chart",
      "location": null,
      "status": "passed",
      "title": "annotations: instruction elements should contain annotation description on load if annotation exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite annotations: instruction elements should contain annotation description on update if annotation exists on chart",
      "location": null,
      "status": "passed",
      "title": "annotations: instruction elements should contain annotation description on update if annotation exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite referenceLines: instruction elements should contain reference line description on load if reference line exists on chart",
      "location": null,
      "status": "pending",
      "title": "referenceLines: instruction elements should contain reference line description on load if reference line exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility generic accessibility test suite referenceLines: instruction elements should contain reference line description on update if reference line exists on chart",
      "location": null,
      "status": "pending",
      "title": "referenceLines: instruction elements should contain reference line description on update if reference line exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "accessibility",
        "validation",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html accessibility validation refer to generic results above for accessibility validation tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for accessibility validation tests",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "annotations",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html annotations should pass annotation prop",
      "location": null,
      "status": "passed",
      "title": "should pass annotation prop",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "interaction",
        "link based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html interaction link based interaction tests [interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "interaction",
        "link based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html interaction link based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "interaction",
        "link based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html interaction link based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "interaction",
        "link based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html interaction link based interaction tests [interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "interaction",
        "link based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html interaction link based interaction tests [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "interaction",
        "link based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html interaction link based interaction tests [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "interaction",
        "link based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html interaction link based interaction tests [interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "interaction",
        "link based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html interaction link based interaction tests [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "interaction",
        "link based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html interaction link based interaction tests [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "link based events",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html event-emitter generic event testing link based events [event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
      "location": null,
      "status": "passed",
      "title": "[event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "link based events",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html event-emitter generic event testing link based events [event] clickEvent: event object should emit and contain first data record when first mark is clicked",
      "location": null,
      "status": "passed",
      "title": "[event] clickEvent: event object should emit and contain first data record when first mark is clicked",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "link based events",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html event-emitter generic event testing link based events [event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
      "location": null,
      "status": "passed",
      "title": "[event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "link based events",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html event-emitter generic event testing link based events [event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
      "location": null,
      "status": "passed",
      "title": "[event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "link based events",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html event-emitter generic event testing link based events [event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "link based events",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html event-emitter generic event testing link based events [event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "link based events",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html event-emitter generic event testing link based events [event] drawStartEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] drawStartEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "link based events",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html event-emitter generic event testing link based events [event] drawEndEvent: event object should emit and contain uniqueID on update",
      "location": null,
      "status": "passed",
      "title": "[event] drawEndEvent: event object should emit and contain uniqueID on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "link based events",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html event-emitter generic event testing link based events [event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
      "location": null,
      "status": "passed",
      "title": "[event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should render and have opacity 1 and be placed on hover",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 1 and be placed on hover",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should not render when event is triggered and showTooltip is false",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should not render when event is triggered and showTooltip is false",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render default content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render default content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render formatted custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render formatted custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html labels tooltip generic tooltip tests dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html labels tooltip generic tooltip tests dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "labels",
        "dataLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html labels dataLabel visible should render dataLabel by default",
      "location": null,
      "status": "passed",
      "title": "should render dataLabel by default",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "labels",
        "dataLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html labels dataLabel visible should not render the bar data labels if visible is false",
      "location": null,
      "status": "passed",
      "title": "should not render the bar data labels if visible is false",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html labels dataLabel labelAccessor should default to the value accessor if default",
      "location": null,
      "status": "passed",
      "title": "should default to the value accessor if default",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "labels",
        "dataLabel",
        "format",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html labels dataLabel format should format number if passed as prop",
      "location": null,
      "status": "passed",
      "title": "should format number if passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html labels dataLabel placement should place labels on inside of nodes by default",
      "location": null,
      "status": "passed",
      "title": "should place labels on inside of nodes by default",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html labels dataLabel placement should place labels on outside of nodes if passed",
      "location": null,
      "status": "passed",
      "title": "should place labels on outside of nodes if passed",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "links",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html links visible should have visible links with opacity 0.3 by default",
      "location": null,
      "status": "passed",
      "title": "should have visible links with opacity 0.3 by default",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "links",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html links visible should not have visible links when passed on load",
      "location": null,
      "status": "passed",
      "title": "should not have visible links when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "links",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html links visible should not have visible links when passed on update",
      "location": null,
      "status": "passed",
      "title": "should not have visible links when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "links",
        "opacity",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html links opacity should have default opacity by default",
      "location": null,
      "status": "passed",
      "title": "should have default opacity by default",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "links",
        "opacity",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html links opacity should have opacity 1 when passed on load",
      "location": null,
      "status": "passed",
      "title": "should have opacity 1 when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "links",
        "opacity",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html links opacity should have opacity 1 when passed on update",
      "location": null,
      "status": "passed",
      "title": "should have opacity 1 when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "links",
        "fillMode",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html links fillMode should have fillMode of none by default",
      "location": null,
      "status": "passed",
      "title": "should have fillMode of none by default",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "links",
        "fillMode",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html links fillMode should have fillMode of link if passed on load",
      "location": null,
      "status": "passed",
      "title": "should have fillMode of link if passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "links",
        "fillMode",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html links fillMode should have fillMode of group if passed on load",
      "location": null,
      "status": "passed",
      "title": "should have fillMode of group if passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "links",
        "fillMode",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html links fillMode should have fillMode of source if passed on load",
      "location": null,
      "status": "passed",
      "title": "should have fillMode of source if passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "links",
        "fillMode",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html links fillMode should have fillMode of target if passed on load",
      "location": null,
      "status": "passed",
      "title": "should have fillMode of target if passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "links",
        "fillMode",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html links fillMode should have fillMode of group if passed on update",
      "location": null,
      "status": "passed",
      "title": "should have fillMode of group if passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "nodes",
        "fill",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html nodes fill node fill should be off by default",
      "location": null,
      "status": "passed",
      "title": "node fill should be off by default",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "nodes",
        "fill",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html nodes fill node fill should be single_categorical_blue when passed on load",
      "location": null,
      "status": "passed",
      "title": "node fill should be single_categorical_blue when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "nodes",
        "fill",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html nodes fill node fill should be sequential_secOrange when passed on load",
      "location": null,
      "status": "passed",
      "title": "node fill should be sequential_secOrange when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "nodes",
        "fill",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html nodes fill node fill should be single_categorical_blue when passed on update",
      "location": null,
      "status": "passed",
      "title": "node fill should be single_categorical_blue when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "nodes",
        "width",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html nodes width node width should be default by default",
      "location": null,
      "status": "passed",
      "title": "node width should be default by default",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "nodes",
        "width",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html nodes width node width should be 20 if passed on load",
      "location": null,
      "status": "passed",
      "title": "node width should be 20 if passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "nodes",
        "width",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html nodes width node width should be 20 if passed on update",
      "location": null,
      "status": "passed",
      "title": "node width should be 20 if passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "nodes",
        "padding",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html nodes padding node padding should be default by default",
      "location": null,
      "status": "passed",
      "title": "node padding should be default by default",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "nodes",
        "padding",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html nodes padding node padding should be 10 if passed on load",
      "location": null,
      "status": "passed",
      "title": "node padding should be 10 if passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "nodes",
        "padding",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html nodes padding node padding should be 10 if passed on update",
      "location": null,
      "status": "passed",
      "title": "node padding should be 10 if passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "nodes",
        "compare",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html nodes compare node compare should be off by default",
      "location": null,
      "status": "passed",
      "title": "node compare should be off by default",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "nodes",
        "compare",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html nodes compare node compare should be on if passed on load",
      "location": null,
      "status": "passed",
      "title": "node compare should be on if passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "nodes",
        "compare",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html nodes compare node compare should be on if passed on update",
      "location": null,
      "status": "passed",
      "title": "node compare should be on if passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "style no textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html style no textures colorPalette should render categorical palette by default",
      "location": null,
      "status": "passed",
      "title": "should render categorical palette by default",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "style no textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html style no textures colorPalette should load single supplement Pink when colorPalette is sequential_suppPink",
      "location": null,
      "status": "passed",
      "title": "should load single supplement Pink when colorPalette is sequential_suppPink",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "style no textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html style no textures colorPalette should update to single supplement Pink when colorPalette is sequential_suppPink",
      "location": null,
      "status": "passed",
      "title": "should update to single supplement Pink when colorPalette is sequential_suppPink",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "style no textures",
        "colors",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html style no textures colors should render colors instead of palette when passed",
      "location": null,
      "status": "passed",
      "title": "should render colors instead of palette when passed",
    },
    Object {
      "ancestorTitles": Array [
        "<alluvial-diagram>",
        "rendered-html",
        "style no textures",
        "cursor",
      ],
      "failureMessages": Array [],
      "fullName": "<alluvial-diagram> rendered-html style no textures cursor refer to generic interaction results above for cursor tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic interaction results above for cursor tests",
    },
  ],
  "bar-chart": Array [
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "class-logic",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> class-logic should build",
      "location": null,
      "status": "passed",
      "title": "should build",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html should build",
      "location": null,
      "status": "passed",
      "title": "should build",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "render",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html render should render with minimal props[data,oridnalAccessor,valueAccessor] given",
      "location": null,
      "status": "passed",
      "title": "should render with minimal props[data,oridnalAccessor,valueAccessor] given",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "render",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html render localization: should render localized with minimal props[data,accessors] given",
      "location": null,
      "status": "passed",
      "title": "localization: should render localized with minimal props[data,accessors] given",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite height: default height on load",
      "location": null,
      "status": "passed",
      "title": "height: default height on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite height: set height on load",
      "location": null,
      "status": "passed",
      "title": "height: set height on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite height: set height on update",
      "location": null,
      "status": "passed",
      "title": "height: set height on update",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite width: default width on load",
      "location": null,
      "status": "passed",
      "title": "width: default width on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite width: set width on load",
      "location": null,
      "status": "passed",
      "title": "width: set width on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite width: set width on update",
      "location": null,
      "status": "passed",
      "title": "width: set width on update",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite mainTitle: default mainTitle on load",
      "location": null,
      "status": "passed",
      "title": "mainTitle: default mainTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite mainTitle: set mainTitle on load",
      "location": null,
      "status": "passed",
      "title": "mainTitle: set mainTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite mainTitle: set mainTitle on update",
      "location": null,
      "status": "passed",
      "title": "mainTitle: set mainTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite subTitle: default subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: default subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite subTitle: set subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: set subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite subTitle: set subTitle on update",
      "location": null,
      "status": "passed",
      "title": "subTitle: set subTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite subTitle: set legend subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: set legend subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite subTitle: set legend subTitle on update",
      "location": null,
      "status": "passed",
      "title": "subTitle: set legend subTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite margin: default margin on load",
      "location": null,
      "status": "passed",
      "title": "margin: default margin on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite margin: custom margin on load",
      "location": null,
      "status": "passed",
      "title": "margin: custom margin on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite margin: custom margin on update",
      "location": null,
      "status": "passed",
      "title": "margin: custom margin on update",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite padding: default padding on load",
      "location": null,
      "status": "passed",
      "title": "padding: default padding on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite padding: custom padding on load",
      "location": null,
      "status": "passed",
      "title": "padding: custom padding on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite padding: custom padding on update",
      "location": null,
      "status": "passed",
      "title": "padding: custom padding on update",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite uniqueID: default uniqueID on load",
      "location": null,
      "status": "passed",
      "title": "uniqueID: default uniqueID on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite uniqueID: custom uniqueID on load",
      "location": null,
      "status": "passed",
      "title": "uniqueID: custom uniqueID on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite uniqueID: custom uniqueID on update",
      "location": null,
      "status": "passed",
      "title": "uniqueID: custom uniqueID on update",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite data: custom data on load",
      "location": null,
      "status": "passed",
      "title": "data: custom data on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite data: custom data enter on update",
      "location": null,
      "status": "passed",
      "title": "data: custom data enter on update",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite data: custom data exit on update",
      "location": null,
      "status": "passed",
      "title": "data: custom data exit on update",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite accessibility: should print accessibility console warnings and logs when accessibility.disableValidation defaults to false",
      "location": null,
      "status": "passed",
      "title": "accessibility: should print accessibility console warnings and logs when accessibility.disableValidation defaults to false",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite accessibility: should not print accessibility console warnings and logs when accessibility.disableValidation set to true",
      "location": null,
      "status": "passed",
      "title": "accessibility: should not print accessibility console warnings and logs when accessibility.disableValidation set to true",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite localization: should print localization console warnings and logs when localization.skipValidation defaults to false",
      "location": null,
      "status": "passed",
      "title": "localization: should print localization console warnings and logs when localization.skipValidation defaults to false",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html generic test suite localization: should not print localization console warnings and logs when localization.skipValidation set to true",
      "location": null,
      "status": "passed",
      "title": "localization: should not print localization console warnings and logs when localization.skipValidation set to true",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: default instruction elements should exist and have screen reader class",
      "location": null,
      "status": "passed",
      "title": "accessibility: default instruction elements should exist and have screen reader class",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: custom instruction elements should exist and have screen reader class on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: custom instruction elements should exist and have screen reader class on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: custom instruction elements should exist and have screen reader class on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: custom instruction elements should exist and have screen reader class on update",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have default html tags",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have default html tags",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have h3+ html tags and headings on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have h3+ html tags and headings on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have div html tags on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have div html tags on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have h4+ html tags and all headings on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have h4+ html tags and all headings on update",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have p html tags on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have p html tags on update",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component renders in default state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component renders in default state",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component shows header in focus state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component shows header in focus state",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component displays table in click state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component displays table in click state",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component displays table in click state with space enabled",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component displays table in click state with space enabled",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: attributes should be added to static geometries on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: attributes should be added to static geometries on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: attributes should be added to geometries on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: attributes should be added to geometries on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: controller div should be created and attributes should be added on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: controller div should be created and attributes should be added on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: controller div should be created and static image attributes should be added on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: controller div should be created and static image attributes should be added on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: focus marker style should be applied on focus",
      "location": null,
      "status": "passed",
      "title": "accessibility: focus marker style should be applied on focus",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: focus group style should be applied on focus",
      "location": null,
      "status": "passed",
      "title": "accessibility: focus group style should be applied on focus",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: test whether space bar performs click action",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: test whether space bar performs click action",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: group - shift+enter will exit group",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: group - shift+enter will exit group",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - right arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - right arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - right arrow goes to first from last",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - right arrow goes to first from last",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - left arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - left arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - left arrow loops to last from first",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - left arrow loops to last from first",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - up arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - up arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - up arrow loops to last",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - up arrow loops to last",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - down arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - down arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - down arrow loops to first",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - down arrow loops to first",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: tooltip should get hidden on ESC key",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: tooltip should get hidden on ESC key",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain xAxis description on load if xAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain xAxis description on load if xAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should not contain xAxis description on load if xAxis is not visible on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should not contain xAxis description on load if xAxis is not visible on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain xAxis description on update if xAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain xAxis description on update if xAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain yAxis description on load if yAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain yAxis description on load if yAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should not contain yAxis description on load if yAxis is not visible on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should not contain yAxis description on load if yAxis is not visible on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain yAxis description on update if yAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain yAxis description on update if yAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are applied by default on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: accessibility textures are applied by default on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are removed on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: accessibility textures are removed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are removed on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: accessibility textures are removed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are applied in default order on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: accessibility textures are applied in default order on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is false by default",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is false by default",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is true when passed on load",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is true when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is true when passed on update",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is true when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite annotations: instruction elements should contain annotation description on load if annotation exists on chart",
      "location": null,
      "status": "passed",
      "title": "annotations: instruction elements should contain annotation description on load if annotation exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite annotations: instruction elements should contain annotation description on update if annotation exists on chart",
      "location": null,
      "status": "passed",
      "title": "annotations: instruction elements should contain annotation description on update if annotation exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite referenceLines: instruction elements should contain reference line description on load if reference line exists on chart",
      "location": null,
      "status": "passed",
      "title": "referenceLines: instruction elements should contain reference line description on load if reference line exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility generic accessibility test suite referenceLines: instruction elements should contain reference line description on update if reference line exists on chart",
      "location": null,
      "status": "passed",
      "title": "referenceLines: instruction elements should contain reference line description on update if reference line exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "accessibility",
        "validation",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html accessibility validation refer to generic results above for accessibility validation tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for accessibility validation tests",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "base",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html base refer to generic results above for base tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for base tests",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "base",
        "layout",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html base layout should render chart horizontally when layout prop is horizontal",
      "location": null,
      "status": "passed",
      "title": "should render chart horizontally when layout prop is horizontal",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "base",
        "layout",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html base layout should render chart vertically when layout prop is vertical",
      "location": null,
      "status": "passed",
      "title": "should render chart vertically when layout prop is vertical",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "margin & padding",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html margin & padding refer to generic results above for margin & padding tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for margin & padding tests",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "annotations",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html annotations should pass annotation prop",
      "location": null,
      "status": "passed",
      "title": "should pass annotation prop",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "axes",
        "barIntervalRatio",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html axes barIntervalRatio should have ratio of 0.2 by default",
      "location": null,
      "status": "passed",
      "title": "should have ratio of 0.2 by default",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "axes",
        "barIntervalRatio",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html axes barIntervalRatio should have ratio of 0.5 when passed on load",
      "location": null,
      "status": "passed",
      "title": "should have ratio of 0.5 when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "axes",
        "barIntervalRatio",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html axes barIntervalRatio should have ratio of 0.5 when passed on update",
      "location": null,
      "status": "passed",
      "title": "should have ratio of 0.5 when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "axes",
        "minValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html axes minValueOverride should have no effect on bar chart when passed",
      "location": null,
      "status": "passed",
      "title": "should have no effect on bar chart when passed",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "axes",
        "maxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html axes maxValueOverride should effect bar size when maxValueOverride is passed on load",
      "location": null,
      "status": "passed",
      "title": "should effect bar size when maxValueOverride is passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "axes",
        "maxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html axes maxValueOverride should effect bar size when maxValueOverride is passed on update",
      "location": null,
      "status": "passed",
      "title": "should effect bar size when maxValueOverride is passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "axes",
        "axis.centerBaseline",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html axes axis.centerBaseline y value should be half the actual when centerBaseline is passed as true on load",
      "location": null,
      "status": "passed",
      "title": "y value should be half the actual when centerBaseline is passed as true on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "axes",
        "axis.centerBaseline",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html axes axis.centerBaseline y value should be half the actual when centerBaseline is passed as true on update",
      "location": null,
      "status": "passed",
      "title": "y value should be half the actual when centerBaseline is passed as true on update",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "axes",
        "axis.centerBaseline",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html axes axis.centerBaseline yAxis should not render when centerBaseline is passed as true on load",
      "location": null,
      "status": "passed",
      "title": "yAxis should not render when centerBaseline is passed as true on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "axes",
        "axis.centerBaseline",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html axes axis.centerBaseline yAxis should not render when centerBaseline is passed as true on update",
      "location": null,
      "status": "passed",
      "title": "yAxis should not render when centerBaseline is passed as true on update",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "axes",
        "axis.centerBaseline",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html axes axis.centerBaseline x value should be -half the actual when centerBaseline is passed as true and layout is horizontal on load",
      "location": null,
      "status": "passed",
      "title": "x value should be -half the actual when centerBaseline is passed as true and layout is horizontal on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "axes",
        "axis.centerBaseline",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html axes axis.centerBaseline x value should be -half the actual when centerBaseline is passed as true and layout is horizontal on update",
      "location": null,
      "status": "passed",
      "title": "x value should be -half the actual when centerBaseline is passed as true and layout is horizontal on update",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "axes",
        "axis.centerBaseline",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html axes axis.centerBaseline xAxis should not render when centerBaseline is passed as true and layout is horizontal on load",
      "location": null,
      "status": "passed",
      "title": "xAxis should not render when centerBaseline is passed as true and layout is horizontal on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "axes",
        "axis.centerBaseline",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html axes axis.centerBaseline xAxis should not render when centerBaseline is passed as true and layout is horizontal on update",
      "location": null,
      "status": "passed",
      "title": "xAxis should not render when centerBaseline is passed as true and layout is horizontal on update",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "axes",
        "axis.visible",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html axes axis.visible xAxis and yAxis should be visible by default",
      "location": null,
      "status": "passed",
      "title": "xAxis and yAxis should be visible by default",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "axes",
        "axis.visible",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html axes axis.visible should not render when false is passed",
      "location": null,
      "status": "passed",
      "title": "should not render when false is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "axes",
        "axis.gridVisible",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html axes axis.gridVisible should not render when false or layout is vertical (default)",
      "location": null,
      "status": "passed",
      "title": "should not render when false or layout is vertical (default)",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "axes",
        "axis.gridVisible",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html axes axis.gridVisible should render when true and layout is horizontal",
      "location": null,
      "status": "passed",
      "title": "should render when true and layout is horizontal",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "axes",
        "axis.label",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html axes axis.label should place axis label when passed",
      "location": null,
      "status": "passed",
      "title": "should place axis label when passed",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "axes",
        "axis.format",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html axes axis.format yAxis should have default format applied to numbers",
      "location": null,
      "status": "passed",
      "title": "yAxis should have default format applied to numbers",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "axes",
        "axis.format",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html axes axis.format xAxis should have default format applied to numbers",
      "location": null,
      "status": "passed",
      "title": "xAxis should have default format applied to numbers",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "axes",
        "axis.format",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html axes axis.format yAxis should have custom format applied to numbers if passed",
      "location": null,
      "status": "passed",
      "title": "yAxis should have custom format applied to numbers if passed",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "axes",
        "axis.format",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html axes axis.format xAxis should have custom format applied to numbers if passed",
      "location": null,
      "status": "passed",
      "title": "xAxis should have custom format applied to numbers if passed",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "axes",
        "axis.tickInterval",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html axes axis.tickInterval should have tick interval one by default",
      "location": null,
      "status": "passed",
      "title": "should have tick interval one by default",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "axes",
        "axis.tickInterval",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html axes axis.tickInterval should have tick interval 2 when passed",
      "location": null,
      "status": "passed",
      "title": "should have tick interval 2 when passed",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html interaction bar based interaction tests [interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html interaction bar based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html interaction bar based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html interaction bar based interaction tests [interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html interaction bar based interaction tests [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html interaction bar based interaction tests [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html interaction bar based interaction tests [interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html interaction bar based interaction tests [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html interaction bar based interaction tests [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html event-emitter generic event testing bar based events [event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
      "location": null,
      "status": "passed",
      "title": "[event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html event-emitter generic event testing bar based events [event] clickEvent: event object should emit and contain first data record when first mark is clicked",
      "location": null,
      "status": "passed",
      "title": "[event] clickEvent: event object should emit and contain first data record when first mark is clicked",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html event-emitter generic event testing bar based events [event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
      "location": null,
      "status": "passed",
      "title": "[event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html event-emitter generic event testing bar based events [event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
      "location": null,
      "status": "passed",
      "title": "[event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html event-emitter generic event testing bar based events [event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html event-emitter generic event testing bar based events [event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html event-emitter generic event testing bar based events [event] drawStartEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] drawStartEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html event-emitter generic event testing bar based events [event] drawEndEvent: event object should emit and contain uniqueID on update",
      "location": null,
      "status": "passed",
      "title": "[event] drawEndEvent: event object should emit and contain uniqueID on update",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html event-emitter generic event testing bar based events [event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
      "location": null,
      "status": "passed",
      "title": "[event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "data",
        "uniqueId",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html data uniqueId refer to generic results above for uniqueID tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for uniqueID tests",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "data",
        "data",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html data data refer to generic results above for data tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for data tests",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "data",
        "sort",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html data sort should render data in ascending order when sortOrder is asc",
      "location": null,
      "status": "passed",
      "title": "should render data in ascending order when sortOrder is asc",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "data",
        "sort",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html data sort should render data in descending order when sortOrder is desc",
      "location": null,
      "status": "passed",
      "title": "should render data in descending order when sortOrder is desc",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "data",
        "sort",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html data sort should render data in default order when sortOrder is default",
      "location": null,
      "status": "passed",
      "title": "should render data in default order when sortOrder is default",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "data",
        "wrapLabel",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html data wrapLabel should render wrapped ordinal tick labels when wrapLabel is true (default)",
      "location": null,
      "status": "passed",
      "title": "should render wrapped ordinal tick labels when wrapLabel is true (default)",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "data",
        "wrapLabel",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html data wrapLabel should render unwrapped ordinal tick labels when wrapLabel is false",
      "location": null,
      "status": "passed",
      "title": "should render unwrapped ordinal tick labels when wrapLabel is false",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should render and have opacity 1 and be placed on hover",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 1 and be placed on hover",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should not render when event is triggered and showTooltip is false",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should not render when event is triggered and showTooltip is false",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render default content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render default content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render formatted custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render formatted custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels tooltip generic tooltip tests dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels tooltip generic tooltip tests dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels dataLabel visible should render dataLabel by default",
      "location": null,
      "status": "passed",
      "title": "should render dataLabel by default",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels dataLabel visible should not render the bar data labels if visible is false",
      "location": null,
      "status": "passed",
      "title": "should not render the bar data labels if visible is false",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels dataLabel labelAccessor should default to the value accessor if default",
      "location": null,
      "status": "passed",
      "title": "should default to the value accessor if default",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels dataLabel labelAccessor should render the data labels if visible is true",
      "location": null,
      "status": "passed",
      "title": "should render the data labels if visible is true",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "format",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels dataLabel format should format number if passed as prop",
      "location": null,
      "status": "passed",
      "title": "should format number if passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "format",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels dataLabel format should format number with custom format if passed as prop",
      "location": null,
      "status": "passed",
      "title": "should format number with custom format if passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "format",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels dataLabel format should format number with specified locale if changed",
      "location": null,
      "status": "passed",
      "title": "should format number with specified locale if changed",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels dataLabel placement should place labels on top of bars by default",
      "location": null,
      "status": "passed",
      "title": "should place labels on top of bars by default",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels dataLabel placement should place labels on bottom of bars if passed",
      "location": null,
      "status": "passed",
      "title": "should place labels on bottom of bars if passed",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels legend visible by default the legend should not render due to lack of group accessor",
      "location": null,
      "status": "passed",
      "title": "by default the legend should not render due to lack of group accessor",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels legend visible should render, but not be visible if false is passed",
      "location": null,
      "status": "passed",
      "title": "should render, but not be visible if false is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels legend visible should render, and be visible if groupAccessor is passed",
      "location": null,
      "status": "passed",
      "title": "should render, and be visible if groupAccessor is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "type",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels legend type should be bar default type by default",
      "location": null,
      "status": "passed",
      "title": "should be bar default type by default",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "type",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels legend type should be bar type even if another type is passed",
      "location": null,
      "status": "passed",
      "title": "should be bar type even if another type is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "interactive",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels legend interactive should not be interactive by deafult",
      "location": null,
      "status": "passed",
      "title": "should not be interactive by deafult",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "interactive",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels legend interactive should be interactive when interactive prop is true",
      "location": null,
      "status": "passed",
      "title": "should be interactive when interactive prop is true",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "format",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels legend format should format number if passed as prop",
      "location": null,
      "status": "passed",
      "title": "should format number if passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "labels",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels legend labels should be equal to data values by default",
      "location": null,
      "status": "passed",
      "title": "should be equal to data values by default",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "labels",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html labels legend labels should have custom labels when passed as prop",
      "location": null,
      "status": "passed",
      "title": "should have custom labels when passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "reference line",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html reference line should pass referenceLines prop",
      "location": null,
      "status": "passed",
      "title": "should pass referenceLines prop",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "reference line",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html reference line should pass referenceStyle prop",
      "location": null,
      "status": "passed",
      "title": "should pass referenceStyle prop",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "style with textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html style with textures colorPalette should render texture single blue by default",
      "location": null,
      "status": "passed",
      "title": "should render texture single blue by default",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "style with textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html style with textures colorPalette should load texture single supplement Pink when colorPalette is sequential_suppPink",
      "location": null,
      "status": "passed",
      "title": "should load texture single supplement Pink when colorPalette is sequential_suppPink",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "style with textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html style with textures colorPalette should update texture to single supplement Pink when colorPalette is sequential_suppPink",
      "location": null,
      "status": "passed",
      "title": "should update texture to single supplement Pink when colorPalette is sequential_suppPink",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "style with textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html style with textures colorPalette should render categorical textures and color when colorPalette is categorical",
      "location": null,
      "status": "passed",
      "title": "should render categorical textures and color when colorPalette is categorical",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "style with textures",
        "colors",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html style with textures colors should render colors texture instead of palette when passed",
      "location": null,
      "status": "passed",
      "title": "should render colors texture instead of palette when passed",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "style no textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html style no textures colorPalette should render single blue by default",
      "location": null,
      "status": "passed",
      "title": "should render single blue by default",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "style no textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html style no textures colorPalette should load single supplement Pink when colorPalette is sequential_suppPink",
      "location": null,
      "status": "passed",
      "title": "should load single supplement Pink when colorPalette is sequential_suppPink",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "style no textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html style no textures colorPalette should update to single supplement Pink when colorPalette is sequential_suppPink",
      "location": null,
      "status": "passed",
      "title": "should update to single supplement Pink when colorPalette is sequential_suppPink",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "style no textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html style no textures colorPalette should render sequential blue when colorPalette is sequential_orange",
      "location": null,
      "status": "passed",
      "title": "should render sequential blue when colorPalette is sequential_orange",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "style no textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html style no textures colorPalette should render categorical color when colorPalette is categorical",
      "location": null,
      "status": "passed",
      "title": "should render categorical color when colorPalette is categorical",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "style no textures",
        "colors",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html style no textures colors should render colors instead of palette when passed",
      "location": null,
      "status": "passed",
      "title": "should render colors instead of palette when passed",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "style no textures",
        "cursor",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html style no textures cursor refer to generic interaction results above for cursor tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic interaction results above for cursor tests",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "style no textures",
        "roundedCorner",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html style no textures roundedCorner should render rectangle bars when roundedCorner is zero (default)",
      "location": null,
      "status": "passed",
      "title": "should render rectangle bars when roundedCorner is zero (default)",
    },
    Object {
      "ancestorTitles": Array [
        "<bar-chart>",
        "rendered-html",
        "style no textures",
        "roundedCorner",
      ],
      "failureMessages": Array [],
      "fullName": "<bar-chart> rendered-html style no textures roundedCorner should render rounded bars when roundedCorner is non-zero positive number",
      "location": null,
      "status": "passed",
      "title": "should render rounded bars when roundedCorner is non-zero positive number",
    },
  ],
  "circle-packing": Array [
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "class-logic",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> class-logic should build",
      "location": null,
      "status": "passed",
      "title": "should build",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html should build",
      "location": null,
      "status": "passed",
      "title": "should build",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "render",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html render should render with minimal props[data,accessor(s)] given",
      "location": null,
      "status": "passed",
      "title": "should render with minimal props[data,accessor(s)] given",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "render",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html render localization: should render localized with minimal props[data,accessors] given",
      "location": null,
      "status": "passed",
      "title": "localization: should render localized with minimal props[data,accessors] given",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite height: default height on load",
      "location": null,
      "status": "passed",
      "title": "height: default height on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite height: set height on load",
      "location": null,
      "status": "passed",
      "title": "height: set height on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite height: set height on update",
      "location": null,
      "status": "passed",
      "title": "height: set height on update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite width: default width on load",
      "location": null,
      "status": "passed",
      "title": "width: default width on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite width: set width on load",
      "location": null,
      "status": "passed",
      "title": "width: set width on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite width: set width on update",
      "location": null,
      "status": "passed",
      "title": "width: set width on update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite mainTitle: default mainTitle on load",
      "location": null,
      "status": "passed",
      "title": "mainTitle: default mainTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite mainTitle: set mainTitle on load",
      "location": null,
      "status": "passed",
      "title": "mainTitle: set mainTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite mainTitle: set mainTitle on update",
      "location": null,
      "status": "passed",
      "title": "mainTitle: set mainTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite subTitle: default subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: default subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite subTitle: set subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: set subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite subTitle: set subTitle on update",
      "location": null,
      "status": "passed",
      "title": "subTitle: set subTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite subTitle: set legend subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: set legend subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite subTitle: set legend subTitle on update",
      "location": null,
      "status": "passed",
      "title": "subTitle: set legend subTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite margin: default margin on load",
      "location": null,
      "status": "passed",
      "title": "margin: default margin on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite margin: custom margin on load",
      "location": null,
      "status": "passed",
      "title": "margin: custom margin on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite margin: custom margin on update",
      "location": null,
      "status": "passed",
      "title": "margin: custom margin on update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite padding: default padding on load",
      "location": null,
      "status": "passed",
      "title": "padding: default padding on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite padding: custom padding on load",
      "location": null,
      "status": "passed",
      "title": "padding: custom padding on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite padding: custom padding on update",
      "location": null,
      "status": "passed",
      "title": "padding: custom padding on update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite uniqueID: default uniqueID on load",
      "location": null,
      "status": "passed",
      "title": "uniqueID: default uniqueID on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite uniqueID: custom uniqueID on load",
      "location": null,
      "status": "passed",
      "title": "uniqueID: custom uniqueID on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite uniqueID: custom uniqueID on update",
      "location": null,
      "status": "passed",
      "title": "uniqueID: custom uniqueID on update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite accessibility: should print accessibility console warnings and logs when accessibility.disableValidation defaults to false",
      "location": null,
      "status": "passed",
      "title": "accessibility: should print accessibility console warnings and logs when accessibility.disableValidation defaults to false",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite accessibility: should not print accessibility console warnings and logs when accessibility.disableValidation set to true",
      "location": null,
      "status": "passed",
      "title": "accessibility: should not print accessibility console warnings and logs when accessibility.disableValidation set to true",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite localization: should print localization console warnings and logs when localization.skipValidation defaults to false",
      "location": null,
      "status": "passed",
      "title": "localization: should print localization console warnings and logs when localization.skipValidation defaults to false",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html generic test suite localization: should not print localization console warnings and logs when localization.skipValidation set to true",
      "location": null,
      "status": "passed",
      "title": "localization: should not print localization console warnings and logs when localization.skipValidation set to true",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: default instruction elements should exist and have screen reader class",
      "location": null,
      "status": "passed",
      "title": "accessibility: default instruction elements should exist and have screen reader class",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: custom instruction elements should exist and have screen reader class on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: custom instruction elements should exist and have screen reader class on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: custom instruction elements should exist and have screen reader class on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: custom instruction elements should exist and have screen reader class on update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have default html tags",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have default html tags",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have h3+ html tags and headings on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have h3+ html tags and headings on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have div html tags on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have div html tags on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have h4+ html tags and all headings on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have h4+ html tags and all headings on update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have p html tags on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have p html tags on update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component renders in default state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component renders in default state",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component shows header in focus state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component shows header in focus state",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component displays table in click state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component displays table in click state",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component displays table in click state with space enabled",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component displays table in click state with space enabled",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: attributes should be added to static geometries on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: attributes should be added to static geometries on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: attributes should be added to geometries on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: attributes should be added to geometries on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: controller div should be created and attributes should be added on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: controller div should be created and attributes should be added on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: controller div should be created and static image attributes should be added on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: controller div should be created and static image attributes should be added on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: focus marker style should be applied on focus",
      "location": null,
      "status": "pending",
      "title": "accessibility: focus marker style should be applied on focus",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: focus group style should be applied on focus",
      "location": null,
      "status": "pending",
      "title": "accessibility: focus group style should be applied on focus",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: test whether space bar performs click action",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: test whether space bar performs click action",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - right arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - right arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - right arrow goes to first from last",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - right arrow goes to first from last",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - left arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - left arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - left arrow loops to last from first",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - left arrow loops to last from first",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: drill - up arrow goes to parent",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: drill - up arrow goes to parent",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: drill - down arrow goes to child",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: drill - down arrow goes to child",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: drill - shift+enter will move up to parent",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: drill - shift+enter will move up to parent",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: drill - enter will move into to children",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: drill - enter will move into to children",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: tooltip should get hidden on ESC key",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: tooltip should get hidden on ESC key",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain xAxis description on load if xAxis exists on chart",
      "location": null,
      "status": "pending",
      "title": "accessibility: instruction elements should contain xAxis description on load if xAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should not contain xAxis description on load if xAxis is not visible on chart",
      "location": null,
      "status": "pending",
      "title": "accessibility: instruction elements should not contain xAxis description on load if xAxis is not visible on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain xAxis description on update if xAxis exists on chart",
      "location": null,
      "status": "pending",
      "title": "accessibility: instruction elements should contain xAxis description on update if xAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain yAxis description on load if yAxis exists on chart",
      "location": null,
      "status": "pending",
      "title": "accessibility: instruction elements should contain yAxis description on load if yAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should not contain yAxis description on load if yAxis is not visible on chart",
      "location": null,
      "status": "pending",
      "title": "accessibility: instruction elements should not contain yAxis description on load if yAxis is not visible on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain yAxis description on update if yAxis exists on chart",
      "location": null,
      "status": "pending",
      "title": "accessibility: instruction elements should contain yAxis description on update if yAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are applied by default on load",
      "location": null,
      "status": "pending",
      "title": "accessibility: accessibility textures are applied by default on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are removed on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: accessibility textures are removed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are removed on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: accessibility textures are removed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are applied in default order on load",
      "location": null,
      "status": "pending",
      "title": "accessibility: accessibility textures are applied in default order on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is false by default",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is false by default",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is true when passed on load",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is true when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is true when passed on update",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is true when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite annotations: instruction elements should contain annotation description on load if annotation exists on chart",
      "location": null,
      "status": "passed",
      "title": "annotations: instruction elements should contain annotation description on load if annotation exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite annotations: instruction elements should contain annotation description on update if annotation exists on chart",
      "location": null,
      "status": "passed",
      "title": "annotations: instruction elements should contain annotation description on update if annotation exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite referenceLines: instruction elements should contain reference line description on load if reference line exists on chart",
      "location": null,
      "status": "pending",
      "title": "referenceLines: instruction elements should contain reference line description on load if reference line exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility generic accessibility test suite referenceLines: instruction elements should contain reference line description on update if reference line exists on chart",
      "location": null,
      "status": "pending",
      "title": "referenceLines: instruction elements should contain reference line description on update if reference line exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "accessibility",
        "validation",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html accessibility validation refer to generic results above for accessibility validation tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for accessibility validation tests",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "base",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html base refer to generic results above for base tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for base tests",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "margin & padding",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html margin & padding refer to generic results above for margin & padding tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for margin & padding tests",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "annotations",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html annotations should pass annotation prop",
      "location": null,
      "status": "passed",
      "title": "should pass annotation prop",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "interaction",
        "circle pack based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html interaction circle pack based interaction tests [interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "interaction",
        "circle pack based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html interaction circle pack based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "interaction",
        "circle pack based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html interaction circle pack based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "interaction",
        "circle pack based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html interaction circle pack based interaction tests [interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "interaction",
        "circle pack based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html interaction circle pack based interaction tests [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "interaction",
        "circle pack based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html interaction circle pack based interaction tests [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "interaction",
        "circle pack based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html interaction circle pack based interaction tests [interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "interaction",
        "circle pack based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html interaction circle pack based interaction tests [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "interaction",
        "circle pack based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html interaction circle pack based interaction tests [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "mark based events",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html event-emitter generic event testing mark based events [event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
      "location": null,
      "status": "passed",
      "title": "[event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "mark based events",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html event-emitter generic event testing mark based events [event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
      "location": null,
      "status": "passed",
      "title": "[event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "mark based events",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html event-emitter generic event testing mark based events [event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
      "location": null,
      "status": "passed",
      "title": "[event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "mark based events",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html event-emitter generic event testing mark based events [event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "mark based events",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html event-emitter generic event testing mark based events [event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "mark based events",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html event-emitter generic event testing mark based events [event] drawStartEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] drawStartEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "mark based events",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html event-emitter generic event testing mark based events [event] drawEndEvent: event object should emit and contain uniqueID on update",
      "location": null,
      "status": "passed",
      "title": "[event] drawEndEvent: event object should emit and contain uniqueID on update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "mark based events",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html event-emitter generic event testing mark based events [event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
      "location": null,
      "status": "passed",
      "title": "[event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "customized mark based event testing",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html event-emitter generic event testing customized mark based event testing [interaction] clickEvent: customized for circle-pack event object should emit and contain first data record when first mark is clicked",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickEvent: customized for circle-pack event object should emit and contain first data record when first mark is clicked",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "data",
        "uniqueId",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html data uniqueId refer to generic results above for uniqueID tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for uniqueID tests",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "data",
        "data - generic data tests must be modified for circle-pack",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html data data - generic data tests must be modified for circle-pack data: custom data on load",
      "location": null,
      "status": "passed",
      "title": "data: custom data on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "data",
        "data - generic data tests must be modified for circle-pack",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html data data - generic data tests must be modified for circle-pack data: custom data enter on update",
      "location": null,
      "status": "passed",
      "title": "data: custom data enter on update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "data",
        "data - generic data tests must be modified for circle-pack",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html data data - generic data tests must be modified for circle-pack data: custom data exit on update",
      "location": null,
      "status": "passed",
      "title": "data: custom data exit on update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "data",
        "dataDepth",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html data dataDepth should render 13 nodes with dataDepth 5 (default)",
      "location": null,
      "status": "passed",
      "title": "should render 13 nodes with dataDepth 5 (default)",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "data",
        "dataDepth",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html data dataDepth should render 4 nodes with dataDepth 1 on load",
      "location": null,
      "status": "passed",
      "title": "should render 4 nodes with dataDepth 1 on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "data",
        "dataDepth",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html data dataDepth should render 13 nodes with dataDepth 3 and displayDepth 2 (default) on update",
      "location": null,
      "status": "passed",
      "title": "should render 13 nodes with dataDepth 3 and displayDepth 2 (default) on update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "data",
        "dataDepth",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html data dataDepth should render 15 nodes with dataDepth 3 and displayDepth 3 on update",
      "location": null,
      "status": "passed",
      "title": "should render 15 nodes with dataDepth 3 and displayDepth 3 on update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "data",
        "displayDepth",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html data displayDepth should render 13 nodes with displayDepth 2 (default)",
      "location": null,
      "status": "passed",
      "title": "should render 13 nodes with displayDepth 2 (default)",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "data",
        "displayDepth",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html data displayDepth should render 4 nodes with displayDepth 1 on load",
      "location": null,
      "status": "passed",
      "title": "should render 4 nodes with displayDepth 1 on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "data",
        "displayDepth",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html data displayDepth should render 15 nodes with displayDepth 3 on update",
      "location": null,
      "status": "passed",
      "title": "should render 15 nodes with displayDepth 3 on update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "labels",
        "dataLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html labels dataLabel visible should render dataLabel by default",
      "location": null,
      "status": "passed",
      "title": "should render dataLabel by default",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "labels",
        "dataLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html labels dataLabel visible should not render the bar data labels if visible is false",
      "location": null,
      "status": "passed",
      "title": "should not render the bar data labels if visible is false",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html labels dataLabel labelAccessor should default to the node accessor if default",
      "location": null,
      "status": "passed",
      "title": "should default to the node accessor if default",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html labels dataLabel labelAccessor should render labelAcccessor if provided load",
      "location": null,
      "status": "passed",
      "title": "should render labelAcccessor if provided load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html labels dataLabel labelAccessor should render labelAcccessor if provided update",
      "location": null,
      "status": "passed",
      "title": "should render labelAcccessor if provided update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should render and have opacity 1 and be placed on hover",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 1 and be placed on hover",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should not render when event is triggered and showTooltip is false",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should not render when event is triggered and showTooltip is false",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render default content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render default content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render formatted custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render formatted custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html labels tooltip generic tooltip tests dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html labels tooltip generic tooltip tests dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html style colorPalette should render sequential grey by default",
      "location": null,
      "status": "passed",
      "title": "should render sequential grey by default",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html style colorPalette should render sequential pink on load",
      "location": null,
      "status": "passed",
      "title": "should render sequential pink on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html style colorPalette should render sequential pink on update",
      "location": null,
      "status": "passed",
      "title": "should render sequential pink on update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html style colorPalette should render categorical on update",
      "location": null,
      "status": "passed",
      "title": "should render categorical on update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "style",
        "colors",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html style colors should render colors instead of palette when passed on load",
      "location": null,
      "status": "passed",
      "title": "should render colors instead of palette when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "style",
        "colors",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html style colors should render colors instead of palette when passed on update",
      "location": null,
      "status": "passed",
      "title": "should render colors instead of palette when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "style",
        "circlePadding",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html style circlePadding circlePadding should be 5 by default",
      "location": null,
      "status": "passed",
      "title": "circlePadding should be 5 by default",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "style",
        "circlePadding",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html style circlePadding circlePadding should adjust to 2 on load",
      "location": null,
      "status": "passed",
      "title": "circlePadding should adjust to 2 on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "style",
        "circlePadding",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html style circlePadding circlePadding should adjust to 10 on load",
      "location": null,
      "status": "passed",
      "title": "circlePadding should adjust to 10 on load",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "style",
        "cursor",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html style cursor refer to generic interaction results above for cursor tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic interaction results above for cursor tests",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "style",
        "clickStyle",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html style clickStyle refer to generic interaction results above for clickStyle tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic interaction results above for clickStyle tests",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "style",
        "hoverStyle",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html style hoverStyle refer to generic interaction results above for hoverStyle tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic interaction results above for hoverStyle tests",
    },
    Object {
      "ancestorTitles": Array [
        "<circle-packing>",
        "rendered-html",
        "style",
        "hoverOpacity",
      ],
      "failureMessages": Array [],
      "fullName": "<circle-packing> rendered-html style hoverOpacity refer to generic interaction results above for hoverOpacity tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic interaction results above for hoverOpacity tests",
    },
  ],
  "clustered-bar-chart": Array [
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "class-logic",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> class-logic should build",
      "location": null,
      "status": "passed",
      "title": "should build",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html should build",
      "location": null,
      "status": "passed",
      "title": "should build",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "render",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html render should render with minimal props[data,oridnalAccessor,groupAccessor,valueAccessor] given",
      "location": null,
      "status": "passed",
      "title": "should render with minimal props[data,oridnalAccessor,groupAccessor,valueAccessor] given",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "render",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html render localization: should render localized with minimal props[data,accessors] given",
      "location": null,
      "status": "passed",
      "title": "localization: should render localized with minimal props[data,accessors] given",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite height: default height on load",
      "location": null,
      "status": "passed",
      "title": "height: default height on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite height: set height on load",
      "location": null,
      "status": "passed",
      "title": "height: set height on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite height: set height on update",
      "location": null,
      "status": "passed",
      "title": "height: set height on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite width: default width on load",
      "location": null,
      "status": "passed",
      "title": "width: default width on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite width: set width on load",
      "location": null,
      "status": "passed",
      "title": "width: set width on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite width: set width on update",
      "location": null,
      "status": "passed",
      "title": "width: set width on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite mainTitle: default mainTitle on load",
      "location": null,
      "status": "passed",
      "title": "mainTitle: default mainTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite mainTitle: set mainTitle on load",
      "location": null,
      "status": "passed",
      "title": "mainTitle: set mainTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite mainTitle: set mainTitle on update",
      "location": null,
      "status": "passed",
      "title": "mainTitle: set mainTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite subTitle: default subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: default subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite subTitle: set subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: set subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite subTitle: set subTitle on update",
      "location": null,
      "status": "passed",
      "title": "subTitle: set subTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite subTitle: set legend subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: set legend subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite subTitle: set legend subTitle on update",
      "location": null,
      "status": "passed",
      "title": "subTitle: set legend subTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite margin: default margin on load",
      "location": null,
      "status": "passed",
      "title": "margin: default margin on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite margin: custom margin on load",
      "location": null,
      "status": "passed",
      "title": "margin: custom margin on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite margin: custom margin on update",
      "location": null,
      "status": "passed",
      "title": "margin: custom margin on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite padding: default padding on load",
      "location": null,
      "status": "passed",
      "title": "padding: default padding on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite padding: custom padding on load",
      "location": null,
      "status": "passed",
      "title": "padding: custom padding on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite padding: custom padding on update",
      "location": null,
      "status": "passed",
      "title": "padding: custom padding on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite uniqueID: default uniqueID on load",
      "location": null,
      "status": "passed",
      "title": "uniqueID: default uniqueID on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite uniqueID: custom uniqueID on load",
      "location": null,
      "status": "passed",
      "title": "uniqueID: custom uniqueID on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite uniqueID: custom uniqueID on update",
      "location": null,
      "status": "passed",
      "title": "uniqueID: custom uniqueID on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite data: custom data on load",
      "location": null,
      "status": "passed",
      "title": "data: custom data on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite data: custom data enter on update",
      "location": null,
      "status": "passed",
      "title": "data: custom data enter on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite data: custom data exit on update",
      "location": null,
      "status": "pending",
      "title": "data: custom data exit on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite accessibility: should print accessibility console warnings and logs when accessibility.disableValidation defaults to false",
      "location": null,
      "status": "passed",
      "title": "accessibility: should print accessibility console warnings and logs when accessibility.disableValidation defaults to false",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite accessibility: should not print accessibility console warnings and logs when accessibility.disableValidation set to true",
      "location": null,
      "status": "passed",
      "title": "accessibility: should not print accessibility console warnings and logs when accessibility.disableValidation set to true",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite localization: should print localization console warnings and logs when localization.skipValidation defaults to false",
      "location": null,
      "status": "passed",
      "title": "localization: should print localization console warnings and logs when localization.skipValidation defaults to false",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic test suite localization: should not print localization console warnings and logs when localization.skipValidation set to true",
      "location": null,
      "status": "passed",
      "title": "localization: should not print localization console warnings and logs when localization.skipValidation set to true",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: default instruction elements should exist and have screen reader class",
      "location": null,
      "status": "passed",
      "title": "accessibility: default instruction elements should exist and have screen reader class",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: custom instruction elements should exist and have screen reader class on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: custom instruction elements should exist and have screen reader class on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: custom instruction elements should exist and have screen reader class on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: custom instruction elements should exist and have screen reader class on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have default html tags",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have default html tags",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have h3+ html tags and headings on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have h3+ html tags and headings on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have div html tags on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have div html tags on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have h4+ html tags and all headings on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have h4+ html tags and all headings on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have p html tags on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have p html tags on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component renders in default state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component renders in default state",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component shows header in focus state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component shows header in focus state",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component displays table in click state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component displays table in click state",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component displays table in click state with space enabled",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component displays table in click state with space enabled",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: attributes should be added to static geometries on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: attributes should be added to static geometries on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: attributes should be added to geometries on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: attributes should be added to geometries on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: controller div should be created and attributes should be added on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: controller div should be created and attributes should be added on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: controller div should be created and static image attributes should be added on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: controller div should be created and static image attributes should be added on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: focus marker style should be applied on focus",
      "location": null,
      "status": "passed",
      "title": "accessibility: focus marker style should be applied on focus",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: focus group style should be applied on focus",
      "location": null,
      "status": "passed",
      "title": "accessibility: focus group style should be applied on focus",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: test whether space bar performs click action",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: test whether space bar performs click action",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: group - shift+enter will exit group",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: group - shift+enter will exit group",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - right arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - right arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - right arrow goes to first from last",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - right arrow goes to first from last",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - left arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - left arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - left arrow loops to last from first",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - left arrow loops to last from first",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - up arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - up arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - up arrow loops to last",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - up arrow loops to last",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - down arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - down arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - down arrow loops to first",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - down arrow loops to first",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: tooltip should get hidden on ESC key",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: tooltip should get hidden on ESC key",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain xAxis description on load if xAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain xAxis description on load if xAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should not contain xAxis description on load if xAxis is not visible on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should not contain xAxis description on load if xAxis is not visible on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain xAxis description on update if xAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain xAxis description on update if xAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain yAxis description on load if yAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain yAxis description on load if yAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should not contain yAxis description on load if yAxis is not visible on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should not contain yAxis description on load if yAxis is not visible on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain yAxis description on update if yAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain yAxis description on update if yAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are applied by default on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: accessibility textures are applied by default on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are removed on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: accessibility textures are removed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are removed on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: accessibility textures are removed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are applied in default order on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: accessibility textures are applied in default order on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is false by default",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is false by default",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is true when passed on load",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is true when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is true when passed on update",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is true when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite annotations: instruction elements should contain annotation description on load if annotation exists on chart",
      "location": null,
      "status": "passed",
      "title": "annotations: instruction elements should contain annotation description on load if annotation exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite annotations: instruction elements should contain annotation description on update if annotation exists on chart",
      "location": null,
      "status": "passed",
      "title": "annotations: instruction elements should contain annotation description on update if annotation exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite referenceLines: instruction elements should contain reference line description on load if reference line exists on chart",
      "location": null,
      "status": "passed",
      "title": "referenceLines: instruction elements should contain reference line description on load if reference line exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility generic accessibility test suite referenceLines: instruction elements should contain reference line description on update if reference line exists on chart",
      "location": null,
      "status": "passed",
      "title": "referenceLines: instruction elements should contain reference line description on update if reference line exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "accessibility",
        "validation",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html accessibility validation refer to generic results above for accessibility validation tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for accessibility validation tests",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "base",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html base refer to generic results above for base tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for base tests",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "base",
        "layout",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html base layout should render chart horizontally when layout prop is horizontal",
      "location": null,
      "status": "passed",
      "title": "should render chart horizontally when layout prop is horizontal",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "base",
        "layout",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html base layout should render chart vertically when layout prop is vertical",
      "location": null,
      "status": "passed",
      "title": "should render chart vertically when layout prop is vertical",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "margin & padding",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html margin & padding refer to generic results above for margin & padding tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for margin & padding tests",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "annotations",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html annotations should pass annotation prop",
      "location": null,
      "status": "passed",
      "title": "should pass annotation prop",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "axes",
        "barIntervalRatio",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html axes barIntervalRatio should have ratio of 0.2 by default",
      "location": null,
      "status": "passed",
      "title": "should have ratio of 0.2 by default",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "axes",
        "barIntervalRatio",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html axes barIntervalRatio should have ratio of 0.5 when passed on load",
      "location": null,
      "status": "passed",
      "title": "should have ratio of 0.5 when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "axes",
        "barIntervalRatio",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html axes barIntervalRatio should have ratio of 0.5 when passed on update",
      "location": null,
      "status": "passed",
      "title": "should have ratio of 0.5 when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "axes",
        "groupIntervalRatio",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html axes groupIntervalRatio should have ratio of 0.2 by default",
      "location": null,
      "status": "passed",
      "title": "should have ratio of 0.2 by default",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "axes",
        "groupIntervalRatio",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html axes groupIntervalRatio should have ratio of 0.5 when passed on load",
      "location": null,
      "status": "passed",
      "title": "should have ratio of 0.5 when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "axes",
        "groupIntervalRatio",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html axes groupIntervalRatio should have ratio of 0.5 when passed on update",
      "location": null,
      "status": "passed",
      "title": "should have ratio of 0.5 when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "axes",
        "minValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html axes minValueOverride should have effect on bar size when minValueOverride is passed on load",
      "location": null,
      "status": "passed",
      "title": "should have effect on bar size when minValueOverride is passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "axes",
        "minValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html axes minValueOverride should have effect on bar size when minValueOverride is passed on update",
      "location": null,
      "status": "passed",
      "title": "should have effect on bar size when minValueOverride is passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "axes",
        "minValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html axes minValueOverride should have no effect on bar size when minValueOverride greater than minimum data value",
      "location": null,
      "status": "passed",
      "title": "should have no effect on bar size when minValueOverride greater than minimum data value",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "axes",
        "maxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html axes maxValueOverride should have effect on bar size when maxValueOverride is passed on load",
      "location": null,
      "status": "passed",
      "title": "should have effect on bar size when maxValueOverride is passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "axes",
        "maxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html axes maxValueOverride should have effect on bar size when maxValueOverride is passed on update",
      "location": null,
      "status": "passed",
      "title": "should have effect on bar size when maxValueOverride is passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "axes",
        "maxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html axes maxValueOverride should have no effect on bar size when minValueOverride smaller than maximum data value",
      "location": null,
      "status": "passed",
      "title": "should have no effect on bar size when minValueOverride smaller than maximum data value",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests wrapLabel: wrap label should be applied by default on load",
      "location": null,
      "status": "passed",
      "title": "wrapLabel: wrap label should be applied by default on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests wrapLabel: wrap label should be disabled when passed on load",
      "location": null,
      "status": "passed",
      "title": "wrapLabel: wrap label should be disabled when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests wrapLabel: wrap label should be disabled when passed on update",
      "location": null,
      "status": "passed",
      "title": "wrapLabel: wrap label should be disabled when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests xAxis.visible: axis should be visible by default",
      "location": null,
      "status": "passed",
      "title": "xAxis.visible: axis should be visible by default",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests yAxis.visible: axis should be visible by default",
      "location": null,
      "status": "passed",
      "title": "yAxis.visible: axis should be visible by default",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests xAxis.visible: axis should not be visible when passed on load",
      "location": null,
      "status": "passed",
      "title": "xAxis.visible: axis should not be visible when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests yAxis.visible: axis should not be visible when passed on load",
      "location": null,
      "status": "passed",
      "title": "yAxis.visible: axis should not be visible when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests xAxis.visible: axis should not be visible when passed on update",
      "location": null,
      "status": "passed",
      "title": "xAxis.visible: axis should not be visible when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests yAxis.visible: axis should not be visible when passed on update",
      "location": null,
      "status": "passed",
      "title": "yAxis.visible: axis should not be visible when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests xAxis.gridVisible: axis gridlines should not be visible by default",
      "location": null,
      "status": "passed",
      "title": "xAxis.gridVisible: axis gridlines should not be visible by default",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests yAxis.gridVisible: axis gridlines should be visible by default",
      "location": null,
      "status": "passed",
      "title": "yAxis.gridVisible: axis gridlines should be visible by default",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests xAxis.gridVisible: axis gridlines should be visible on load",
      "location": null,
      "status": "pending",
      "title": "xAxis.gridVisible: axis gridlines should be visible on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests yAxis.gridVisible: axis gridlines should not be visible on load",
      "location": null,
      "status": "passed",
      "title": "yAxis.gridVisible: axis gridlines should not be visible on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests xAxis.gridVisible: axis gridlines should be visible on update",
      "location": null,
      "status": "pending",
      "title": "xAxis.gridVisible: axis gridlines should be visible on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests yAxis.gridVisible: axis gridlines should not be visible on update",
      "location": null,
      "status": "passed",
      "title": "yAxis.gridVisible: axis gridlines should not be visible on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests xAxis.label: axis label should be X Axis by default",
      "location": null,
      "status": "passed",
      "title": "xAxis.label: axis label should be X Axis by default",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests yAxis.label: axis label should be Y Axis by default",
      "location": null,
      "status": "passed",
      "title": "yAxis.label: axis label should be Y Axis by default",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests xAxis.label: axis label should be passed on load",
      "location": null,
      "status": "passed",
      "title": "xAxis.label: axis label should be passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests yAxis.label: axis label should be passed on load",
      "location": null,
      "status": "passed",
      "title": "yAxis.label: axis label should be passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests xAxis.label: axis label should be passed on update",
      "location": null,
      "status": "passed",
      "title": "xAxis.label: axis label should be passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests yAxis.label: axis label should be passed on update",
      "location": null,
      "status": "passed",
      "title": "yAxis.label: axis label should be passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests xAxis.format: axis date format should be %b %y by default",
      "location": null,
      "status": "passed",
      "title": "xAxis.format: axis date format should be %b %y by default",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests yAxis.format: axis number format should be 0[.][0][0]a by default",
      "location": null,
      "status": "passed",
      "title": "yAxis.format: axis number format should be 0[.][0][0]a by default",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests xAxis.format: axis date format should be %b %Y when passed on load",
      "location": null,
      "status": "passed",
      "title": "xAxis.format: axis date format should be %b %Y when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests yAxis.format: axis number format should be $0[.][0]a when passed on load",
      "location": null,
      "status": "passed",
      "title": "yAxis.format: axis number format should be $0[.][0]a when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests xAxis.format: axis date format should be %b %Y when passed on update",
      "location": null,
      "status": "passed",
      "title": "xAxis.format: axis date format should be %b %Y when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests yAxis.format: axis number format should be $0[.][0]a when passed on update",
      "location": null,
      "status": "passed",
      "title": "yAxis.format: axis number format should be $0[.][0]a when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests xAxis.tickInterval: axis tick interval should be 2 when passed on load",
      "location": null,
      "status": "passed",
      "title": "xAxis.tickInterval: axis tick interval should be 2 when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests yAxis.tickInterval: axis tick interval should be 2 when passed on load",
      "location": null,
      "status": "passed",
      "title": "yAxis.tickInterval: axis tick interval should be 2 when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests xAxis.tickInterval: axis tick interval should be 2 when passed on load",
      "location": null,
      "status": "passed",
      "title": "xAxis.tickInterval: axis tick interval should be 2 when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests yAxis.tickInterval: axis tick interval should be 2 when passed on update",
      "location": null,
      "status": "passed",
      "title": "yAxis.tickInterval: axis tick interval should be 2 when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html generic axis tests xAxis.unit: axis date format should be unit millisecond when passed on load",
      "location": null,
      "status": "pending",
      "title": "xAxis.unit: axis date format should be unit millisecond when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html interaction bar based interaction tests [interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html interaction bar based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html interaction bar based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html interaction bar based interaction tests [interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html interaction bar based interaction tests [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html interaction bar based interaction tests [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html interaction bar based interaction tests [interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html interaction bar based interaction tests [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html interaction bar based interaction tests [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html event-emitter generic event testing bar based events [event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
      "location": null,
      "status": "passed",
      "title": "[event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html event-emitter generic event testing bar based events [event] clickEvent: event object should emit and contain first data record when first mark is clicked",
      "location": null,
      "status": "passed",
      "title": "[event] clickEvent: event object should emit and contain first data record when first mark is clicked",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html event-emitter generic event testing bar based events [event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
      "location": null,
      "status": "passed",
      "title": "[event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html event-emitter generic event testing bar based events [event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
      "location": null,
      "status": "passed",
      "title": "[event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html event-emitter generic event testing bar based events [event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html event-emitter generic event testing bar based events [event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html event-emitter generic event testing bar based events [event] drawStartEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] drawStartEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html event-emitter generic event testing bar based events [event] drawEndEvent: event object should emit and contain uniqueID on update",
      "location": null,
      "status": "passed",
      "title": "[event] drawEndEvent: event object should emit and contain uniqueID on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html event-emitter generic event testing bar based events [event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
      "location": null,
      "status": "passed",
      "title": "[event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "data",
        "uniqueId",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html data uniqueId refer to generic results above for uniqueID tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for uniqueID tests",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "data",
        "data",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html data data refer to generic results above for data tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for data tests",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "data",
        "reverseOrder",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html data reverseOrder should render bars in order by default",
      "location": null,
      "status": "passed",
      "title": "should render bars in order by default",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "data",
        "reverseOrder",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html data reverseOrder should render bars in reverseOrder when passed as true on load",
      "location": null,
      "status": "passed",
      "title": "should render bars in reverseOrder when passed as true on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "data",
        "reverseOrder",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html data reverseOrder should render bars in reverseOrder when passed as true on update",
      "location": null,
      "status": "pending",
      "title": "should render bars in reverseOrder when passed as true on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should render and have opacity 1 and be placed on hover",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 1 and be placed on hover",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should not render when event is triggered and showTooltip is false",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should not render when event is triggered and showTooltip is false",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render default content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render default content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render formatted custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render formatted custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html labels tooltip generic tooltip tests dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html labels tooltip generic tooltip tests dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html labels dataLabel visible should render dataLabel by default",
      "location": null,
      "status": "passed",
      "title": "should render dataLabel by default",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html labels dataLabel visible should not render the bar data labels if visible is false",
      "location": null,
      "status": "passed",
      "title": "should not render the bar data labels if visible is false",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html labels dataLabel labelAccessor should default to the value accessor if default",
      "location": null,
      "status": "passed",
      "title": "should default to the value accessor if default",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html labels dataLabel labelAccessor should render the data labels if visible is true",
      "location": null,
      "status": "passed",
      "title": "should render the data labels if visible is true",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "format",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html labels dataLabel format should format number if passed as prop",
      "location": null,
      "status": "passed",
      "title": "should format number if passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html labels dataLabel placement should place labels on top of bars by default",
      "location": null,
      "status": "passed",
      "title": "should place labels on top of bars by default",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html labels dataLabel placement should place labels on bottom of bars if passed",
      "location": null,
      "status": "passed",
      "title": "should place labels on bottom of bars if passed",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html labels legend visible by default the legend should render for clustered bar",
      "location": null,
      "status": "passed",
      "title": "by default the legend should render for clustered bar",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html labels legend visible should render, but not be visible if false is passed",
      "location": null,
      "status": "passed",
      "title": "should render, but not be visible if false is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "type",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html labels legend type should be bar default type by default",
      "location": null,
      "status": "passed",
      "title": "should be bar default type by default",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "type",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html labels legend type should be bar type even if another type is passed",
      "location": null,
      "status": "passed",
      "title": "should be bar type even if another type is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "interactive",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html labels legend interactive should not be interactive by deafult",
      "location": null,
      "status": "passed",
      "title": "should not be interactive by deafult",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "interactive",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html labels legend interactive should be interactive when interactive prop is true",
      "location": null,
      "status": "passed",
      "title": "should be interactive when interactive prop is true",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "format",
      ],
      "failureMessages": Array [
        "Error: expected textContent \\"$15\\" to equal \\"15\\"
    at Object.<anonymous> (./packages/clustered-bar-chart/src/components/clustered-bar-chart/clustered-bar-chart.spec.ts:1571:33)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)",
      ],
      "fullName": "<clustered-bar-chart> rendered-html labels legend format should format number if passed as prop",
      "location": null,
      "status": "failed",
      "title": "should format number if passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "labels",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html labels legend labels should be equal to data values by default",
      "location": null,
      "status": "passed",
      "title": "should be equal to data values by default",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "labels",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html labels legend labels should have custom labels when passed as prop",
      "location": null,
      "status": "passed",
      "title": "should have custom labels when passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "reference line",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html reference line should pass referenceLines prop",
      "location": null,
      "status": "passed",
      "title": "should pass referenceLines prop",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "reference line",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html reference line should pass referenceStyle prop",
      "location": null,
      "status": "passed",
      "title": "should pass referenceStyle prop",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "style with textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html style with textures colorPalette should render texture categorical by default",
      "location": null,
      "status": "passed",
      "title": "should render texture categorical by default",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "style with textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html style with textures colorPalette should load texture diverging R to B when colorPalette is diverging_RtoB",
      "location": null,
      "status": "passed",
      "title": "should load texture diverging R to B when colorPalette is diverging_RtoB",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "style with textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html style with textures colorPalette should update texture to diverging R to B when colorPalette is diverging_RtoB",
      "location": null,
      "status": "passed",
      "title": "should update texture to diverging R to B when colorPalette is diverging_RtoB",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "style with textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html style with textures colorPalette should render sequential grey and color when colorPalette is sequential_grey",
      "location": null,
      "status": "passed",
      "title": "should render sequential grey and color when colorPalette is sequential_grey",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "style with textures",
        "colors",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html style with textures colors should render colors texture instead of palette when passed",
      "location": null,
      "status": "passed",
      "title": "should render colors texture instead of palette when passed",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "style no textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html style no textures colorPalette should render categorical by default",
      "location": null,
      "status": "passed",
      "title": "should render categorical by default",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "style no textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html style no textures colorPalette should load diverging R to B when colorPalette is diverging_RtoB",
      "location": null,
      "status": "passed",
      "title": "should load diverging R to B when colorPalette is diverging_RtoB",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "style no textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html style no textures colorPalette should update diverging R to B when colorPalette is diverging_RtoB",
      "location": null,
      "status": "passed",
      "title": "should update diverging R to B when colorPalette is diverging_RtoB",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "style no textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html style no textures colorPalette should render sequential orange when colorPalette is sequential_orange",
      "location": null,
      "status": "passed",
      "title": "should render sequential orange when colorPalette is sequential_orange",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "style no textures",
        "colors",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html style no textures colors should render colors instead of palette when passed",
      "location": null,
      "status": "passed",
      "title": "should render colors instead of palette when passed",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "style no textures",
        "cursor",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html style no textures cursor refer to generic interaction results above for cursor tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic interaction results above for cursor tests",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "style no textures",
        "roundedCorner",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html style no textures roundedCorner should render rectangle bars when roundedCorner is zero (default)",
      "location": null,
      "status": "passed",
      "title": "should render rectangle bars when roundedCorner is zero (default)",
    },
    Object {
      "ancestorTitles": Array [
        "<clustered-bar-chart>",
        "rendered-html",
        "style no textures",
        "roundedCorner",
      ],
      "failureMessages": Array [],
      "fullName": "<clustered-bar-chart> rendered-html style no textures roundedCorner should render rounded bars when roundedCorner is non-zero positive number",
      "location": null,
      "status": "passed",
      "title": "should render rounded bars when roundedCorner is non-zero positive number",
    },
  ],
  "dumbbell-plot": Array [
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "class-logic",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> class-logic should build",
      "location": null,
      "status": "passed",
      "title": "should build",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html should build",
      "location": null,
      "status": "passed",
      "title": "should build",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "render",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html render should render with minimal props[data,oridnalAccessor,seriesAccessor,valueAccessor] given",
      "location": null,
      "status": "passed",
      "title": "should render with minimal props[data,oridnalAccessor,seriesAccessor,valueAccessor] given",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "render",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html render localization: should render localized with minimal props[data,accessors] given",
      "location": null,
      "status": "passed",
      "title": "localization: should render localized with minimal props[data,accessors] given",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite height: default height on load",
      "location": null,
      "status": "passed",
      "title": "height: default height on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite height: set height on load",
      "location": null,
      "status": "passed",
      "title": "height: set height on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite height: set height on update",
      "location": null,
      "status": "passed",
      "title": "height: set height on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite width: default width on load",
      "location": null,
      "status": "passed",
      "title": "width: default width on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite width: set width on load",
      "location": null,
      "status": "passed",
      "title": "width: set width on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite width: set width on update",
      "location": null,
      "status": "passed",
      "title": "width: set width on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite mainTitle: default mainTitle on load",
      "location": null,
      "status": "passed",
      "title": "mainTitle: default mainTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite mainTitle: set mainTitle on load",
      "location": null,
      "status": "passed",
      "title": "mainTitle: set mainTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite mainTitle: set mainTitle on update",
      "location": null,
      "status": "passed",
      "title": "mainTitle: set mainTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite subTitle: default subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: default subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite subTitle: set subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: set subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite subTitle: set subTitle on update",
      "location": null,
      "status": "passed",
      "title": "subTitle: set subTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite subTitle: set legend subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: set legend subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite subTitle: set legend subTitle on update",
      "location": null,
      "status": "passed",
      "title": "subTitle: set legend subTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite margin: default margin on load",
      "location": null,
      "status": "passed",
      "title": "margin: default margin on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite margin: custom margin on load",
      "location": null,
      "status": "passed",
      "title": "margin: custom margin on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite margin: custom margin on update",
      "location": null,
      "status": "passed",
      "title": "margin: custom margin on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite padding: default padding on load",
      "location": null,
      "status": "passed",
      "title": "padding: default padding on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite padding: custom padding on load",
      "location": null,
      "status": "passed",
      "title": "padding: custom padding on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite padding: custom padding on update",
      "location": null,
      "status": "passed",
      "title": "padding: custom padding on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite uniqueID: default uniqueID on load",
      "location": null,
      "status": "passed",
      "title": "uniqueID: default uniqueID on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite uniqueID: custom uniqueID on load",
      "location": null,
      "status": "passed",
      "title": "uniqueID: custom uniqueID on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite uniqueID: custom uniqueID on update",
      "location": null,
      "status": "passed",
      "title": "uniqueID: custom uniqueID on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite accessibility: should print accessibility console warnings and logs when accessibility.disableValidation defaults to false",
      "location": null,
      "status": "passed",
      "title": "accessibility: should print accessibility console warnings and logs when accessibility.disableValidation defaults to false",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite accessibility: should not print accessibility console warnings and logs when accessibility.disableValidation set to true",
      "location": null,
      "status": "passed",
      "title": "accessibility: should not print accessibility console warnings and logs when accessibility.disableValidation set to true",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite localization: should print localization console warnings and logs when localization.skipValidation defaults to false",
      "location": null,
      "status": "passed",
      "title": "localization: should print localization console warnings and logs when localization.skipValidation defaults to false",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite localization: should not print localization console warnings and logs when localization.skipValidation set to true",
      "location": null,
      "status": "passed",
      "title": "localization: should not print localization console warnings and logs when localization.skipValidation set to true",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite data: custom data on load",
      "location": null,
      "status": "passed",
      "title": "data: custom data on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite data: custom data enter on update",
      "location": null,
      "status": "passed",
      "title": "data: custom data enter on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html generic test suite data: custom data exit on update",
      "location": null,
      "status": "passed",
      "title": "data: custom data exit on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: default instruction elements should exist and have screen reader class",
      "location": null,
      "status": "passed",
      "title": "accessibility: default instruction elements should exist and have screen reader class",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: custom instruction elements should exist and have screen reader class on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: custom instruction elements should exist and have screen reader class on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: custom instruction elements should exist and have screen reader class on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: custom instruction elements should exist and have screen reader class on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have default html tags",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have default html tags",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have h3+ html tags and headings on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have h3+ html tags and headings on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have div html tags on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have div html tags on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have h4+ html tags and all headings on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have h4+ html tags and all headings on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have p html tags on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have p html tags on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component renders in default state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component renders in default state",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component shows header in focus state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component shows header in focus state",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component displays table in click state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component displays table in click state",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component displays table in click state with space enabled",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component displays table in click state with space enabled",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: attributes should be added to static geometries on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: attributes should be added to static geometries on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: attributes should be added to geometries on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: attributes should be added to geometries on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: controller div should be created and attributes should be added on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: controller div should be created and attributes should be added on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: controller div should be created and static image attributes should be added on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: controller div should be created and static image attributes should be added on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: focus marker style should be applied on focus",
      "location": null,
      "status": "pending",
      "title": "accessibility: focus marker style should be applied on focus",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: focus group style should be applied on focus",
      "location": null,
      "status": "passed",
      "title": "accessibility: focus group style should be applied on focus",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: test whether space bar performs click action",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: test whether space bar performs click action",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: group - shift+enter will exit group",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: group - shift+enter will exit group",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - right arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - right arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - right arrow goes to first from last",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - right arrow goes to first from last",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - left arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - left arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - left arrow loops to last from first",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - left arrow loops to last from first",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: tooltip should get hidden on ESC key",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: tooltip should get hidden on ESC key",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain xAxis description on load if xAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain xAxis description on load if xAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should not contain xAxis description on load if xAxis is not visible on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should not contain xAxis description on load if xAxis is not visible on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain xAxis description on update if xAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain xAxis description on update if xAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain yAxis description on load if yAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain yAxis description on load if yAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should not contain yAxis description on load if yAxis is not visible on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should not contain yAxis description on load if yAxis is not visible on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain yAxis description on update if yAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain yAxis description on update if yAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are applied by default on load",
      "location": null,
      "status": "pending",
      "title": "accessibility: accessibility textures are applied by default on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are removed on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: accessibility textures are removed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are removed on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: accessibility textures are removed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are applied in default order on load",
      "location": null,
      "status": "pending",
      "title": "accessibility: accessibility textures are applied in default order on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is false by default",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is false by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is true when passed on load",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is true when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is true when passed on update",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is true when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite annotations: instruction elements should contain annotation description on load if annotation exists on chart",
      "location": null,
      "status": "passed",
      "title": "annotations: instruction elements should contain annotation description on load if annotation exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite annotations: instruction elements should contain annotation description on update if annotation exists on chart",
      "location": null,
      "status": "passed",
      "title": "annotations: instruction elements should contain annotation description on update if annotation exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite referenceLines: instruction elements should contain reference line description on load if reference line exists on chart",
      "location": null,
      "status": "passed",
      "title": "referenceLines: instruction elements should contain reference line description on load if reference line exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility generic accessibility test suite referenceLines: instruction elements should contain reference line description on update if reference line exists on chart",
      "location": null,
      "status": "passed",
      "title": "referenceLines: instruction elements should contain reference line description on update if reference line exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "accessibility",
        "validation",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html accessibility validation refer to generic results above for accessibility validation tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for accessibility validation tests",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "base",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html base refer to generic results above for base tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for base tests",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "base",
        "layout",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html base layout should render chart horizontally when layout prop is horizontal",
      "location": null,
      "status": "passed",
      "title": "should render chart horizontally when layout prop is horizontal",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "base",
        "layout",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html base layout should render chart vertically when layout prop is vertical",
      "location": null,
      "status": "passed",
      "title": "should render chart vertically when layout prop is vertical",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "base",
        "layout",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html base layout should render chart vertically when layout prop is horizontal and oridnal access is a date",
      "location": null,
      "status": "passed",
      "title": "should render chart vertically when layout prop is horizontal and oridnal access is a date",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "margin & padding",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html margin & padding refer to generic results above for margin & padding tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for margin & padding tests",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "annotations",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html annotations should pass annotation prop",
      "location": null,
      "status": "passed",
      "title": "should pass annotation prop",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "minValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes minValueOverride should baseline y axis at zero when passed on load",
      "location": null,
      "status": "passed",
      "title": "should baseline y axis at zero when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "minValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes minValueOverride should baseline y axis at zero when passed on update",
      "location": null,
      "status": "passed",
      "title": "should baseline y axis at zero when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "maxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes maxValueOverride should topline y axis at 20b when passed on load",
      "location": null,
      "status": "passed",
      "title": "should topline y axis at 20b when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "maxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes maxValueOverride should topline y axis at 20b when passed on update",
      "location": null,
      "status": "passed",
      "title": "should topline y axis at 20b when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "showBaselineX & showBaselineY",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes showBaselineX & showBaselineY baseline on xAxis and yAxis should not be visible by default",
      "location": null,
      "status": "passed",
      "title": "baseline on xAxis and yAxis should not be visible by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "showBaselineX & showBaselineY",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes showBaselineX & showBaselineY should render yAxis baseline and not xAxis baseline when horizontal",
      "location": null,
      "status": "passed",
      "title": "should render yAxis baseline and not xAxis baseline when horizontal",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "showBaselineX & showBaselineY",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes showBaselineX & showBaselineY should render xAxis baseline and not yAxis baseline when vertical on load",
      "location": null,
      "status": "passed",
      "title": "should render xAxis baseline and not yAxis baseline when vertical on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "showBaselineX & showBaselineY",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes showBaselineX & showBaselineY should render xAxis baseline and not yAxis baseline when vertical on update",
      "location": null,
      "status": "passed",
      "title": "should render xAxis baseline and not yAxis baseline when vertical on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests wrapLabel: wrap label should be applied by default on load",
      "location": null,
      "status": "passed",
      "title": "wrapLabel: wrap label should be applied by default on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests wrapLabel: wrap label should be disabled when passed on load",
      "location": null,
      "status": "passed",
      "title": "wrapLabel: wrap label should be disabled when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests wrapLabel: wrap label should be disabled when passed on update",
      "location": null,
      "status": "passed",
      "title": "wrapLabel: wrap label should be disabled when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests xAxis.visible: axis should be visible by default",
      "location": null,
      "status": "passed",
      "title": "xAxis.visible: axis should be visible by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests yAxis.visible: axis should be visible by default",
      "location": null,
      "status": "passed",
      "title": "yAxis.visible: axis should be visible by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests xAxis.visible: axis should not be visible when passed on load",
      "location": null,
      "status": "passed",
      "title": "xAxis.visible: axis should not be visible when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests yAxis.visible: axis should not be visible when passed on load",
      "location": null,
      "status": "passed",
      "title": "yAxis.visible: axis should not be visible when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests xAxis.visible: axis should not be visible when passed on update",
      "location": null,
      "status": "passed",
      "title": "xAxis.visible: axis should not be visible when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests yAxis.visible: axis should not be visible when passed on update",
      "location": null,
      "status": "passed",
      "title": "yAxis.visible: axis should not be visible when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests xAxis.gridVisible: axis gridlines should not be visible by default",
      "location": null,
      "status": "passed",
      "title": "xAxis.gridVisible: axis gridlines should not be visible by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests yAxis.gridVisible: axis gridlines should be visible by default",
      "location": null,
      "status": "passed",
      "title": "yAxis.gridVisible: axis gridlines should be visible by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests xAxis.gridVisible: axis gridlines should be visible on load",
      "location": null,
      "status": "passed",
      "title": "xAxis.gridVisible: axis gridlines should be visible on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests yAxis.gridVisible: axis gridlines should not be visible on load",
      "location": null,
      "status": "passed",
      "title": "yAxis.gridVisible: axis gridlines should not be visible on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests xAxis.gridVisible: axis gridlines should be visible on update",
      "location": null,
      "status": "passed",
      "title": "xAxis.gridVisible: axis gridlines should be visible on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests yAxis.gridVisible: axis gridlines should not be visible on update",
      "location": null,
      "status": "passed",
      "title": "yAxis.gridVisible: axis gridlines should not be visible on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests xAxis.label: axis label should be X Axis by default",
      "location": null,
      "status": "passed",
      "title": "xAxis.label: axis label should be X Axis by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests yAxis.label: axis label should be Y Axis by default",
      "location": null,
      "status": "passed",
      "title": "yAxis.label: axis label should be Y Axis by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests xAxis.label: axis label should be passed on load",
      "location": null,
      "status": "passed",
      "title": "xAxis.label: axis label should be passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests yAxis.label: axis label should be passed on load",
      "location": null,
      "status": "passed",
      "title": "yAxis.label: axis label should be passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests xAxis.label: axis label should be passed on update",
      "location": null,
      "status": "passed",
      "title": "xAxis.label: axis label should be passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests yAxis.label: axis label should be passed on update",
      "location": null,
      "status": "passed",
      "title": "yAxis.label: axis label should be passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests xAxis.format: axis date format should be %b %y by default",
      "location": null,
      "status": "passed",
      "title": "xAxis.format: axis date format should be %b %y by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests yAxis.format: axis number format should be 0[.][0][0]a by default",
      "location": null,
      "status": "passed",
      "title": "yAxis.format: axis number format should be 0[.][0][0]a by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests xAxis.format: axis date format should be %b %Y when passed on load",
      "location": null,
      "status": "passed",
      "title": "xAxis.format: axis date format should be %b %Y when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests yAxis.format: axis number format should be $0[.][0]a when passed on load",
      "location": null,
      "status": "passed",
      "title": "yAxis.format: axis number format should be $0[.][0]a when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests xAxis.format: axis date format should be %b %Y when passed on update",
      "location": null,
      "status": "passed",
      "title": "xAxis.format: axis date format should be %b %Y when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests yAxis.format: axis number format should be $0[.][0]a when passed on update",
      "location": null,
      "status": "passed",
      "title": "yAxis.format: axis number format should be $0[.][0]a when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests xAxis.tickInterval: axis tick interval should be 2 when passed on load",
      "location": null,
      "status": "passed",
      "title": "xAxis.tickInterval: axis tick interval should be 2 when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests yAxis.tickInterval: axis tick interval should be 2 when passed on load",
      "location": null,
      "status": "passed",
      "title": "yAxis.tickInterval: axis tick interval should be 2 when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests xAxis.tickInterval: axis tick interval should be 2 when passed on load",
      "location": null,
      "status": "passed",
      "title": "xAxis.tickInterval: axis tick interval should be 2 when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests yAxis.tickInterval: axis tick interval should be 2 when passed on update",
      "location": null,
      "status": "passed",
      "title": "yAxis.tickInterval: axis tick interval should be 2 when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "axes",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html axes generic axis tests xAxis.unit: axis date format should be unit millisecond when passed on load",
      "location": null,
      "status": "passed",
      "title": "xAxis.unit: axis date format should be unit millisecond when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "interaction",
        "data label based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html interaction data label based interaction tests [interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "interaction",
        "data label based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html interaction data label based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "interaction",
        "data label based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html interaction data label based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "label based events",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html event-emitter generic event testing label based events [event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
      "location": null,
      "status": "passed",
      "title": "[event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "label based events",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html event-emitter generic event testing label based events [event] clickEvent: event object should emit and contain first data record when first mark is clicked",
      "location": null,
      "status": "passed",
      "title": "[event] clickEvent: event object should emit and contain first data record when first mark is clicked",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "label based events",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html event-emitter generic event testing label based events [event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
      "location": null,
      "status": "passed",
      "title": "[event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "label based events",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html event-emitter generic event testing label based events [event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
      "location": null,
      "status": "passed",
      "title": "[event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "label based events",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html event-emitter generic event testing label based events [event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "label based events",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html event-emitter generic event testing label based events [event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "label based events",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html event-emitter generic event testing label based events [event] drawStartEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] drawStartEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "label based events",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html event-emitter generic event testing label based events [event] drawEndEvent: event object should emit and contain uniqueID on update",
      "location": null,
      "status": "passed",
      "title": "[event] drawEndEvent: event object should emit and contain uniqueID on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "label based events",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html event-emitter generic event testing label based events [event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
      "location": null,
      "status": "passed",
      "title": "[event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "data",
        "uniqueId",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html data uniqueId refer to generic results above for uniqueID tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for uniqueID tests",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "data",
        "data",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html data data refer to generic results above for data tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for data tests",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "data",
        "sort",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html data sort should render data in ascending order of difference when sortOrder is asc",
      "location": null,
      "status": "passed",
      "title": "should render data in ascending order of difference when sortOrder is asc",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "data",
        "sort",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html data sort should render data in ascending order of focus marker when sortOrder is focusAsc",
      "location": null,
      "status": "passed",
      "title": "should render data in ascending order of focus marker when sortOrder is focusAsc",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "data",
        "sort",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html data sort should render data in ascending order of absolute difference when sortOrder is absoluteDiffAsc",
      "location": null,
      "status": "passed",
      "title": "should render data in ascending order of absolute difference when sortOrder is absoluteDiffAsc",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "data",
        "sort",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html data sort should render data in descending order of difference when sortOrder is desc",
      "location": null,
      "status": "passed",
      "title": "should render data in descending order of difference when sortOrder is desc",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "data",
        "sort",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html data sort should render data in descending order of focus marker when sortOrder is desc",
      "location": null,
      "status": "passed",
      "title": "should render data in descending order of focus marker when sortOrder is desc",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "data",
        "sort",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html data sort should render data in descending order of absolute difference when sortOrder is desc",
      "location": null,
      "status": "passed",
      "title": "should render data in descending order of absolute difference when sortOrder is desc",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "data",
        "sort",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html data sort should render data in default order when sortOrder is default",
      "location": null,
      "status": "passed",
      "title": "should render data in default order when sortOrder is default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "bar",
        "barStyle.colorRule",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html bar barStyle.colorRule bar color should be default on load",
      "location": null,
      "status": "passed",
      "title": "bar color should be default on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "bar",
        "barStyle.colorRule",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html bar barStyle.colorRule bar color should be greaterValue if set on load",
      "location": null,
      "status": "passed",
      "title": "bar color should be greaterValue if set on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "bar",
        "barStyle.colorRule",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html bar barStyle.colorRule bar color should be focus if set on load",
      "location": null,
      "status": "passed",
      "title": "bar color should be focus if set on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "bar",
        "barStyle.colorRule",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html bar barStyle.colorRule bar color should be greaterValue if set on update",
      "location": null,
      "status": "passed",
      "title": "bar color should be greaterValue if set on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "bar",
        "barStyle.colorRule",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html bar barStyle.colorRule bar color should be focus if set on update",
      "location": null,
      "status": "passed",
      "title": "bar color should be focus if set on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "bar",
        "barStyle.opacity",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html bar barStyle.opacity bar stroke opacity should default to 1 on load",
      "location": null,
      "status": "passed",
      "title": "bar stroke opacity should default to 1 on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "bar",
        "barStyle.opacity",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html bar barStyle.opacity bar stroke opacity set to 0.5 on load",
      "location": null,
      "status": "passed",
      "title": "bar stroke opacity set to 0.5 on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "bar",
        "barStyle.opacity",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html bar barStyle.opacity bar stroke opacity set to 0.5 on update",
      "location": null,
      "status": "passed",
      "title": "bar stroke opacity set to 0.5 on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "bar",
        "barStyle.width",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html bar barStyle.width bar width should default to 1 on load",
      "location": null,
      "status": "passed",
      "title": "bar width should default to 1 on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "bar",
        "barStyle.width",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html bar barStyle.width bar width set to 5 on load",
      "location": null,
      "status": "passed",
      "title": "bar width set to 5 on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "bar",
        "barStyle.width",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html bar barStyle.width bar width set to 2.5 on update",
      "location": null,
      "status": "passed",
      "title": "bar width set to 2.5 on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should render and have opacity 1 and be placed on hover",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 1 and be placed on hover",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should not render when event is triggered and showTooltip is false",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should not render when event is triggered and showTooltip is false",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render default content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render default content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render formatted custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render formatted custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels tooltip generic tooltip tests dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels tooltip generic tooltip tests dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels dataLabel visible should render dataLabel by default",
      "location": null,
      "status": "passed",
      "title": "should render dataLabel by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels dataLabel visible should not render the bar data labels if visible is false on load",
      "location": null,
      "status": "passed",
      "title": "should not render the bar data labels if visible is false on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels dataLabel visible should not render the bar data labels if visible is false on update",
      "location": null,
      "status": "passed",
      "title": "should not render the bar data labels if visible is false on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor & format",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels dataLabel labelAccessor & format should default to the value accessor if default",
      "location": null,
      "status": "passed",
      "title": "should default to the value accessor if default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor & format",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels dataLabel labelAccessor & format should render specific field and format if labelAccessor is passed on load",
      "location": null,
      "status": "passed",
      "title": "should render specific field and format if labelAccessor is passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor & format",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels dataLabel labelAccessor & format should render specific field and format if labelAccessor is passed on update",
      "location": null,
      "status": "passed",
      "title": "should render specific field and format if labelAccessor is passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement - vertical",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels dataLabel placement - vertical should place labels on ends of dumbbells by default",
      "location": null,
      "status": "passed",
      "title": "should place labels on ends of dumbbells by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement - vertical",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels dataLabel placement - vertical should place labels on side of bars if passed left or right on load",
      "location": null,
      "status": "passed",
      "title": "should place labels on side of bars if passed left or right on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement - vertical",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels dataLabel placement - vertical should place labels on side of bars if passed left or right on update",
      "location": null,
      "status": "passed",
      "title": "should place labels on side of bars if passed left or right on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement - horizontal",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels dataLabel placement - horizontal should place labels on ends of dumbbells by default",
      "location": null,
      "status": "passed",
      "title": "should place labels on ends of dumbbells by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement - horizontal",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels dataLabel placement - horizontal should place labels on side of bars if passed top or bottom on load",
      "location": null,
      "status": "passed",
      "title": "should place labels on side of bars if passed top or bottom on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement - horizontal",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels dataLabel placement - horizontal should place labels on side of bars if passed top or bottom on update",
      "location": null,
      "status": "passed",
      "title": "should place labels on side of bars if passed top or bottom on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "differenceLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels differenceLabel visible should not render differenceLabel by default",
      "location": null,
      "status": "passed",
      "title": "should not render differenceLabel by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "differenceLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels differenceLabel visible should render differenceLabel when passed on load",
      "location": null,
      "status": "passed",
      "title": "should render differenceLabel when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "differenceLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels differenceLabel visible should render differenceLabel when passed on update",
      "location": null,
      "status": "passed",
      "title": "should render differenceLabel when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "differenceLabel",
        "calculation & format",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels differenceLabel calculation & format should render calculation difference and default format by default (though hidden)",
      "location": null,
      "status": "passed",
      "title": "should render calculation difference and default format by default (though hidden)",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "differenceLabel",
        "calculation & format",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels differenceLabel calculation & format should render calculation middle and custom format on load (though hidden)",
      "location": null,
      "status": "passed",
      "title": "should render calculation middle and custom format on load (though hidden)",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "differenceLabel",
        "calculation & format",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels differenceLabel calculation & format should render calculation middle and custom format on update (though hidden)",
      "location": null,
      "status": "passed",
      "title": "should render calculation middle and custom format on update (though hidden)",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "differenceLabel",
        "placement - vertical",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels differenceLabel placement - vertical should place difference labels on left of dumbbells by default",
      "location": null,
      "status": "passed",
      "title": "should place difference labels on left of dumbbells by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "differenceLabel",
        "placement - vertical",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels differenceLabel placement - vertical should place labels on side of bars if passed left or right on load",
      "location": null,
      "status": "passed",
      "title": "should place labels on side of bars if passed left or right on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "differenceLabel",
        "placement - vertical",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels differenceLabel placement - vertical should place labels on side of bars if passed left or right on update",
      "location": null,
      "status": "passed",
      "title": "should place labels on side of bars if passed left or right on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "differenceLabel",
        "placement - horizontal",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels differenceLabel placement - horizontal should place difference labels on tops of dumbbells by default",
      "location": null,
      "status": "passed",
      "title": "should place difference labels on tops of dumbbells by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "differenceLabel",
        "placement - horizontal",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels differenceLabel placement - horizontal should place difference labels on bottoms of dumbbells on load",
      "location": null,
      "status": "passed",
      "title": "should place difference labels on bottoms of dumbbells on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "differenceLabel",
        "placement - horizontal",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels differenceLabel placement - horizontal should place difference labels on bottoms of dumbbells on update",
      "location": null,
      "status": "passed",
      "title": "should place difference labels on bottoms of dumbbells on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels seriesLabel visible should render seriesLabel by default",
      "location": null,
      "status": "passed",
      "title": "should render seriesLabel by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels seriesLabel visible should not render seriesLabel when passed on load",
      "location": null,
      "status": "passed",
      "title": "should not render seriesLabel when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels seriesLabel visible should not render seriesLabel when passed on update",
      "location": null,
      "status": "passed",
      "title": "should not render seriesLabel when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "placement - vertical",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels seriesLabel placement - vertical should place series labels on right of chart by default",
      "location": null,
      "status": "passed",
      "title": "should place series labels on right of chart by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "placement - vertical",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels seriesLabel placement - vertical should place series labels on left of chart on load",
      "location": null,
      "status": "passed",
      "title": "should place series labels on left of chart on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "placement - vertical",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels seriesLabel placement - vertical should place series labels on left of chart on update",
      "location": null,
      "status": "passed",
      "title": "should place series labels on left of chart on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "placement - horizontal",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels seriesLabel placement - horizontal should place series labels on top of chart by default",
      "location": null,
      "status": "passed",
      "title": "should place series labels on top of chart by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "placement - horizontal",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels seriesLabel placement - horizontal should place series labels on bottom of chart on load",
      "location": null,
      "status": "passed",
      "title": "should place series labels on bottom of chart on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "placement - horizontal",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels seriesLabel placement - horizontal should place series labels on bottom of chart on update",
      "location": null,
      "status": "passed",
      "title": "should place series labels on bottom of chart on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "label",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels seriesLabel label should use values of seriesAccessor as label by default",
      "location": null,
      "status": "passed",
      "title": "should use values of seriesAccessor as label by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "label",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels seriesLabel label should use values of label prop when passed on load",
      "location": null,
      "status": "passed",
      "title": "should use values of label prop when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "label",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels seriesLabel label should use values of label prop when passed on update",
      "location": null,
      "status": "passed",
      "title": "should use values of label prop when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "legend",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels legend visible by default the legend should not render",
      "location": null,
      "status": "passed",
      "title": "by default the legend should not render",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "legend",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels legend visible should render, and be visible if visible is passed",
      "location": null,
      "status": "passed",
      "title": "should render, and be visible if visible is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "legend",
        "interactive",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels legend interactive should not be interactive by default",
      "location": null,
      "status": "passed",
      "title": "should not be interactive by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "legend",
        "interactive",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels legend interactive should be interactive when interactive prop is true and interaction keys is series accessor on load",
      "location": null,
      "status": "passed",
      "title": "should be interactive when interactive prop is true and interaction keys is series accessor on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "legend",
        "interactive",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels legend interactive should be interactive when interactive prop is true and interaction keys is series accessor on update",
      "location": null,
      "status": "passed",
      "title": "should be interactive when interactive prop is true and interaction keys is series accessor on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "legend",
        "interactive",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels legend interactive should be interactive when interactive prop is true on load and interaction keys is series accessor on update",
      "location": null,
      "status": "passed",
      "title": "should be interactive when interactive prop is true on load and interaction keys is series accessor on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "legend",
        "labels",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels legend labels should be equal to data values by default",
      "location": null,
      "status": "passed",
      "title": "should be equal to data values by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "labels",
        "legend",
        "labels",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html labels legend labels should have custom labels when passed as prop",
      "location": null,
      "status": "passed",
      "title": "should have custom labels when passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "markers",
        "marker",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html markers marker visible marker should be visible by default",
      "location": null,
      "status": "passed",
      "title": "marker should be visible by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "markers",
        "marker",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html markers marker visible marker should not be visible when false is passed on load",
      "location": null,
      "status": "passed",
      "title": "marker should not be visible when false is passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "markers",
        "marker",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html markers marker visible marker should not be visible when false is passed on update",
      "location": null,
      "status": "passed",
      "title": "marker should not be visible when false is passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "markers",
        "marker",
        "type",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html markers marker type marker type should be dot by default",
      "location": null,
      "status": "pending",
      "title": "marker type should be dot by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "markers",
        "marker",
        "type",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html markers marker type marker type should be arrow if passed on load",
      "location": null,
      "status": "pending",
      "title": "marker type should be arrow if passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "markers",
        "marker",
        "type",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html markers marker type marker type should be stroke if passed on update",
      "location": null,
      "status": "pending",
      "title": "marker type should be stroke if passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "markers",
        "marker",
        "sizeFromBar",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html markers marker sizeFromBar marker sizeFromBar should be 8 by default",
      "location": null,
      "status": "pending",
      "title": "marker sizeFromBar should be 8 by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "markers",
        "marker",
        "sizeFromBar",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html markers marker sizeFromBar marker sizeFromBar should be 18 when passed on load",
      "location": null,
      "status": "pending",
      "title": "marker sizeFromBar should be 18 when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "markers",
        "marker",
        "sizeFromBar",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html markers marker sizeFromBar marker sizeFromBar should be 10 when passed on update",
      "location": null,
      "status": "pending",
      "title": "marker sizeFromBar should be 10 when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "markers",
        "focusMarker",
        "key",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html markers focusMarker key focusMarker key should be empty by default",
      "location": null,
      "status": "passed",
      "title": "focusMarker key should be empty by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "markers",
        "focusMarker",
        "key",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html markers focusMarker key focusMarker key should be applied if valid and passed on load",
      "location": null,
      "status": "passed",
      "title": "focusMarker key should be applied if valid and passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "markers",
        "focusMarker",
        "key",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html markers focusMarker key focusMarker key should be applied if valid and passed on update",
      "location": null,
      "status": "passed",
      "title": "focusMarker key should be applied if valid and passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "markers",
        "focusMarker",
        "sizeFromBar",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html markers focusMarker sizeFromBar focusMarker sizeFromBar should be 12 (default) when focus marker is passed on load",
      "location": null,
      "status": "pending",
      "title": "focusMarker sizeFromBar should be 12 (default) when focus marker is passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "markers",
        "focusMarker",
        "sizeFromBar",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html markers focusMarker sizeFromBar focusMarker sizeFromBar should be 15 when passed on update",
      "location": null,
      "status": "pending",
      "title": "focusMarker sizeFromBar should be 15 when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "reference line",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html reference line should pass referenceLines prop",
      "location": null,
      "status": "passed",
      "title": "should pass referenceLines prop",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "reference line",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html reference line should pass referenceStyle prop",
      "location": null,
      "status": "passed",
      "title": "should pass referenceStyle prop",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html style colorPalette should render categorical palette by default",
      "location": null,
      "status": "passed",
      "title": "should render categorical palette by default",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html style colorPalette should load diverging red to green when colorPalette is diverging_RtoG",
      "location": null,
      "status": "passed",
      "title": "should load diverging red to green when colorPalette is diverging_RtoG",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html style colorPalette should update to sequential supplement Pink when colorPalette is sequential_suppPink",
      "location": null,
      "status": "passed",
      "title": "should update to sequential supplement Pink when colorPalette is sequential_suppPink",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "style",
        "colors",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html style colors should render colors instead of palette when passed on load",
      "location": null,
      "status": "passed",
      "title": "should render colors instead of palette when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "style",
        "colors",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html style colors should render colors instead of palette when passed on update",
      "location": null,
      "status": "passed",
      "title": "should render colors instead of palette when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<dumbbell-plot>",
        "rendered-html",
        "style",
        "cursor",
      ],
      "failureMessages": Array [],
      "fullName": "<dumbbell-plot> rendered-html style cursor refer to generic interaction results above for cursor tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic interaction results above for cursor tests",
    },
  ],
  "heat-map": Array [
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "class-logic",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> class-logic should build",
      "location": null,
      "status": "passed",
      "title": "should build",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html should build",
      "location": null,
      "status": "passed",
      "title": "should build",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "render",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html render should render with minimal props[data,oridnalAccessor,valueAccessor] given",
      "location": null,
      "status": "passed",
      "title": "should render with minimal props[data,oridnalAccessor,valueAccessor] given",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "render",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html render localization: should render localized with minimal props[data,accessors] given",
      "location": null,
      "status": "passed",
      "title": "localization: should render localized with minimal props[data,accessors] given",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite height: default height on load",
      "location": null,
      "status": "passed",
      "title": "height: default height on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite height: set height on load",
      "location": null,
      "status": "passed",
      "title": "height: set height on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite height: set height on update",
      "location": null,
      "status": "passed",
      "title": "height: set height on update",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite width: default width on load",
      "location": null,
      "status": "passed",
      "title": "width: default width on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite width: set width on load",
      "location": null,
      "status": "passed",
      "title": "width: set width on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite width: set width on update",
      "location": null,
      "status": "passed",
      "title": "width: set width on update",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite mainTitle: default mainTitle on load",
      "location": null,
      "status": "passed",
      "title": "mainTitle: default mainTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite mainTitle: set mainTitle on load",
      "location": null,
      "status": "passed",
      "title": "mainTitle: set mainTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite mainTitle: set mainTitle on update",
      "location": null,
      "status": "passed",
      "title": "mainTitle: set mainTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite subTitle: default subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: default subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite subTitle: set subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: set subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite subTitle: set subTitle on update",
      "location": null,
      "status": "passed",
      "title": "subTitle: set subTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite subTitle: set legend subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: set legend subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite subTitle: set legend subTitle on update",
      "location": null,
      "status": "passed",
      "title": "subTitle: set legend subTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite margin: default margin on load",
      "location": null,
      "status": "passed",
      "title": "margin: default margin on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite margin: custom margin on load",
      "location": null,
      "status": "passed",
      "title": "margin: custom margin on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite margin: custom margin on update",
      "location": null,
      "status": "passed",
      "title": "margin: custom margin on update",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite padding: default padding on load",
      "location": null,
      "status": "passed",
      "title": "padding: default padding on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite padding: custom padding on load",
      "location": null,
      "status": "passed",
      "title": "padding: custom padding on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite padding: custom padding on update",
      "location": null,
      "status": "passed",
      "title": "padding: custom padding on update",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite uniqueID: default uniqueID on load",
      "location": null,
      "status": "passed",
      "title": "uniqueID: default uniqueID on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite uniqueID: custom uniqueID on load",
      "location": null,
      "status": "passed",
      "title": "uniqueID: custom uniqueID on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite uniqueID: custom uniqueID on update",
      "location": null,
      "status": "passed",
      "title": "uniqueID: custom uniqueID on update",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite data: custom data on load",
      "location": null,
      "status": "passed",
      "title": "data: custom data on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite data: custom data enter on update",
      "location": null,
      "status": "passed",
      "title": "data: custom data enter on update",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite data: custom data exit on update",
      "location": null,
      "status": "passed",
      "title": "data: custom data exit on update",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite accessibility: should print accessibility console warnings and logs when accessibility.disableValidation defaults to false",
      "location": null,
      "status": "passed",
      "title": "accessibility: should print accessibility console warnings and logs when accessibility.disableValidation defaults to false",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite accessibility: should not print accessibility console warnings and logs when accessibility.disableValidation set to true",
      "location": null,
      "status": "passed",
      "title": "accessibility: should not print accessibility console warnings and logs when accessibility.disableValidation set to true",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite localization: should print localization console warnings and logs when localization.skipValidation defaults to false",
      "location": null,
      "status": "passed",
      "title": "localization: should print localization console warnings and logs when localization.skipValidation defaults to false",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html generic test suite localization: should not print localization console warnings and logs when localization.skipValidation set to true",
      "location": null,
      "status": "passed",
      "title": "localization: should not print localization console warnings and logs when localization.skipValidation set to true",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: default instruction elements should exist and have screen reader class",
      "location": null,
      "status": "passed",
      "title": "accessibility: default instruction elements should exist and have screen reader class",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: custom instruction elements should exist and have screen reader class on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: custom instruction elements should exist and have screen reader class on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: custom instruction elements should exist and have screen reader class on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: custom instruction elements should exist and have screen reader class on update",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have default html tags",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have default html tags",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have h3+ html tags and headings on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have h3+ html tags and headings on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have div html tags on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have div html tags on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have h4+ html tags and all headings on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have h4+ html tags and all headings on update",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have p html tags on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have p html tags on update",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component renders in default state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component renders in default state",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component shows header in focus state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component shows header in focus state",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component displays table in click state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component displays table in click state",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component displays table in click state with space enabled",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component displays table in click state with space enabled",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: attributes should be added to static geometries on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: attributes should be added to static geometries on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: attributes should be added to geometries on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: attributes should be added to geometries on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: controller div should be created and attributes should be added on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: controller div should be created and attributes should be added on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: controller div should be created and static image attributes should be added on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: controller div should be created and static image attributes should be added on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: focus marker style should be applied on focus",
      "location": null,
      "status": "passed",
      "title": "accessibility: focus marker style should be applied on focus",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: focus group style should be applied on focus",
      "location": null,
      "status": "passed",
      "title": "accessibility: focus group style should be applied on focus",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: test whether space bar performs click action",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: test whether space bar performs click action",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: group - shift+enter will exit group",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: group - shift+enter will exit group",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - right arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - right arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - right arrow goes to first from last",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - right arrow goes to first from last",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - left arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - left arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - left arrow loops to last from first",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - left arrow loops to last from first",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - up arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - up arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - up arrow loops to last",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - up arrow loops to last",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - down arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - down arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - down arrow loops to first",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - down arrow loops to first",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: tooltip should get hidden on ESC key",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: tooltip should get hidden on ESC key",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain xAxis description on load if xAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain xAxis description on load if xAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should not contain xAxis description on load if xAxis is not visible on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should not contain xAxis description on load if xAxis is not visible on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain xAxis description on update if xAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain xAxis description on update if xAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain yAxis description on load if yAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain yAxis description on load if yAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should not contain yAxis description on load if yAxis is not visible on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should not contain yAxis description on load if yAxis is not visible on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain yAxis description on update if yAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain yAxis description on update if yAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are applied by default on load",
      "location": null,
      "status": "pending",
      "title": "accessibility: accessibility textures are applied by default on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are removed on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: accessibility textures are removed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are removed on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: accessibility textures are removed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are applied in default order on load",
      "location": null,
      "status": "pending",
      "title": "accessibility: accessibility textures are applied in default order on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is false by default",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is false by default",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is true when passed on load",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is true when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is true when passed on update",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is true when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite annotations: instruction elements should contain annotation description on load if annotation exists on chart",
      "location": null,
      "status": "passed",
      "title": "annotations: instruction elements should contain annotation description on load if annotation exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite annotations: instruction elements should contain annotation description on update if annotation exists on chart",
      "location": null,
      "status": "passed",
      "title": "annotations: instruction elements should contain annotation description on update if annotation exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite referenceLines: instruction elements should contain reference line description on load if reference line exists on chart",
      "location": null,
      "status": "pending",
      "title": "referenceLines: instruction elements should contain reference line description on load if reference line exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility generic accessibility test suite referenceLines: instruction elements should contain reference line description on update if reference line exists on chart",
      "location": null,
      "status": "pending",
      "title": "referenceLines: instruction elements should contain reference line description on update if reference line exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "accessibility",
        "validation",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html accessibility validation refer to generic results above for accessibility validation tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for accessibility validation tests",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "base",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html base refer to generic results above for base tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for base tests",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "margin & padding",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html margin & padding refer to generic results above for margin & padding tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for margin & padding tests",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "annotations",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html annotations should pass annotation prop",
      "location": null,
      "status": "passed",
      "title": "should pass annotation prop",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "axes",
        "minValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html axes minValueOverride should reset legend and component when min override is passed",
      "location": null,
      "status": "passed",
      "title": "should reset legend and component when min override is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "axes",
        "maxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html axes maxValueOverride should reset legend and component when min override is passed",
      "location": null,
      "status": "passed",
      "title": "should reset legend and component when min override is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "axes",
        "hideAxisPath",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html axes hideAxisPath baseline on xAxis and yAxis should visible by default",
      "location": null,
      "status": "passed",
      "title": "baseline on xAxis and yAxis should visible by default",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "axes",
        "hideAxisPath",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html axes hideAxisPath should flip visibility of baselines on load",
      "location": null,
      "status": "passed",
      "title": "should flip visibility of baselines on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "axes",
        "hideAxisPath",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html axes hideAxisPath should flip opacity of baselines on update",
      "location": null,
      "status": "passed",
      "title": "should flip opacity of baselines on update",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "axes",
        "axis.visible",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html axes axis.visible xAxis and yAxis should be visible by default",
      "location": null,
      "status": "passed",
      "title": "xAxis and yAxis should be visible by default",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "axes",
        "axis.visible",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html axes axis.visible should not render when false is passed",
      "location": null,
      "status": "passed",
      "title": "should not render when false is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "axes",
        "axis.label",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html axes axis.label should place axis label when passed",
      "location": null,
      "status": "passed",
      "title": "should place axis label when passed",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "axes",
        "axis.format",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html axes axis.format xAxis should have default format applied to numbers",
      "location": null,
      "status": "passed",
      "title": "xAxis should have default format applied to numbers",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "axes",
        "axis.format",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html axes axis.format yAxis should have default format applied to numbers",
      "location": null,
      "status": "passed",
      "title": "yAxis should have default format applied to numbers",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "axes",
        "axis.format",
      ],
      "failureMessages": Array [
        "Error: expected textContent \\"$2010\\" to equal \\"2010\\"
    at ./packages/heat-map/src/components/heat-map/heat-map.spec.ts:815:26
    at Array.forEach (<anonymous>)
    at Object.<anonymous> (./packages/heat-map/src/components/heat-map/heat-map.spec.ts:814:22)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)",
      ],
      "fullName": "<heat-map> rendered-html axes axis.format xAxis should have custom format applied to numbers if passed",
      "location": null,
      "status": "failed",
      "title": "xAxis should have custom format applied to numbers if passed",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "axes",
        "axis.format",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html axes axis.format yAxis should have custom format applied to numbers if passed",
      "location": null,
      "status": "passed",
      "title": "yAxis should have custom format applied to numbers if passed",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "axes",
        "axis.tickInterval",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html axes axis.tickInterval should have tick interval one by default",
      "location": null,
      "status": "passed",
      "title": "should have tick interval one by default",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "axes",
        "axis.tickInterval",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html axes axis.tickInterval should have tick interval 2 when passed",
      "location": null,
      "status": "passed",
      "title": "should have tick interval 2 when passed",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "axes",
        "wrapLabel",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html axes wrapLabel should render wrapped ordinal tick labels when wrapLabel is true (default)",
      "location": null,
      "status": "passed",
      "title": "should render wrapped ordinal tick labels when wrapLabel is true (default)",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "axes",
        "wrapLabel",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html axes wrapLabel should render unwrapped ordinal tick labels when wrapLabel is false",
      "location": null,
      "status": "passed",
      "title": "should render unwrapped ordinal tick labels when wrapLabel is false",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "interaction",
        "cell based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html interaction cell based interaction tests [interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "interaction",
        "cell based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html interaction cell based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "interaction",
        "cell based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html interaction cell based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "interaction",
        "cell based interaction tests",
      ],
      "failureMessages": Array [
        "Error: expected attribute radius \\"1\\" to equal \\"2\\"
    at forEach (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:5792:43)
    at Array.forEach (<anonymous>)
    at call (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:5791:44)
    at step (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:66:23)
    at Object.next (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:47:53)
    at fulfilled (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:37:58)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)",
      ],
      "fullName": "<heat-map> rendered-html interaction cell based interaction tests [interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "failed",
      "title": "[interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "interaction",
        "cell based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html interaction cell based interaction tests [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "interaction",
        "cell based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html interaction cell based interaction tests [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "interaction",
        "cell based interaction tests",
      ],
      "failureMessages": Array [
        "Error: expected attribute radius \\"1\\" to equal \\"2\\"
    at forEach (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:6287:43)
    at Array.forEach (<anonymous>)
    at call (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:6286:44)
    at step (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:66:23)
    at Object.next (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:47:53)
    at fulfilled (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:37:58)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)",
      ],
      "fullName": "<heat-map> rendered-html interaction cell based interaction tests [interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "failed",
      "title": "[interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "interaction",
        "cell based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html interaction cell based interaction tests [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "interaction",
        "cell based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html interaction cell based interaction tests [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "cell based events",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html event-emitter generic event testing cell based events [event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
      "location": null,
      "status": "passed",
      "title": "[event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "cell based events",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html event-emitter generic event testing cell based events [event] clickEvent: event object should emit and contain first data record when first mark is clicked",
      "location": null,
      "status": "passed",
      "title": "[event] clickEvent: event object should emit and contain first data record when first mark is clicked",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "cell based events",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html event-emitter generic event testing cell based events [event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
      "location": null,
      "status": "passed",
      "title": "[event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "cell based events",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html event-emitter generic event testing cell based events [event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
      "location": null,
      "status": "passed",
      "title": "[event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "cell based events",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html event-emitter generic event testing cell based events [event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "cell based events",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html event-emitter generic event testing cell based events [event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "cell based events",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html event-emitter generic event testing cell based events [event] drawStartEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] drawStartEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "cell based events",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html event-emitter generic event testing cell based events [event] drawEndEvent: event object should emit and contain uniqueID on update",
      "location": null,
      "status": "passed",
      "title": "[event] drawEndEvent: event object should emit and contain uniqueID on update",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "cell based events",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html event-emitter generic event testing cell based events [event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
      "location": null,
      "status": "passed",
      "title": "[event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "data",
        "uniqueId",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html data uniqueId refer to generic results above for uniqueID tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for uniqueID tests",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "data",
        "data",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html data data refer to generic results above for data tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for data tests",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "data",
        "xKeyOrder",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html data xKeyOrder should render data in order by default",
      "location": null,
      "status": "passed",
      "title": "should render data in order by default",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "data",
        "xKeyOrder",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html data xKeyOrder should render data in order passed on load",
      "location": null,
      "status": "passed",
      "title": "should render data in order passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "data",
        "xKeyOrder",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html data xKeyOrder should render data in order passed on update",
      "location": null,
      "status": "passed",
      "title": "should render data in order passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "data",
        "yKeyOrder",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html data yKeyOrder should render data in order by default",
      "location": null,
      "status": "passed",
      "title": "should render data in order by default",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "data",
        "yKeyOrder",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html data yKeyOrder should render data in order passed on load",
      "location": null,
      "status": "passed",
      "title": "should render data in order passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "data",
        "yKeyOrder",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html data yKeyOrder should render data in order passed on update",
      "location": null,
      "status": "passed",
      "title": "should render data in order passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should render and have opacity 1 and be placed on hover",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 1 and be placed on hover",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should not render when event is triggered and showTooltip is false",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should not render when event is triggered and showTooltip is false",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render default content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render default content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render formatted custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render formatted custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html labels tooltip generic tooltip tests dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html labels tooltip generic tooltip tests dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "labels",
        "dataLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html labels dataLabel visible should render dataLabel by default",
      "location": null,
      "status": "passed",
      "title": "should render dataLabel by default",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "labels",
        "dataLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html labels dataLabel visible should not render the bar data labels if visible is false",
      "location": null,
      "status": "passed",
      "title": "should not render the bar data labels if visible is false",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html labels dataLabel labelAccessor should default to the value accessor if default",
      "location": null,
      "status": "passed",
      "title": "should default to the value accessor if default",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html labels dataLabel labelAccessor should render the random value if label accessor is passed",
      "location": null,
      "status": "passed",
      "title": "should render the random value if label accessor is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "labels",
        "dataLabel",
        "format",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html labels dataLabel format should format number if passed as prop",
      "location": null,
      "status": "passed",
      "title": "should format number if passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "labels",
        "dataLabel",
        "legend",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html labels dataLabel legend visible by default the legend should render due to lack of group accessor",
      "location": null,
      "status": "passed",
      "title": "by default the legend should render due to lack of group accessor",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "labels",
        "dataLabel",
        "legend",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html labels dataLabel legend visible should render, but not be visible if false is passed",
      "location": null,
      "status": "passed",
      "title": "should render, but not be visible if false is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "labels",
        "dataLabel",
        "legend",
        "type",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html labels dataLabel legend type should be default type by default",
      "location": null,
      "status": "passed",
      "title": "should be default type by default",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "labels",
        "dataLabel",
        "legend",
        "type",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html labels dataLabel legend type should be key type if passed",
      "location": null,
      "status": "passed",
      "title": "should be key type if passed",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "labels",
        "dataLabel",
        "legend",
        "format",
      ],
      "failureMessages": Array [
        "Error: expected textContent \\"$15\\" to equal \\"15\\"
    at Object.<anonymous> (./packages/heat-map/src/components/heat-map/heat-map.spec.ts:1560:35)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)",
      ],
      "fullName": "<heat-map> rendered-html labels dataLabel legend format should format number if passed as prop",
      "location": null,
      "status": "failed",
      "title": "should format number if passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "labels",
        "dataLabel",
        "legend",
        "labels",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html labels dataLabel legend labels should be equal to data values by default",
      "location": null,
      "status": "passed",
      "title": "should be equal to data values by default",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "labels",
        "dataLabel",
        "legend",
        "labels",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html labels dataLabel legend labels should have custom labels when passed as prop",
      "location": null,
      "status": "passed",
      "title": "should have custom labels when passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "style no textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html style no textures colorPalette should render sequential supp purple by default",
      "location": null,
      "status": "passed",
      "title": "should render sequential supp purple by default",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "style no textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html style no textures colorPalette should load sequential grey when colorPalette is sequential_grey",
      "location": null,
      "status": "passed",
      "title": "should load sequential grey when colorPalette is sequential_grey",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "style no textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html style no textures colorPalette should update to sequential grey when colorPalette is sequential_grey",
      "location": null,
      "status": "passed",
      "title": "should update to sequential grey when colorPalette is sequential_grey",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "style no textures",
        "colors",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html style no textures colors should render colors instead of palette when passed",
      "location": null,
      "status": "passed",
      "title": "should render colors instead of palette when passed",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "style no textures",
        "cursor",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html style no textures cursor refer to generic interaction results above for cursor tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic interaction results above for cursor tests",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "style no textures",
        "strokeWidth",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html style no textures strokeWidth should render strokeWidth 2 by default",
      "location": null,
      "status": "passed",
      "title": "should render strokeWidth 2 by default",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "style no textures",
        "strokeWidth",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html style no textures strokeWidth should render strokeWidth 5 if passed",
      "location": null,
      "status": "passed",
      "title": "should render strokeWidth 5 if passed",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "style no textures",
        "shape",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html style no textures shape should render rectangle cells by default",
      "location": null,
      "status": "passed",
      "title": "should render rectangle cells by default",
    },
    Object {
      "ancestorTitles": Array [
        "<heat-map>",
        "rendered-html",
        "style no textures",
        "shape",
      ],
      "failureMessages": Array [],
      "fullName": "<heat-map> rendered-html style no textures shape should render circles (rounded rects) if passed",
      "location": null,
      "status": "passed",
      "title": "should render circles (rounded rects) if passed",
    },
  ],
  "line-chart": Array [
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "class-logic",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> class-logic should build",
      "location": null,
      "status": "passed",
      "title": "should build",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html should build",
      "location": null,
      "status": "passed",
      "title": "should build",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "render",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html render should render with minimal props[data,(series,ordinal,value)Accessor] given",
      "location": null,
      "status": "passed",
      "title": "should render with minimal props[data,(series,ordinal,value)Accessor] given",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "render",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html render localization: should render localized with minimal props[data,accessors] given",
      "location": null,
      "status": "passed",
      "title": "localization: should render localized with minimal props[data,accessors] given",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite height: default height on load",
      "location": null,
      "status": "passed",
      "title": "height: default height on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite height: set height on load",
      "location": null,
      "status": "passed",
      "title": "height: set height on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite height: set height on update",
      "location": null,
      "status": "passed",
      "title": "height: set height on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite width: default width on load",
      "location": null,
      "status": "passed",
      "title": "width: default width on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite width: set width on load",
      "location": null,
      "status": "passed",
      "title": "width: set width on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite width: set width on update",
      "location": null,
      "status": "passed",
      "title": "width: set width on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite mainTitle: default mainTitle on load",
      "location": null,
      "status": "passed",
      "title": "mainTitle: default mainTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite mainTitle: set mainTitle on load",
      "location": null,
      "status": "passed",
      "title": "mainTitle: set mainTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite mainTitle: set mainTitle on update",
      "location": null,
      "status": "passed",
      "title": "mainTitle: set mainTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite subTitle: default subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: default subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite subTitle: set subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: set subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite subTitle: set subTitle on update",
      "location": null,
      "status": "passed",
      "title": "subTitle: set subTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite subTitle: set legend subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: set legend subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite subTitle: set legend subTitle on update",
      "location": null,
      "status": "passed",
      "title": "subTitle: set legend subTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite margin: default margin on load",
      "location": null,
      "status": "passed",
      "title": "margin: default margin on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite margin: custom margin on load",
      "location": null,
      "status": "passed",
      "title": "margin: custom margin on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite margin: custom margin on update",
      "location": null,
      "status": "passed",
      "title": "margin: custom margin on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite padding: default padding on load",
      "location": null,
      "status": "passed",
      "title": "padding: default padding on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite padding: custom padding on load",
      "location": null,
      "status": "passed",
      "title": "padding: custom padding on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite padding: custom padding on update",
      "location": null,
      "status": "passed",
      "title": "padding: custom padding on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite uniqueID: default uniqueID on load",
      "location": null,
      "status": "passed",
      "title": "uniqueID: default uniqueID on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite uniqueID: custom uniqueID on load",
      "location": null,
      "status": "passed",
      "title": "uniqueID: custom uniqueID on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite uniqueID: custom uniqueID on update",
      "location": null,
      "status": "passed",
      "title": "uniqueID: custom uniqueID on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite data: custom data on load",
      "location": null,
      "status": "passed",
      "title": "data: custom data on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite data: custom data enter on update",
      "location": null,
      "status": "passed",
      "title": "data: custom data enter on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [
        "Error: [2mexpect([22m[31mreceived[39m[2m).[22mtoContain[2m([22m[32mexpected[39m[2m) // indexOf[22m

Expected substring: [32m\\"exit\\"[39m
Received string:    [31m\\"update\\"[39m
    at forEach (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:5318:52)
    at Array.forEach (<anonymous>)
    at call (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:5311:30)
    at step (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:66:23)
    at Object.next (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:47:53)
    at fulfilled (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:37:58)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)",
      ],
      "fullName": "<line-chart> rendered-html generic test suite data: custom data exit on update",
      "location": null,
      "status": "failed",
      "title": "data: custom data exit on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite accessibility: should print accessibility console warnings and logs when accessibility.disableValidation defaults to false",
      "location": null,
      "status": "passed",
      "title": "accessibility: should print accessibility console warnings and logs when accessibility.disableValidation defaults to false",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite accessibility: should not print accessibility console warnings and logs when accessibility.disableValidation set to true",
      "location": null,
      "status": "passed",
      "title": "accessibility: should not print accessibility console warnings and logs when accessibility.disableValidation set to true",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite localization: should print localization console warnings and logs when localization.skipValidation defaults to false",
      "location": null,
      "status": "passed",
      "title": "localization: should print localization console warnings and logs when localization.skipValidation defaults to false",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html generic test suite localization: should not print localization console warnings and logs when localization.skipValidation set to true",
      "location": null,
      "status": "passed",
      "title": "localization: should not print localization console warnings and logs when localization.skipValidation set to true",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: default instruction elements should exist and have screen reader class",
      "location": null,
      "status": "passed",
      "title": "accessibility: default instruction elements should exist and have screen reader class",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: custom instruction elements should exist and have screen reader class on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: custom instruction elements should exist and have screen reader class on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: custom instruction elements should exist and have screen reader class on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: custom instruction elements should exist and have screen reader class on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have default html tags",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have default html tags",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have h3+ html tags and headings on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have h3+ html tags and headings on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have div html tags on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have div html tags on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have h4+ html tags and all headings on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have h4+ html tags and all headings on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have p html tags on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have p html tags on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component renders in default state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component renders in default state",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component shows header in focus state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component shows header in focus state",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component displays table in click state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component displays table in click state",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component displays table in click state with space enabled",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component displays table in click state with space enabled",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: attributes should be added to static geometries on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: attributes should be added to static geometries on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: attributes should be added to geometries on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: attributes should be added to geometries on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: controller div should be created and attributes should be added on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: controller div should be created and attributes should be added on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: controller div should be created and static image attributes should be added on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: controller div should be created and static image attributes should be added on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: focus marker style should be applied on focus",
      "location": null,
      "status": "pending",
      "title": "accessibility: focus marker style should be applied on focus",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: focus group style should be applied on focus",
      "location": null,
      "status": "passed",
      "title": "accessibility: focus group style should be applied on focus",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: test whether space bar performs click action",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: test whether space bar performs click action",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - right arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - right arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - right arrow goes to first from last",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - right arrow goes to first from last",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - left arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - left arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - left arrow loops to last from first",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - left arrow loops to last from first",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - up arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - up arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - up arrow loops to last",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - up arrow loops to last",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - down arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - down arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - down arrow loops to first",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - down arrow loops to first",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: group - shift+enter will move up to group",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: group - shift+enter will move up to group",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: tooltip should get hidden on ESC key",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: tooltip should get hidden on ESC key",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain xAxis description on load if xAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain xAxis description on load if xAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should not contain xAxis description on load if xAxis is not visible on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should not contain xAxis description on load if xAxis is not visible on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain xAxis description on update if xAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain xAxis description on update if xAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain yAxis description on load if yAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain yAxis description on load if yAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should not contain yAxis description on load if yAxis is not visible on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should not contain yAxis description on load if yAxis is not visible on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain yAxis description on update if yAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain yAxis description on update if yAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are applied by default on load",
      "location": null,
      "status": "pending",
      "title": "accessibility: accessibility textures are applied by default on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are removed on load",
      "location": null,
      "status": "pending",
      "title": "accessibility: accessibility textures are removed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are removed on update",
      "location": null,
      "status": "pending",
      "title": "accessibility: accessibility textures are removed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are applied in default order on load",
      "location": null,
      "status": "pending",
      "title": "accessibility: accessibility textures are applied in default order on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is false by default",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is false by default",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is true when passed on load",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is true when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is true when passed on update",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is true when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite annotations: instruction elements should contain annotation description on load if annotation exists on chart",
      "location": null,
      "status": "passed",
      "title": "annotations: instruction elements should contain annotation description on load if annotation exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite annotations: instruction elements should contain annotation description on update if annotation exists on chart",
      "location": null,
      "status": "passed",
      "title": "annotations: instruction elements should contain annotation description on update if annotation exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite referenceLines: instruction elements should contain reference line description on load if reference line exists on chart",
      "location": null,
      "status": "passed",
      "title": "referenceLines: instruction elements should contain reference line description on load if reference line exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility generic accessibility test suite referenceLines: instruction elements should contain reference line description on update if reference line exists on chart",
      "location": null,
      "status": "passed",
      "title": "referenceLines: instruction elements should contain reference line description on update if reference line exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "accessibility",
        "validation",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html accessibility validation refer to generic results above for accessibility validation tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for accessibility validation tests",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "base",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html base refer to generic results above for base tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for base tests",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "margin & padding",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html margin & padding refer to generic results above for margin & padding tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for margin & padding tests",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "annotations",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html annotations should pass annotation prop on load",
      "location": null,
      "status": "passed",
      "title": "should pass annotation prop on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "annotations",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html annotations should pass annotation prop on update",
      "location": null,
      "status": "passed",
      "title": "should pass annotation prop on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "axes",
        "minValueOverride & maxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html axes minValueOverride & maxValueOverride should set min and max value from data by default",
      "location": null,
      "status": "passed",
      "title": "should set min and max value from data by default",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "axes",
        "minValueOverride & maxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html axes minValueOverride & maxValueOverride should set min value when passed on load",
      "location": null,
      "status": "passed",
      "title": "should set min value when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "axes",
        "minValueOverride & maxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html axes minValueOverride & maxValueOverride should set min value when passed on update",
      "location": null,
      "status": "passed",
      "title": "should set min value when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "axes",
        "minValueOverride & maxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html axes minValueOverride & maxValueOverride should set max value when passed on load",
      "location": null,
      "status": "passed",
      "title": "should set max value when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "axes",
        "minValueOverride & maxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html axes minValueOverride & maxValueOverride should set max value when passed on update",
      "location": null,
      "status": "passed",
      "title": "should set max value when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "axes",
        "showBaselineX",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html axes showBaselineX baseline on xAxis should be visible by default",
      "location": null,
      "status": "passed",
      "title": "baseline on xAxis should be visible by default",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "axes",
        "showBaselineX",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html axes showBaselineX should flip opacity of baseline on load",
      "location": null,
      "status": "passed",
      "title": "should flip opacity of baseline on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "axes",
        "showBaselineX",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html axes showBaselineX should flip opacity of baseline on update",
      "location": null,
      "status": "passed",
      "title": "should flip opacity of baseline on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "axes",
        "axis.visible",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html axes axis.visible xAxis and yAxis should be visible by default",
      "location": null,
      "status": "passed",
      "title": "xAxis and yAxis should be visible by default",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "axes",
        "axis.visible",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html axes axis.visible should not render when false is passed on load",
      "location": null,
      "status": "passed",
      "title": "should not render when false is passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "axes",
        "axis.visible",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html axes axis.visible should not render when false is passed on update",
      "location": null,
      "status": "passed",
      "title": "should not render when false is passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "axes",
        "axis.gridVisible",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html axes axis.gridVisible should render y but not x grids by default",
      "location": null,
      "status": "passed",
      "title": "should render y but not x grids by default",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "axes",
        "axis.gridVisible",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html axes axis.gridVisible should flip render on both x and y grids when passed on load",
      "location": null,
      "status": "passed",
      "title": "should flip render on both x and y grids when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "axes",
        "axis.gridVisible",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html axes axis.gridVisible should flip render on both x and y grids when passed on update",
      "location": null,
      "status": "passed",
      "title": "should flip render on both x and y grids when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "axes",
        "axis.label",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html axes axis.label should place axis label when passed",
      "location": null,
      "status": "passed",
      "title": "should place axis label when passed",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "axes",
        "axis.format",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html axes axis.format yAxis should have default format applied to numbers",
      "location": null,
      "status": "passed",
      "title": "yAxis should have default format applied to numbers",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "axes",
        "axis.format",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html axes axis.format yAxis should have custom format applied to numbers if passed",
      "location": null,
      "status": "passed",
      "title": "yAxis should have custom format applied to numbers if passed",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "axes",
        "axis.tickInterval",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html axes axis.tickInterval x and y axis should have tick interval 2 when passed",
      "location": null,
      "status": "passed",
      "title": "x and y axis should have tick interval 2 when passed",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction marker based interaction tests [interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction marker based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction marker based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction marker based interaction tests [interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction marker based interaction tests [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction marker based interaction tests [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction marker based interaction tests [interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction marker based interaction tests [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction marker based interaction tests [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "line based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction line based interaction tests [interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "line based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction line based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "line based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction line based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "line based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction line based interaction tests [interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "line based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction line based interaction tests [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "line based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction line based interaction tests [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "line based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction line based interaction tests [interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "line based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction line based interaction tests [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "interaction",
        "line based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html interaction line based interaction tests [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html event-emitter generic event testing marker based events [event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
      "location": null,
      "status": "passed",
      "title": "[event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html event-emitter generic event testing marker based events [event] clickEvent: event object should emit and contain first data record when first mark is clicked",
      "location": null,
      "status": "passed",
      "title": "[event] clickEvent: event object should emit and contain first data record when first mark is clicked",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html event-emitter generic event testing marker based events [event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
      "location": null,
      "status": "passed",
      "title": "[event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html event-emitter generic event testing marker based events [event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
      "location": null,
      "status": "passed",
      "title": "[event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html event-emitter generic event testing marker based events [event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html event-emitter generic event testing marker based events [event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html event-emitter generic event testing marker based events [event] drawStartEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] drawStartEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html event-emitter generic event testing marker based events [event] drawEndEvent: event object should emit and contain uniqueID on update",
      "location": null,
      "status": "passed",
      "title": "[event] drawEndEvent: event object should emit and contain uniqueID on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html event-emitter generic event testing marker based events [event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
      "location": null,
      "status": "passed",
      "title": "[event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "data",
        "uniqueId",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html data uniqueId refer to generic results above for uniqueID tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for uniqueID tests",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "data",
        "data",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html data data refer to generic results above for data tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for data tests",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should render and have opacity 1 and be placed on hover",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 1 and be placed on hover",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should not render when event is triggered and showTooltip is false",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should not render when event is triggered and showTooltip is false",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render default content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render default content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render formatted custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render formatted custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels tooltip generic tooltip tests dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels tooltip generic tooltip tests dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels seriesLabel visible should render seriesLabel by default",
      "location": null,
      "status": "passed",
      "title": "should render seriesLabel by default",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels seriesLabel visible should not render seriesLabel when passed on load",
      "location": null,
      "status": "passed",
      "title": "should not render seriesLabel when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels seriesLabel visible should not render seriesLabel when passed on update",
      "location": null,
      "status": "passed",
      "title": "should not render seriesLabel when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels seriesLabel placement should place series labels on right of chart by default",
      "location": null,
      "status": "passed",
      "title": "should place series labels on right of chart by default",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels seriesLabel placement should place series labels on left of chart on load",
      "location": null,
      "status": "passed",
      "title": "should place series labels on left of chart on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels seriesLabel placement should place series labels on left of chart on update",
      "location": null,
      "status": "passed",
      "title": "should place series labels on left of chart on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "label",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels seriesLabel label should use values of seriesAccessor as label by default",
      "location": null,
      "status": "passed",
      "title": "should use values of seriesAccessor as label by default",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "label",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels seriesLabel label should use values of label prop when passed on load",
      "location": null,
      "status": "passed",
      "title": "should use values of label prop when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "label",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels seriesLabel label should use values of label prop when passed on update",
      "location": null,
      "status": "passed",
      "title": "should use values of label prop when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels dataLabel visible should render dataLabel by default",
      "location": null,
      "status": "passed",
      "title": "should render dataLabel by default",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels dataLabel visible should not render the bar data labels if visible is false",
      "location": null,
      "status": "passed",
      "title": "should not render the bar data labels if visible is false",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels dataLabel labelAccessor should default to the value accessor if default",
      "location": null,
      "status": "passed",
      "title": "should default to the value accessor if default",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels dataLabel labelAccessor should render label accessor if passed on load",
      "location": null,
      "status": "passed",
      "title": "should render label accessor if passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels dataLabel labelAccessor should render label accessor if passed on update",
      "location": null,
      "status": "passed",
      "title": "should render label accessor if passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "format",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels dataLabel format should format number if passed as prop",
      "location": null,
      "status": "passed",
      "title": "should format number if passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels dataLabel placement should place labels on top of markers by default",
      "location": null,
      "status": "passed",
      "title": "should place labels on top of markers by default",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels dataLabel placement should place labels on bottom of markers if passed on load",
      "location": null,
      "status": "passed",
      "title": "should place labels on bottom of markers if passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels dataLabel placement should place labels on bottom of markers if passed on update",
      "location": null,
      "status": "passed",
      "title": "should place labels on bottom of markers if passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "legend",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels legend visible by default the legend should render",
      "location": null,
      "status": "passed",
      "title": "by default the legend should render",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "legend",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels legend visible should render, but not be visible if false is passed",
      "location": null,
      "status": "passed",
      "title": "should render, but not be visible if false is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "legend",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels legend visible should render, but not be visible if false is passed on update",
      "location": null,
      "status": "passed",
      "title": "should render, but not be visible if false is passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "legend",
        "type",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels legend type should be key/symbol legend type by default",
      "location": null,
      "status": "passed",
      "title": "should be key/symbol legend type by default",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "legend",
        "type",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels legend type should be key/symbol type even if another type is passed",
      "location": null,
      "status": "passed",
      "title": "should be key/symbol type even if another type is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "legend",
        "interactive",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels legend interactive should not be interactive by deafult",
      "location": null,
      "status": "passed",
      "title": "should not be interactive by deafult",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "legend",
        "interactive",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels legend interactive should be interactive when interactive prop is true on load",
      "location": null,
      "status": "passed",
      "title": "should be interactive when interactive prop is true on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "legend",
        "interactive",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels legend interactive should be interactive when interactive prop is true on update",
      "location": null,
      "status": "passed",
      "title": "should be interactive when interactive prop is true on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "legend",
        "format",
      ],
      "failureMessages": Array [
        "Error: expected textContent \\"$15\\" to equal \\"15\\"
    at Object.<anonymous> (./packages/line-chart/src/components/line-chart/line-chart.spec.tsx:1880:33)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)",
      ],
      "fullName": "<line-chart> rendered-html labels legend format should format number if passed as prop",
      "location": null,
      "status": "failed",
      "title": "should format number if passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "legend",
        "labels",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels legend labels should be equal to data values by default",
      "location": null,
      "status": "passed",
      "title": "should be equal to data values by default",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "labels",
        "legend",
        "labels",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html labels legend labels should have custom labels when passed as prop",
      "location": null,
      "status": "passed",
      "title": "should have custom labels when passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "secondary line",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html secondary line should pass secondaryLines prop",
      "location": null,
      "status": "passed",
      "title": "should pass secondaryLines prop",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "reference line",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html reference line should pass referenceLines prop",
      "location": null,
      "status": "passed",
      "title": "should pass referenceLines prop",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "reference line",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html reference line should pass referenceStyle prop",
      "location": null,
      "status": "passed",
      "title": "should pass referenceStyle prop",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html style colorPalette should render categorical palette by default",
      "location": null,
      "status": "passed",
      "title": "should render categorical palette by default",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html style colorPalette should load single categorical blue when colorPalette is single_categorical_light_blue",
      "location": null,
      "status": "passed",
      "title": "should load single categorical blue when colorPalette is single_categorical_light_blue",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html style colorPalette should update to single categorical blue when colorPalette is single_categorical_light_blue",
      "location": null,
      "status": "passed",
      "title": "should update to single categorical blue when colorPalette is single_categorical_light_blue",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html style colorPalette should render divergingRtoG when colorPalette is diverging_RtoG",
      "location": null,
      "status": "passed",
      "title": "should render divergingRtoG when colorPalette is diverging_RtoG",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html style colorPalette should render diverging_RtoB color when colorPalette is diverging_RtoB",
      "location": null,
      "status": "passed",
      "title": "should render diverging_RtoB color when colorPalette is diverging_RtoB",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "style",
        "colors",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html style colors should render colors instead of palette when passed",
      "location": null,
      "status": "passed",
      "title": "should render colors instead of palette when passed",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "style",
        "cursor",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html style cursor refer to generic interaction results above for cursor tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic interaction results above for cursor tests",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "style",
        "markerStrokes",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html style markerStrokes should render marker strokes by default using single_categorical_light_blue",
      "location": null,
      "status": "passed",
      "title": "should render marker strokes by default using single_categorical_light_blue",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "style",
        "markerStrokes",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html style markerStrokes should not render marker strokes by default using single_categorical_light_blue and passed on load",
      "location": null,
      "status": "passed",
      "title": "should not render marker strokes by default using single_categorical_light_blue and passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "style",
        "markerStrokes",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html style markerStrokes should not render marker strokes by default using single_categorical_light_blue and passed on update",
      "location": null,
      "status": "passed",
      "title": "should not render marker strokes by default using single_categorical_light_blue and passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "style",
        "lineTextures",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html style lineTextures should render line textures by default",
      "location": null,
      "status": "passed",
      "title": "should render line textures by default",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "style",
        "lineTextures",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html style lineTextures should not render line textures when passed on load",
      "location": null,
      "status": "passed",
      "title": "should not render line textures when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "style",
        "lineTextures",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html style lineTextures should not render line textures when passed on update",
      "location": null,
      "status": "passed",
      "title": "should not render line textures when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "style",
        "showDots",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html style showDots should render dots on lines by default",
      "location": null,
      "status": "passed",
      "title": "should render dots on lines by default",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "style",
        "showDots",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html style showDots should not render dots on lines if passed on load",
      "location": null,
      "status": "passed",
      "title": "should not render dots on lines if passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "style",
        "showDots",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html style showDots should not render dots on lines if passed on update",
      "location": null,
      "status": "passed",
      "title": "should not render dots on lines if passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "style",
        "dotRadius",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html style dotRadius should have dot radius of 4 + 1 = 5 on markers by default",
      "location": null,
      "status": "passed",
      "title": "should have dot radius of 4 + 1 = 5 on markers by default",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "style",
        "dotRadius",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html style dotRadius should have dot radius of 7 + 1 = 8 on markers on load",
      "location": null,
      "status": "passed",
      "title": "should have dot radius of 7 + 1 = 8 on markers on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "style",
        "dotRadius",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html style dotRadius should have dot radius of 3 + 1 = 4 on markers on update",
      "location": null,
      "status": "passed",
      "title": "should have dot radius of 3 + 1 = 4 on markers on update",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "style",
        "lineCurve",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html style lineCurve should have lineCurve linear by default",
      "location": null,
      "status": "passed",
      "title": "should have lineCurve linear by default",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "style",
        "lineCurve",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html style lineCurve should have lineCurve step on load",
      "location": null,
      "status": "passed",
      "title": "should have lineCurve step on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "style",
        "lineCurve",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html style lineCurve should have lineCurve catmull-rom on load",
      "location": null,
      "status": "passed",
      "title": "should have lineCurve catmull-rom on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "style",
        "strokeWidth",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html style strokeWidth should have line strokeWidth of 2 by default",
      "location": null,
      "status": "passed",
      "title": "should have line strokeWidth of 2 by default",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "style",
        "strokeWidth",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html style strokeWidth should have line strokeWidth of 5 when passed on load",
      "location": null,
      "status": "passed",
      "title": "should have line strokeWidth of 5 when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<line-chart>",
        "rendered-html",
        "style",
        "strokeWidth",
      ],
      "failureMessages": Array [],
      "fullName": "<line-chart> rendered-html style strokeWidth should have line strokeWidth of 3.5 when passed on update",
      "location": null,
      "status": "passed",
      "title": "should have line strokeWidth of 3.5 when passed on update",
    },
  ],
  "parallel-plot": Array [
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "class-logic",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> class-logic should build",
      "location": null,
      "status": "passed",
      "title": "should build",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html should build",
      "location": null,
      "status": "passed",
      "title": "should build",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "render",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html render should render with minimal props[data,(series,ordinal,value)Accessor] given",
      "location": null,
      "status": "passed",
      "title": "should render with minimal props[data,(series,ordinal,value)Accessor] given",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "render",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html render localization: should render localized with minimal props[data,accessors] given",
      "location": null,
      "status": "passed",
      "title": "localization: should render localized with minimal props[data,accessors] given",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite height: default height on load",
      "location": null,
      "status": "passed",
      "title": "height: default height on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite height: set height on load",
      "location": null,
      "status": "passed",
      "title": "height: set height on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite height: set height on update",
      "location": null,
      "status": "passed",
      "title": "height: set height on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite width: default width on load",
      "location": null,
      "status": "passed",
      "title": "width: default width on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite width: set width on load",
      "location": null,
      "status": "passed",
      "title": "width: set width on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite width: set width on update",
      "location": null,
      "status": "passed",
      "title": "width: set width on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite mainTitle: default mainTitle on load",
      "location": null,
      "status": "passed",
      "title": "mainTitle: default mainTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite mainTitle: set mainTitle on load",
      "location": null,
      "status": "passed",
      "title": "mainTitle: set mainTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite mainTitle: set mainTitle on update",
      "location": null,
      "status": "passed",
      "title": "mainTitle: set mainTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite subTitle: default subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: default subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite subTitle: set subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: set subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite subTitle: set subTitle on update",
      "location": null,
      "status": "passed",
      "title": "subTitle: set subTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite subTitle: set legend subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: set legend subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite subTitle: set legend subTitle on update",
      "location": null,
      "status": "passed",
      "title": "subTitle: set legend subTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite margin: default margin on load",
      "location": null,
      "status": "passed",
      "title": "margin: default margin on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite margin: custom margin on load",
      "location": null,
      "status": "passed",
      "title": "margin: custom margin on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite margin: custom margin on update",
      "location": null,
      "status": "passed",
      "title": "margin: custom margin on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite padding: default padding on load",
      "location": null,
      "status": "passed",
      "title": "padding: default padding on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite padding: custom padding on load",
      "location": null,
      "status": "passed",
      "title": "padding: custom padding on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite padding: custom padding on update",
      "location": null,
      "status": "passed",
      "title": "padding: custom padding on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite uniqueID: default uniqueID on load",
      "location": null,
      "status": "passed",
      "title": "uniqueID: default uniqueID on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite uniqueID: custom uniqueID on load",
      "location": null,
      "status": "passed",
      "title": "uniqueID: custom uniqueID on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite uniqueID: custom uniqueID on update",
      "location": null,
      "status": "passed",
      "title": "uniqueID: custom uniqueID on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite data: custom data on load",
      "location": null,
      "status": "pending",
      "title": "data: custom data on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite data: custom data enter on update",
      "location": null,
      "status": "passed",
      "title": "data: custom data enter on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite data: custom data exit on update",
      "location": null,
      "status": "pending",
      "title": "data: custom data exit on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite accessibility: should print accessibility console warnings and logs when accessibility.disableValidation defaults to false",
      "location": null,
      "status": "passed",
      "title": "accessibility: should print accessibility console warnings and logs when accessibility.disableValidation defaults to false",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite accessibility: should not print accessibility console warnings and logs when accessibility.disableValidation set to true",
      "location": null,
      "status": "passed",
      "title": "accessibility: should not print accessibility console warnings and logs when accessibility.disableValidation set to true",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite localization: should print localization console warnings and logs when localization.skipValidation defaults to false",
      "location": null,
      "status": "passed",
      "title": "localization: should print localization console warnings and logs when localization.skipValidation defaults to false",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html generic test suite localization: should not print localization console warnings and logs when localization.skipValidation set to true",
      "location": null,
      "status": "passed",
      "title": "localization: should not print localization console warnings and logs when localization.skipValidation set to true",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: default instruction elements should exist and have screen reader class",
      "location": null,
      "status": "passed",
      "title": "accessibility: default instruction elements should exist and have screen reader class",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: custom instruction elements should exist and have screen reader class on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: custom instruction elements should exist and have screen reader class on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: custom instruction elements should exist and have screen reader class on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: custom instruction elements should exist and have screen reader class on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have default html tags",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have default html tags",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have h3+ html tags and headings on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have h3+ html tags and headings on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have div html tags on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have div html tags on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have h4+ html tags and all headings on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have h4+ html tags and all headings on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have p html tags on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have p html tags on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component renders in default state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component renders in default state",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component shows header in focus state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component shows header in focus state",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component displays table in click state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component displays table in click state",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component displays table in click state with space enabled",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component displays table in click state with space enabled",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: attributes should be added to static geometries on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: attributes should be added to static geometries on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: attributes should be added to geometries on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: attributes should be added to geometries on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: controller div should be created and attributes should be added on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: controller div should be created and attributes should be added on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: controller div should be created and static image attributes should be added on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: controller div should be created and static image attributes should be added on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: focus marker style should be applied on focus",
      "location": null,
      "status": "pending",
      "title": "accessibility: focus marker style should be applied on focus",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: focus group style should be applied on focus",
      "location": null,
      "status": "passed",
      "title": "accessibility: focus group style should be applied on focus",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: test whether space bar performs click action",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: test whether space bar performs click action",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - right arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - right arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - right arrow goes to first from last",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - right arrow goes to first from last",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - left arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - left arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - left arrow loops to last from first",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - left arrow loops to last from first",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - up arrow loops to last",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - up arrow loops to last",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - down arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - down arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - down arrow loops to first",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - down arrow loops to first",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: group - shift+enter will move up to group",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: group - shift+enter will move up to group",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: tooltip should get hidden on ESC key",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: tooltip should get hidden on ESC key",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain xAxis description on load if xAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain xAxis description on load if xAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should not contain xAxis description on load if xAxis is not visible on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should not contain xAxis description on load if xAxis is not visible on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain xAxis description on update if xAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain xAxis description on update if xAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [
        "TypeError: Cannot read properties of undefined (reading 'textContent')
    at call (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:2045:51)
    at step (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:66:23)
    at Object.next (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:47:53)
    at fulfilled (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:37:58)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)",
      ],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain yAxis description on load if yAxis exists on chart",
      "location": null,
      "status": "failed",
      "title": "accessibility: instruction elements should contain yAxis description on load if yAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should not contain yAxis description on load if yAxis is not visible on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should not contain yAxis description on load if yAxis is not visible on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain yAxis description on update if yAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain yAxis description on update if yAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are applied by default on load",
      "location": null,
      "status": "pending",
      "title": "accessibility: accessibility textures are applied by default on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are removed on load",
      "location": null,
      "status": "pending",
      "title": "accessibility: accessibility textures are removed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are removed on update",
      "location": null,
      "status": "pending",
      "title": "accessibility: accessibility textures are removed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are applied in default order on load",
      "location": null,
      "status": "pending",
      "title": "accessibility: accessibility textures are applied in default order on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is false by default",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is false by default",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is true when passed on load",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is true when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is true when passed on update",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is true when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite annotations: instruction elements should contain annotation description on load if annotation exists on chart",
      "location": null,
      "status": "passed",
      "title": "annotations: instruction elements should contain annotation description on load if annotation exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite annotations: instruction elements should contain annotation description on update if annotation exists on chart",
      "location": null,
      "status": "passed",
      "title": "annotations: instruction elements should contain annotation description on update if annotation exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite referenceLines: instruction elements should contain reference line description on load if reference line exists on chart",
      "location": null,
      "status": "pending",
      "title": "referenceLines: instruction elements should contain reference line description on load if reference line exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility generic accessibility test suite referenceLines: instruction elements should contain reference line description on update if reference line exists on chart",
      "location": null,
      "status": "pending",
      "title": "referenceLines: instruction elements should contain reference line description on update if reference line exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "accessibility",
        "validation",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html accessibility validation refer to generic results above for accessibility validation tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for accessibility validation tests",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "base",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html base refer to generic results above for base tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for base tests",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "margin & padding",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html margin & padding refer to generic results above for margin & padding tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for margin & padding tests",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "annotations",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html annotations should pass annotation prop on load",
      "location": null,
      "status": "passed",
      "title": "should pass annotation prop on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "annotations",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html annotations should pass annotation prop on update",
      "location": null,
      "status": "passed",
      "title": "should pass annotation prop on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "axes",
        "minValueOverride & maxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html axes minValueOverride & maxValueOverride should set min and max value from data by default",
      "location": null,
      "status": "pending",
      "title": "should set min and max value from data by default",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "axes",
        "minValueOverride & maxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html axes minValueOverride & maxValueOverride should set min value when passed on load",
      "location": null,
      "status": "pending",
      "title": "should set min value when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "axes",
        "minValueOverride & maxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html axes minValueOverride & maxValueOverride should set min value when passed on update",
      "location": null,
      "status": "pending",
      "title": "should set min value when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "axes",
        "minValueOverride & maxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html axes minValueOverride & maxValueOverride should set max value when passed on load",
      "location": null,
      "status": "pending",
      "title": "should set max value when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "axes",
        "minValueOverride & maxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html axes minValueOverride & maxValueOverride should set max value when passed on update",
      "location": null,
      "status": "pending",
      "title": "should set max value when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "axes",
        "showBaselineX",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html axes showBaselineX baseline on xAxis should not be visible by default",
      "location": null,
      "status": "passed",
      "title": "baseline on xAxis should not be visible by default",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "axes",
        "showBaselineX",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html axes showBaselineX should flip opacity of baseline on load",
      "location": null,
      "status": "passed",
      "title": "should flip opacity of baseline on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "axes",
        "showBaselineX",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html axes showBaselineX should flip opacity of baseline on update",
      "location": null,
      "status": "passed",
      "title": "should flip opacity of baseline on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "axes",
        "axis.visible",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html axes axis.visible xAxis and yAxis should be visible by default",
      "location": null,
      "status": "passed",
      "title": "xAxis and yAxis should be visible by default",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "axes",
        "axis.visible",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html axes axis.visible should not render when false is passed on load",
      "location": null,
      "status": "passed",
      "title": "should not render when false is passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "axes",
        "axis.visible",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html axes axis.visible should not render when false is passed on update",
      "location": null,
      "status": "passed",
      "title": "should not render when false is passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "axes",
        "axis.gridVisible",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html axes axis.gridVisible should render x and y grids by default",
      "location": null,
      "status": "passed",
      "title": "should render x and y grids by default",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "axes",
        "axis.gridVisible",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html axes axis.gridVisible should flip render on y but not x grids when passed on load",
      "location": null,
      "status": "passed",
      "title": "should flip render on y but not x grids when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "axes",
        "axis.gridVisible",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html axes axis.gridVisible should flip render on both y but not x grids when passed on update",
      "location": null,
      "status": "passed",
      "title": "should flip render on both y but not x grids when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "axes",
        "axis.label",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html axes axis.label should place axis label when passed",
      "location": null,
      "status": "passed",
      "title": "should place axis label when passed",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "axes",
        "axis.format",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html axes axis.format yAxis should have default format applied to numbers",
      "location": null,
      "status": "passed",
      "title": "yAxis should have default format applied to numbers",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "axes",
        "axis.format",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html axes axis.format yAxis should have custom format applied to numbers if passed",
      "location": null,
      "status": "passed",
      "title": "yAxis should have custom format applied to numbers if passed",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "axes",
        "axis.tickInterval",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html axes axis.tickInterval x and y axis should have tick interval 2 when passed",
      "location": null,
      "status": "passed",
      "title": "x and y axis should have tick interval 2 when passed",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction marker based interaction tests [interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction marker based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction marker based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction marker based interaction tests [interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction marker based interaction tests [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction marker based interaction tests [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction marker based interaction tests [interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction marker based interaction tests [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction marker based interaction tests [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "line based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction line based interaction tests [interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "line based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction line based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "line based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction line based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "line based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction line based interaction tests [interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "line based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction line based interaction tests [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "line based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction line based interaction tests [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "line based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction line based interaction tests [interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "line based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction line based interaction tests [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "interaction",
        "line based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html interaction line based interaction tests [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html event-emitter generic event testing marker based events [event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
      "location": null,
      "status": "passed",
      "title": "[event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html event-emitter generic event testing marker based events [event] clickEvent: event object should emit and contain first data record when first mark is clicked",
      "location": null,
      "status": "passed",
      "title": "[event] clickEvent: event object should emit and contain first data record when first mark is clicked",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html event-emitter generic event testing marker based events [event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
      "location": null,
      "status": "passed",
      "title": "[event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html event-emitter generic event testing marker based events [event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
      "location": null,
      "status": "passed",
      "title": "[event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html event-emitter generic event testing marker based events [event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html event-emitter generic event testing marker based events [event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html event-emitter generic event testing marker based events [event] drawStartEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] drawStartEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html event-emitter generic event testing marker based events [event] drawEndEvent: event object should emit and contain uniqueID on update",
      "location": null,
      "status": "passed",
      "title": "[event] drawEndEvent: event object should emit and contain uniqueID on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html event-emitter generic event testing marker based events [event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
      "location": null,
      "status": "passed",
      "title": "[event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "data",
        "uniqueId",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html data uniqueId refer to generic results above for uniqueID tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for uniqueID tests",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "data",
        "data",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html data data refer to generic results above for data tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for data tests",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should render and have opacity 1 and be placed on hover",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 1 and be placed on hover",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should not render when event is triggered and showTooltip is false",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should not render when event is triggered and showTooltip is false",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render default content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render default content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render formatted custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render formatted custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels tooltip generic tooltip tests dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels tooltip generic tooltip tests dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels seriesLabel visible should render seriesLabel by default",
      "location": null,
      "status": "passed",
      "title": "should render seriesLabel by default",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels seriesLabel visible should not render seriesLabel when passed on load",
      "location": null,
      "status": "passed",
      "title": "should not render seriesLabel when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels seriesLabel visible should not render seriesLabel when passed on update",
      "location": null,
      "status": "passed",
      "title": "should not render seriesLabel when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels seriesLabel placement should place series labels on right of chart by default",
      "location": null,
      "status": "passed",
      "title": "should place series labels on right of chart by default",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels seriesLabel placement should place series labels on left of chart on load",
      "location": null,
      "status": "passed",
      "title": "should place series labels on left of chart on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels seriesLabel placement should place series labels on left of chart on update",
      "location": null,
      "status": "passed",
      "title": "should place series labels on left of chart on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "label",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels seriesLabel label should use values of seriesAccessor as label by default",
      "location": null,
      "status": "passed",
      "title": "should use values of seriesAccessor as label by default",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "label",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels seriesLabel label should use values of label prop when passed on load",
      "location": null,
      "status": "passed",
      "title": "should use values of label prop when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "seriesLabel",
        "label",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels seriesLabel label should use values of label prop when passed on update",
      "location": null,
      "status": "passed",
      "title": "should use values of label prop when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels dataLabel visible should render dataLabel by default",
      "location": null,
      "status": "passed",
      "title": "should render dataLabel by default",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels dataLabel visible should not render the bar data labels if visible is false",
      "location": null,
      "status": "passed",
      "title": "should not render the bar data labels if visible is false",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels dataLabel labelAccessor should default to the value accessor if default",
      "location": null,
      "status": "passed",
      "title": "should default to the value accessor if default",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels dataLabel labelAccessor should render label accessor if passed on load",
      "location": null,
      "status": "passed",
      "title": "should render label accessor if passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels dataLabel labelAccessor should render label accessor if passed on update",
      "location": null,
      "status": "passed",
      "title": "should render label accessor if passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "format",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels dataLabel format should format number if passed as prop",
      "location": null,
      "status": "passed",
      "title": "should format number if passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels dataLabel placement should place labels on bottom-right of markers by default",
      "location": null,
      "status": "passed",
      "title": "should place labels on bottom-right of markers by default",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels dataLabel placement should place labels on top-left of markers if passed on load",
      "location": null,
      "status": "passed",
      "title": "should place labels on top-left of markers if passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels dataLabel placement should place labels on bottom of markers if passed on update",
      "location": null,
      "status": "passed",
      "title": "should place labels on bottom of markers if passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "legend",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels legend visible by default the legend should not render",
      "location": null,
      "status": "passed",
      "title": "by default the legend should not render",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "legend",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels legend visible should render, and be visible if true is passed",
      "location": null,
      "status": "passed",
      "title": "should render, and be visible if true is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "legend",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels legend visible should render, and be visible if true is passed on update",
      "location": null,
      "status": "passed",
      "title": "should render, and be visible if true is passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "legend",
        "type",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels legend type should be key/symbol legend type by default",
      "location": null,
      "status": "passed",
      "title": "should be key/symbol legend type by default",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "legend",
        "type",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels legend type should be key/symbol type even if another type is passed",
      "location": null,
      "status": "passed",
      "title": "should be key/symbol type even if another type is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "legend",
        "interactive",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels legend interactive should not be interactive by deafult",
      "location": null,
      "status": "passed",
      "title": "should not be interactive by deafult",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "legend",
        "interactive",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels legend interactive should be interactive when interactive prop is true on load",
      "location": null,
      "status": "passed",
      "title": "should be interactive when interactive prop is true on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "legend",
        "interactive",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels legend interactive should be interactive when interactive prop is true on update",
      "location": null,
      "status": "passed",
      "title": "should be interactive when interactive prop is true on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "legend",
        "format",
      ],
      "failureMessages": Array [
        "Error: expected textContent \\"$15\\" to equal \\"15\\"
    at Object.<anonymous> (./packages/parallel-plot/src/components/parallel-plot/parallel-plot.spec.ts:1867:33)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)",
      ],
      "fullName": "<parallel-plot> rendered-html labels legend format should format number if passed as prop",
      "location": null,
      "status": "failed",
      "title": "should format number if passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "legend",
        "labels",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels legend labels should be equal to data values by default",
      "location": null,
      "status": "passed",
      "title": "should be equal to data values by default",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "labels",
        "legend",
        "labels",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html labels legend labels should have custom labels when passed as prop",
      "location": null,
      "status": "passed",
      "title": "should have custom labels when passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "secondary line",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html secondary line should pass secondaryLines prop",
      "location": null,
      "status": "passed",
      "title": "should pass secondaryLines prop",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html style colorPalette should render categorical palette by default",
      "location": null,
      "status": "passed",
      "title": "should render categorical palette by default",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html style colorPalette should load single categorical blue when colorPalette is single_categorical_light_blue",
      "location": null,
      "status": "passed",
      "title": "should load single categorical blue when colorPalette is single_categorical_light_blue",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html style colorPalette should update to single categorical blue when colorPalette is single_categorical_light_blue",
      "location": null,
      "status": "passed",
      "title": "should update to single categorical blue when colorPalette is single_categorical_light_blue",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html style colorPalette should render divergingRtoG when colorPalette is diverging_RtoG",
      "location": null,
      "status": "passed",
      "title": "should render divergingRtoG when colorPalette is diverging_RtoG",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html style colorPalette should render diverging_RtoB color when colorPalette is diverging_RtoB",
      "location": null,
      "status": "passed",
      "title": "should render diverging_RtoB color when colorPalette is diverging_RtoB",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "style",
        "colors",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html style colors should render colors instead of palette when passed",
      "location": null,
      "status": "passed",
      "title": "should render colors instead of palette when passed",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "style",
        "cursor",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html style cursor refer to generic interaction results above for cursor tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic interaction results above for cursor tests",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "style",
        "markerStrokes",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html style markerStrokes should render marker strokes by default using single_categorical_light_blue",
      "location": null,
      "status": "passed",
      "title": "should render marker strokes by default using single_categorical_light_blue",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "style",
        "markerStrokes",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html style markerStrokes should not render marker strokes by default using single_categorical_light_blue and passed on load",
      "location": null,
      "status": "passed",
      "title": "should not render marker strokes by default using single_categorical_light_blue and passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "style",
        "markerStrokes",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html style markerStrokes should not render marker strokes by default using single_categorical_light_blue and passed on update",
      "location": null,
      "status": "passed",
      "title": "should not render marker strokes by default using single_categorical_light_blue and passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "style",
        "lineTextures",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html style lineTextures should render line textures by default",
      "location": null,
      "status": "passed",
      "title": "should render line textures by default",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "style",
        "lineTextures",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html style lineTextures should not render line textures when passed on load",
      "location": null,
      "status": "passed",
      "title": "should not render line textures when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "style",
        "lineTextures",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html style lineTextures should not render line textures when passed on update",
      "location": null,
      "status": "passed",
      "title": "should not render line textures when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "style",
        "showDots",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html style showDots should render dots on lines by default",
      "location": null,
      "status": "passed",
      "title": "should render dots on lines by default",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "style",
        "showDots",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html style showDots should not render dots on lines if passed on load",
      "location": null,
      "status": "passed",
      "title": "should not render dots on lines if passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "style",
        "showDots",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html style showDots should not render dots on lines if passed on update",
      "location": null,
      "status": "passed",
      "title": "should not render dots on lines if passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "style",
        "dotRadius",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html style dotRadius should have dot radius of 4 + 0.5 = 4.5 on markers by default",
      "location": null,
      "status": "passed",
      "title": "should have dot radius of 4 + 0.5 = 4.5 on markers by default",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "style",
        "dotRadius",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html style dotRadius should have dot radius of 7 + 0.5 = 7.5 on markers on load",
      "location": null,
      "status": "passed",
      "title": "should have dot radius of 7 + 0.5 = 7.5 on markers on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "style",
        "dotRadius",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html style dotRadius should have dot radius of 3 + 0.5 = 3.5 on markers on update",
      "location": null,
      "status": "passed",
      "title": "should have dot radius of 3 + 0.5 = 3.5 on markers on update",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "style",
        "lineCurve",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html style lineCurve should have lineCurve linear by default",
      "location": null,
      "status": "passed",
      "title": "should have lineCurve linear by default",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "style",
        "lineCurve",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html style lineCurve should have lineCurve bumpX on load",
      "location": null,
      "status": "passed",
      "title": "should have lineCurve bumpX on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "style",
        "lineCurve",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html style lineCurve should have lineCurve catmull-rom on load",
      "location": null,
      "status": "passed",
      "title": "should have lineCurve catmull-rom on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "style",
        "strokeWidth",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html style strokeWidth should have line strokeWidth of 1 by default",
      "location": null,
      "status": "passed",
      "title": "should have line strokeWidth of 1 by default",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "style",
        "strokeWidth",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html style strokeWidth should have line strokeWidth of 5 when passed on load",
      "location": null,
      "status": "passed",
      "title": "should have line strokeWidth of 5 when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<parallel-plot>",
        "rendered-html",
        "style",
        "strokeWidth",
      ],
      "failureMessages": Array [],
      "fullName": "<parallel-plot> rendered-html style strokeWidth should have line strokeWidth of 3.5 when passed on update",
      "location": null,
      "status": "passed",
      "title": "should have line strokeWidth of 3.5 when passed on update",
    },
  ],
  "pie-chart": Array [
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "class-logic",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> class-logic should build",
      "location": null,
      "status": "passed",
      "title": "should build",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html should build",
      "location": null,
      "status": "passed",
      "title": "should build",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "render",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html render should render with minimal props[data,oridnalAccessor,valueAccessor] given",
      "location": null,
      "status": "passed",
      "title": "should render with minimal props[data,oridnalAccessor,valueAccessor] given",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "render",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html render localization: should render localized with minimal props[data,accessors] given",
      "location": null,
      "status": "passed",
      "title": "localization: should render localized with minimal props[data,accessors] given",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite height: default height on load",
      "location": null,
      "status": "passed",
      "title": "height: default height on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite height: set height on load",
      "location": null,
      "status": "passed",
      "title": "height: set height on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite height: set height on update",
      "location": null,
      "status": "passed",
      "title": "height: set height on update",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite width: default width on load",
      "location": null,
      "status": "passed",
      "title": "width: default width on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite width: set width on load",
      "location": null,
      "status": "passed",
      "title": "width: set width on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite width: set width on update",
      "location": null,
      "status": "passed",
      "title": "width: set width on update",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite mainTitle: default mainTitle on load",
      "location": null,
      "status": "passed",
      "title": "mainTitle: default mainTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite mainTitle: set mainTitle on load",
      "location": null,
      "status": "passed",
      "title": "mainTitle: set mainTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite mainTitle: set mainTitle on update",
      "location": null,
      "status": "passed",
      "title": "mainTitle: set mainTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite subTitle: default subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: default subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite subTitle: set subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: set subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite subTitle: set subTitle on update",
      "location": null,
      "status": "passed",
      "title": "subTitle: set subTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite subTitle: set legend subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: set legend subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite subTitle: set legend subTitle on update",
      "location": null,
      "status": "passed",
      "title": "subTitle: set legend subTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite margin: default margin on load",
      "location": null,
      "status": "passed",
      "title": "margin: default margin on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite margin: custom margin on load",
      "location": null,
      "status": "passed",
      "title": "margin: custom margin on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite margin: custom margin on update",
      "location": null,
      "status": "passed",
      "title": "margin: custom margin on update",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite padding: default padding on load",
      "location": null,
      "status": "passed",
      "title": "padding: default padding on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite padding: custom padding on load",
      "location": null,
      "status": "passed",
      "title": "padding: custom padding on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite padding: custom padding on update",
      "location": null,
      "status": "passed",
      "title": "padding: custom padding on update",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite uniqueID: default uniqueID on load",
      "location": null,
      "status": "passed",
      "title": "uniqueID: default uniqueID on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite uniqueID: custom uniqueID on load",
      "location": null,
      "status": "passed",
      "title": "uniqueID: custom uniqueID on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite uniqueID: custom uniqueID on update",
      "location": null,
      "status": "passed",
      "title": "uniqueID: custom uniqueID on update",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite accessibility: should print accessibility console warnings and logs when accessibility.disableValidation defaults to false",
      "location": null,
      "status": "passed",
      "title": "accessibility: should print accessibility console warnings and logs when accessibility.disableValidation defaults to false",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite accessibility: should not print accessibility console warnings and logs when accessibility.disableValidation set to true",
      "location": null,
      "status": "passed",
      "title": "accessibility: should not print accessibility console warnings and logs when accessibility.disableValidation set to true",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite localization: should print localization console warnings and logs when localization.skipValidation defaults to false",
      "location": null,
      "status": "passed",
      "title": "localization: should print localization console warnings and logs when localization.skipValidation defaults to false",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite localization: should not print localization console warnings and logs when localization.skipValidation set to true",
      "location": null,
      "status": "passed",
      "title": "localization: should not print localization console warnings and logs when localization.skipValidation set to true",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite data: custom data on load",
      "location": null,
      "status": "passed",
      "title": "data: custom data on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite data: custom data enter on update",
      "location": null,
      "status": "passed",
      "title": "data: custom data enter on update",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html generic test suite data: custom data exit on update",
      "location": null,
      "status": "passed",
      "title": "data: custom data exit on update",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: default instruction elements should exist and have screen reader class",
      "location": null,
      "status": "passed",
      "title": "accessibility: default instruction elements should exist and have screen reader class",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: custom instruction elements should exist and have screen reader class on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: custom instruction elements should exist and have screen reader class on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: custom instruction elements should exist and have screen reader class on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: custom instruction elements should exist and have screen reader class on update",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have default html tags",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have default html tags",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have h3+ html tags and headings on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have h3+ html tags and headings on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have div html tags on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have div html tags on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have h4+ html tags and all headings on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have h4+ html tags and all headings on update",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have p html tags on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have p html tags on update",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component renders in default state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component renders in default state",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component shows header in focus state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component shows header in focus state",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component displays table in click state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component displays table in click state",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component displays table in click state with space enabled",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component displays table in click state with space enabled",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: attributes should be added to static geometries on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: attributes should be added to static geometries on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: attributes should be added to geometries on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: attributes should be added to geometries on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: controller div should be created and attributes should be added on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: controller div should be created and attributes should be added on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: controller div should be created and static image attributes should be added on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: controller div should be created and static image attributes should be added on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [
        "Error: [2mexpect([22m[31mreceived[39m[2m).[22mtoEqual[2m([22m[32mexpected[39m[2m) // deep equality[22m

Expected: [32m\\"[7m2[27mpx\\"[39m
Received: [31m\\"[7m14[27mpx\\"[39m
    at call (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:1534:88)
    at step (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:66:23)
    at Object.next (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:47:53)
    at fulfilled (./packages/utils-dev/dist/visa-charts-utils-dev.cjs.js:37:58)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)",
      ],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: focus marker style should be applied on focus",
      "location": null,
      "status": "failed",
      "title": "accessibility: focus marker style should be applied on focus",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: focus group style should be applied on focus",
      "location": null,
      "status": "passed",
      "title": "accessibility: focus group style should be applied on focus",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: test whether space bar performs click action",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: test whether space bar performs click action",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: group - shift+enter will exit group",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: group - shift+enter will exit group",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - right arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - right arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - right arrow goes to first from last",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - right arrow goes to first from last",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - left arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - left arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - left arrow loops to last from first",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - left arrow loops to last from first",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: tooltip should get hidden on ESC key",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: tooltip should get hidden on ESC key",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain xAxis description on load if xAxis exists on chart",
      "location": null,
      "status": "pending",
      "title": "accessibility: instruction elements should contain xAxis description on load if xAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should not contain xAxis description on load if xAxis is not visible on chart",
      "location": null,
      "status": "pending",
      "title": "accessibility: instruction elements should not contain xAxis description on load if xAxis is not visible on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain xAxis description on update if xAxis exists on chart",
      "location": null,
      "status": "pending",
      "title": "accessibility: instruction elements should contain xAxis description on update if xAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain yAxis description on load if yAxis exists on chart",
      "location": null,
      "status": "pending",
      "title": "accessibility: instruction elements should contain yAxis description on load if yAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should not contain yAxis description on load if yAxis is not visible on chart",
      "location": null,
      "status": "pending",
      "title": "accessibility: instruction elements should not contain yAxis description on load if yAxis is not visible on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain yAxis description on update if yAxis exists on chart",
      "location": null,
      "status": "pending",
      "title": "accessibility: instruction elements should contain yAxis description on update if yAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: textures are applied by default on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: textures are applied by default on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: textures are removed on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: textures are removed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are removed on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: accessibility textures are removed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are applied in default order on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: accessibility textures are applied in default order on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is false by default",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is false by default",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is true when passed on load",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is true when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is true when passed on update",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is true when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite annotations: instruction elements should contain annotation description on load if annotation exists on chart",
      "location": null,
      "status": "passed",
      "title": "annotations: instruction elements should contain annotation description on load if annotation exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite annotations: instruction elements should contain annotation description on update if annotation exists on chart",
      "location": null,
      "status": "passed",
      "title": "annotations: instruction elements should contain annotation description on update if annotation exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite referenceLines: instruction elements should contain reference line description on load if reference line exists on chart",
      "location": null,
      "status": "pending",
      "title": "referenceLines: instruction elements should contain reference line description on load if reference line exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility generic accessibility test suite referenceLines: instruction elements should contain reference line description on update if reference line exists on chart",
      "location": null,
      "status": "pending",
      "title": "referenceLines: instruction elements should contain reference line description on update if reference line exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "accessibility",
        "validation",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html accessibility validation refer to generic results above for accessibility validation tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for accessibility validation tests",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "base",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html base refer to generic results above for base tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for base tests",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "margin & padding",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html margin & padding refer to generic results above for margin & padding tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for margin & padding tests",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "annotations",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html annotations should pass annotation prop on load",
      "location": null,
      "status": "passed",
      "title": "should pass annotation prop on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "annotations",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html annotations should pass annotation prop on update",
      "location": null,
      "status": "passed",
      "title": "should pass annotation prop on update",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "interaction",
        "pie based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html interaction pie based interaction tests [interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "interaction",
        "pie based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html interaction pie based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "interaction",
        "pie based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html interaction pie based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "interaction",
        "pie based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html interaction pie based interaction tests [interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "interaction",
        "pie based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html interaction pie based interaction tests [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "interaction",
        "pie based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html interaction pie based interaction tests [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "interaction",
        "pie based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html interaction pie based interaction tests [interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "interaction",
        "pie based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html interaction pie based interaction tests [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "interaction",
        "pie based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html interaction pie based interaction tests [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "pie based events",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html event-emitter generic event testing pie based events [event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
      "location": null,
      "status": "passed",
      "title": "[event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "pie based events",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html event-emitter generic event testing pie based events [event] clickEvent: event object should emit and contain first data record when first mark is clicked",
      "location": null,
      "status": "passed",
      "title": "[event] clickEvent: event object should emit and contain first data record when first mark is clicked",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "pie based events",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html event-emitter generic event testing pie based events [event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
      "location": null,
      "status": "passed",
      "title": "[event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "pie based events",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html event-emitter generic event testing pie based events [event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
      "location": null,
      "status": "passed",
      "title": "[event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "pie based events",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html event-emitter generic event testing pie based events [event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "pie based events",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html event-emitter generic event testing pie based events [event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "pie based events",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html event-emitter generic event testing pie based events [event] drawStartEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] drawStartEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "pie based events",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html event-emitter generic event testing pie based events [event] drawEndEvent: event object should emit and contain uniqueID on update",
      "location": null,
      "status": "passed",
      "title": "[event] drawEndEvent: event object should emit and contain uniqueID on update",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "pie based events",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html event-emitter generic event testing pie based events [event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
      "location": null,
      "status": "passed",
      "title": "[event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "data",
        "uniqueId",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html data uniqueId refer to generic results above for uniqueID tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for uniqueID tests",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "data",
        "data",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html data data refer to generic results above for data tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for data tests",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "data",
        "sort",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html data sort should render data in ascending order by default",
      "location": null,
      "status": "passed",
      "title": "should render data in ascending order by default",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "data",
        "sort",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html data sort should render data in descending order when sortOrder is desc",
      "location": null,
      "status": "passed",
      "title": "should render data in descending order when sortOrder is desc",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "data",
        "sort",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html data sort should render data in default order when sortOrder is default",
      "location": null,
      "status": "passed",
      "title": "should render data in default order when sortOrder is default",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should render and have opacity 1 and be placed on hover",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 1 and be placed on hover",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should not render when event is triggered and showTooltip is false",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should not render when event is triggered and showTooltip is false",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render default content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render default content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render formatted custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render formatted custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html labels tooltip generic tooltip tests dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html labels tooltip generic tooltip tests dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html labels dataLabel visible should render dataLabel and dataLabel-note by default",
      "location": null,
      "status": "passed",
      "title": "should render dataLabel and dataLabel-note by default",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html labels dataLabel visible should not render the pie data and note labels if visible is false",
      "location": null,
      "status": "passed",
      "title": "should not render the pie data and note labels if visible is false",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html labels dataLabel labelAccessor should default to the value accessor percentage if default",
      "location": null,
      "status": "passed",
      "title": "should default to the value accessor percentage if default",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html labels dataLabel labelAccessor should default to the value accessor if showPercentage false",
      "location": null,
      "status": "passed",
      "title": "should default to the value accessor if showPercentage false",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "format",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html labels dataLabel format should format number if passed as prop",
      "location": null,
      "status": "passed",
      "title": "should format number if passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html labels dataLabel placement should place labels outside center of arc by default",
      "location": null,
      "status": "passed",
      "title": "should place labels outside center of arc by default",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html labels dataLabel placement should place labels on inside of pie arcs if passed",
      "location": null,
      "status": "passed",
      "title": "should place labels on inside of pie arcs if passed",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html labels dataLabel placement should place labels on edge of pie arcs if passed",
      "location": null,
      "status": "passed",
      "title": "should place labels on edge of pie arcs if passed",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelOffset",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html labels dataLabel labelOffset should place labels outside center of arc with different offset if passed",
      "location": null,
      "status": "passed",
      "title": "should place labels outside center of arc with different offset if passed",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "reference line",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html reference line should pass referenceLines prop",
      "location": null,
      "status": "passed",
      "title": "should pass referenceLines prop",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "reference line",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html reference line should pass referenceStyle prop",
      "location": null,
      "status": "passed",
      "title": "should pass referenceStyle prop",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "style with textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html style with textures colorPalette should render texture sequential purple by default",
      "location": null,
      "status": "passed",
      "title": "should render texture sequential purple by default",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "style with textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html style with textures colorPalette should load texture single supplement Pink when colorPalette is single_suppPink",
      "location": null,
      "status": "passed",
      "title": "should load texture single supplement Pink when colorPalette is single_suppPink",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "style with textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html style with textures colorPalette should update texture to single supplement Pink when colorPalette is sequential_suppPink",
      "location": null,
      "status": "passed",
      "title": "should update texture to single supplement Pink when colorPalette is sequential_suppPink",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "style with textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html style with textures colorPalette should render categorical textures and color when colorPalette is categorical",
      "location": null,
      "status": "passed",
      "title": "should render categorical textures and color when colorPalette is categorical",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "style with textures",
        "colors",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html style with textures colors should render colors texture instead of palette when passed",
      "location": null,
      "status": "passed",
      "title": "should render colors texture instead of palette when passed",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "style no textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html style no textures colorPalette should render sequential purple by default",
      "location": null,
      "status": "passed",
      "title": "should render sequential purple by default",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "style no textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html style no textures colorPalette should load single supplement Pink when colorPalette is sequential_suppPink",
      "location": null,
      "status": "passed",
      "title": "should load single supplement Pink when colorPalette is sequential_suppPink",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "style no textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html style no textures colorPalette should update to single supplement Pink when colorPalette is sequential_suppPink",
      "location": null,
      "status": "passed",
      "title": "should update to single supplement Pink when colorPalette is sequential_suppPink",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "style no textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html style no textures colorPalette should render sequential blue when colorPalette is sequential_orange",
      "location": null,
      "status": "passed",
      "title": "should render sequential blue when colorPalette is sequential_orange",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "style no textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html style no textures colorPalette should render categorical color when colorPalette is categorical",
      "location": null,
      "status": "passed",
      "title": "should render categorical color when colorPalette is categorical",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "style no textures",
        "colors",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html style no textures colors should render colors instead of palette when passed",
      "location": null,
      "status": "passed",
      "title": "should render colors instead of palette when passed",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "style no textures",
        "cursor",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html style no textures cursor refer to generic interaction results above for cursor tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic interaction results above for cursor tests",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "style other",
        "innerRatio",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html style other innerRatio should render with innerRatio .7 by default",
      "location": null,
      "status": "passed",
      "title": "should render with innerRatio .7 by default",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "style other",
        "innerRatio",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html style other innerRatio should render innerRatio of 0 on load",
      "location": null,
      "status": "passed",
      "title": "should render innerRatio of 0 on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "style other",
        "innerRatio",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html style other innerRatio should render innerRatio of 0.1 on update",
      "location": null,
      "status": "pending",
      "title": "should render innerRatio of 0.1 on update",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "style other",
        "showEdgeLine",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html style other showEdgeLine should not render showEdgeLine by default",
      "location": null,
      "status": "passed",
      "title": "should not render showEdgeLine by default",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "style other",
        "showEdgeLine",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html style other showEdgeLine should render showEdgeLine when passed on load",
      "location": null,
      "status": "passed",
      "title": "should render showEdgeLine when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<pie-chart>",
        "rendered-html",
        "style other",
        "showEdgeLine",
      ],
      "failureMessages": Array [],
      "fullName": "<pie-chart> rendered-html style other showEdgeLine should render showEdgeLine when passed on update",
      "location": null,
      "status": "pending",
      "title": "should render showEdgeLine when passed on update",
    },
  ],
  "scatter-plot": Array [
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "class-logic",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> class-logic should build",
      "location": null,
      "status": "passed",
      "title": "should build",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html should build",
      "location": null,
      "status": "passed",
      "title": "should build",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "render",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html render should render with minimal props[data,(group,x,y)Accessor] given",
      "location": null,
      "status": "passed",
      "title": "should render with minimal props[data,(group,x,y)Accessor] given",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "render",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html render localization: should render localized with minimal props[data,accessors] given",
      "location": null,
      "status": "passed",
      "title": "localization: should render localized with minimal props[data,accessors] given",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite height: default height on load",
      "location": null,
      "status": "passed",
      "title": "height: default height on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite height: set height on load",
      "location": null,
      "status": "passed",
      "title": "height: set height on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite height: set height on update",
      "location": null,
      "status": "passed",
      "title": "height: set height on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite width: default width on load",
      "location": null,
      "status": "passed",
      "title": "width: default width on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite width: set width on load",
      "location": null,
      "status": "passed",
      "title": "width: set width on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite width: set width on update",
      "location": null,
      "status": "passed",
      "title": "width: set width on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite mainTitle: default mainTitle on load",
      "location": null,
      "status": "passed",
      "title": "mainTitle: default mainTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite mainTitle: set mainTitle on load",
      "location": null,
      "status": "passed",
      "title": "mainTitle: set mainTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite mainTitle: set mainTitle on update",
      "location": null,
      "status": "passed",
      "title": "mainTitle: set mainTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite subTitle: default subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: default subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite subTitle: set subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: set subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite subTitle: set subTitle on update",
      "location": null,
      "status": "passed",
      "title": "subTitle: set subTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite subTitle: set legend subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: set legend subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite subTitle: set legend subTitle on update",
      "location": null,
      "status": "passed",
      "title": "subTitle: set legend subTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite margin: default margin on load",
      "location": null,
      "status": "passed",
      "title": "margin: default margin on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite margin: custom margin on load",
      "location": null,
      "status": "passed",
      "title": "margin: custom margin on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite margin: custom margin on update",
      "location": null,
      "status": "passed",
      "title": "margin: custom margin on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite padding: default padding on load",
      "location": null,
      "status": "passed",
      "title": "padding: default padding on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite padding: custom padding on load",
      "location": null,
      "status": "passed",
      "title": "padding: custom padding on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite padding: custom padding on update",
      "location": null,
      "status": "passed",
      "title": "padding: custom padding on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite uniqueID: default uniqueID on load",
      "location": null,
      "status": "passed",
      "title": "uniqueID: default uniqueID on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite uniqueID: custom uniqueID on load",
      "location": null,
      "status": "passed",
      "title": "uniqueID: custom uniqueID on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite uniqueID: custom uniqueID on update",
      "location": null,
      "status": "passed",
      "title": "uniqueID: custom uniqueID on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite data: custom data on load",
      "location": null,
      "status": "passed",
      "title": "data: custom data on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite data: custom data enter on update",
      "location": null,
      "status": "passed",
      "title": "data: custom data enter on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite data: custom data exit on update",
      "location": null,
      "status": "passed",
      "title": "data: custom data exit on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite accessibility: should print accessibility console warnings and logs when accessibility.disableValidation defaults to false",
      "location": null,
      "status": "passed",
      "title": "accessibility: should print accessibility console warnings and logs when accessibility.disableValidation defaults to false",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite accessibility: should not print accessibility console warnings and logs when accessibility.disableValidation set to true",
      "location": null,
      "status": "passed",
      "title": "accessibility: should not print accessibility console warnings and logs when accessibility.disableValidation set to true",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite localization: should print localization console warnings and logs when localization.skipValidation defaults to false",
      "location": null,
      "status": "passed",
      "title": "localization: should print localization console warnings and logs when localization.skipValidation defaults to false",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html generic test suite localization: should not print localization console warnings and logs when localization.skipValidation set to true",
      "location": null,
      "status": "passed",
      "title": "localization: should not print localization console warnings and logs when localization.skipValidation set to true",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: default instruction elements should exist and have screen reader class",
      "location": null,
      "status": "passed",
      "title": "accessibility: default instruction elements should exist and have screen reader class",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: custom instruction elements should exist and have screen reader class on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: custom instruction elements should exist and have screen reader class on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: custom instruction elements should exist and have screen reader class on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: custom instruction elements should exist and have screen reader class on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have default html tags",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have default html tags",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have h3+ html tags and headings on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have h3+ html tags and headings on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have div html tags on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have div html tags on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have h4+ html tags and all headings on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have h4+ html tags and all headings on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have p html tags on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have p html tags on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component renders in default state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component renders in default state",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component shows header in focus state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component shows header in focus state",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component displays table in click state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component displays table in click state",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component displays table in click state with space enabled",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component displays table in click state with space enabled",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: attributes should be added to static geometries on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: attributes should be added to static geometries on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: attributes should be added to geometries on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: attributes should be added to geometries on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: controller div should be created and attributes should be added on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: controller div should be created and attributes should be added on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: controller div should be created and static image attributes should be added on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: controller div should be created and static image attributes should be added on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: focus marker style should be applied on focus",
      "location": null,
      "status": "pending",
      "title": "accessibility: focus marker style should be applied on focus",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: focus group style should be applied on focus",
      "location": null,
      "status": "passed",
      "title": "accessibility: focus group style should be applied on focus",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: test whether space bar performs click action",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: test whether space bar performs click action",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - right arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - right arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - right arrow goes to first from last",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - right arrow goes to first from last",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - left arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - left arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - left arrow loops to last from first",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - left arrow loops to last from first",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - up arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - up arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - up arrow loops to last",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - up arrow loops to last",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - down arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - down arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - down arrow loops to first",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - down arrow loops to first",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: group - shift+enter will move up to group",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: group - shift+enter will move up to group",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: tooltip should get hidden on ESC key",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: tooltip should get hidden on ESC key",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain xAxis description on load if xAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain xAxis description on load if xAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should not contain xAxis description on load if xAxis is not visible on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should not contain xAxis description on load if xAxis is not visible on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain xAxis description on update if xAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain xAxis description on update if xAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain yAxis description on load if yAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain yAxis description on load if yAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should not contain yAxis description on load if yAxis is not visible on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should not contain yAxis description on load if yAxis is not visible on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain yAxis description on update if yAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain yAxis description on update if yAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are applied by default on load",
      "location": null,
      "status": "pending",
      "title": "accessibility: accessibility textures are applied by default on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are removed on load",
      "location": null,
      "status": "pending",
      "title": "accessibility: accessibility textures are removed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are removed on update",
      "location": null,
      "status": "pending",
      "title": "accessibility: accessibility textures are removed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are applied in default order on load",
      "location": null,
      "status": "pending",
      "title": "accessibility: accessibility textures are applied in default order on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is false by default",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is false by default",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is true when passed on load",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is true when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is true when passed on update",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is true when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite annotations: instruction elements should contain annotation description on load if annotation exists on chart",
      "location": null,
      "status": "passed",
      "title": "annotations: instruction elements should contain annotation description on load if annotation exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite annotations: instruction elements should contain annotation description on update if annotation exists on chart",
      "location": null,
      "status": "passed",
      "title": "annotations: instruction elements should contain annotation description on update if annotation exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite referenceLines: instruction elements should contain reference line description on load if reference line exists on chart",
      "location": null,
      "status": "passed",
      "title": "referenceLines: instruction elements should contain reference line description on load if reference line exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility generic accessibility test suite referenceLines: instruction elements should contain reference line description on update if reference line exists on chart",
      "location": null,
      "status": "passed",
      "title": "referenceLines: instruction elements should contain reference line description on update if reference line exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "accessibility",
        "validation",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html accessibility validation refer to generic results above for accessibility validation tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for accessibility validation tests",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "base",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html base refer to generic results above for base tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for base tests",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "margin & padding",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html margin & padding refer to generic results above for margin & padding tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for margin & padding tests",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "annotations",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html annotations should pass annotation prop on load",
      "location": null,
      "status": "passed",
      "title": "should pass annotation prop on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "annotations",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html annotations should pass annotation prop on update",
      "location": null,
      "status": "passed",
      "title": "should pass annotation prop on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "axes",
        "xMinValueOverride & xMaxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html axes xMinValueOverride & xMaxValueOverride should set min and max x value from data by default",
      "location": null,
      "status": "passed",
      "title": "should set min and max x value from data by default",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "axes",
        "xMinValueOverride & xMaxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html axes xMinValueOverride & xMaxValueOverride should set min X value when passed on load",
      "location": null,
      "status": "passed",
      "title": "should set min X value when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "axes",
        "xMinValueOverride & xMaxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html axes xMinValueOverride & xMaxValueOverride should set min X value when passed on update",
      "location": null,
      "status": "passed",
      "title": "should set min X value when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "axes",
        "xMinValueOverride & xMaxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html axes xMinValueOverride & xMaxValueOverride should set max X value when passed on load",
      "location": null,
      "status": "passed",
      "title": "should set max X value when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "axes",
        "xMinValueOverride & xMaxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html axes xMinValueOverride & xMaxValueOverride should set max X value when passed on update",
      "location": null,
      "status": "passed",
      "title": "should set max X value when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "axes",
        "yMinValueOverride & yMaxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html axes yMinValueOverride & yMaxValueOverride should set min and max y value from data by default",
      "location": null,
      "status": "passed",
      "title": "should set min and max y value from data by default",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "axes",
        "yMinValueOverride & yMaxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html axes yMinValueOverride & yMaxValueOverride should set min Y value when passed on load",
      "location": null,
      "status": "passed",
      "title": "should set min Y value when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "axes",
        "yMinValueOverride & yMaxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html axes yMinValueOverride & yMaxValueOverride should set min Y value when passed on update",
      "location": null,
      "status": "passed",
      "title": "should set min Y value when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "axes",
        "yMinValueOverride & yMaxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html axes yMinValueOverride & yMaxValueOverride should set max Y value when passed on load",
      "location": null,
      "status": "passed",
      "title": "should set max Y value when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "axes",
        "yMinValueOverride & yMaxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html axes yMinValueOverride & yMaxValueOverride should set max Y value when passed on update",
      "location": null,
      "status": "passed",
      "title": "should set max Y value when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "axes",
        "showBaselineX & showBaselineY",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html axes showBaselineX & showBaselineY baseline on xAxis should be visible and baseline on yAxis should not be visible by default",
      "location": null,
      "status": "passed",
      "title": "baseline on xAxis should be visible and baseline on yAxis should not be visible by default",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "axes",
        "showBaselineX & showBaselineY",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html axes showBaselineX & showBaselineY should flip opacity of baselines on load",
      "location": null,
      "status": "passed",
      "title": "should flip opacity of baselines on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "axes",
        "showBaselineX & showBaselineY",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html axes showBaselineX & showBaselineY should flip opacity of baselines on update",
      "location": null,
      "status": "passed",
      "title": "should flip opacity of baselines on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "axes",
        "axis.visible",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html axes axis.visible xAxis and yAxis should be visible by default",
      "location": null,
      "status": "passed",
      "title": "xAxis and yAxis should be visible by default",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "axes",
        "axis.visible",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html axes axis.visible should not render when false is passed on load",
      "location": null,
      "status": "passed",
      "title": "should not render when false is passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "axes",
        "axis.visible",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html axes axis.visible should not render when false is passed on update",
      "location": null,
      "status": "passed",
      "title": "should not render when false is passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "axes",
        "axis.gridVisible",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html axes axis.gridVisible should render both x and y grids by default",
      "location": null,
      "status": "passed",
      "title": "should render both x and y grids by default",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "axes",
        "axis.gridVisible",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html axes axis.gridVisible should not render both x and y grids when passed on load",
      "location": null,
      "status": "passed",
      "title": "should not render both x and y grids when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "axes",
        "axis.gridVisible",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html axes axis.gridVisible should not render both x and y grids when passed on update",
      "location": null,
      "status": "passed",
      "title": "should not render both x and y grids when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "axes",
        "axis.label",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html axes axis.label should place axis label when passed",
      "location": null,
      "status": "passed",
      "title": "should place axis label when passed",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "axes",
        "axis.format",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html axes axis.format yAxis should have default format applied to numbers",
      "location": null,
      "status": "passed",
      "title": "yAxis should have default format applied to numbers",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "axes",
        "axis.format",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html axes axis.format xAxis should have default format applied to numbers",
      "location": null,
      "status": "passed",
      "title": "xAxis should have default format applied to numbers",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "axes",
        "axis.format",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html axes axis.format yAxis should have custom format applied to numbers if passed",
      "location": null,
      "status": "passed",
      "title": "yAxis should have custom format applied to numbers if passed",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "axes",
        "axis.format",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html axes axis.format xAxis should have custom format applied to numbers if passed",
      "location": null,
      "status": "passed",
      "title": "xAxis should have custom format applied to numbers if passed",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "axes",
        "axis.tickInterval",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html axes axis.tickInterval x and y axis should have tick interval 2 when passed",
      "location": null,
      "status": "passed",
      "title": "x and y axis should have tick interval 2 when passed",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html interaction marker based interaction tests [interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html interaction marker based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html interaction marker based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html interaction marker based interaction tests [interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html interaction marker based interaction tests [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html interaction marker based interaction tests [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html interaction marker based interaction tests [interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html interaction marker based interaction tests [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html interaction marker based interaction tests [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html event-emitter generic event testing marker based events [event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
      "location": null,
      "status": "passed",
      "title": "[event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html event-emitter generic event testing marker based events [event] clickEvent: event object should emit and contain first data record when first mark is clicked",
      "location": null,
      "status": "passed",
      "title": "[event] clickEvent: event object should emit and contain first data record when first mark is clicked",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html event-emitter generic event testing marker based events [event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
      "location": null,
      "status": "passed",
      "title": "[event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html event-emitter generic event testing marker based events [event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
      "location": null,
      "status": "passed",
      "title": "[event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html event-emitter generic event testing marker based events [event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html event-emitter generic event testing marker based events [event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html event-emitter generic event testing marker based events [event] drawStartEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] drawStartEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html event-emitter generic event testing marker based events [event] drawEndEvent: event object should emit and contain uniqueID on update",
      "location": null,
      "status": "passed",
      "title": "[event] drawEndEvent: event object should emit and contain uniqueID on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html event-emitter generic event testing marker based events [event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
      "location": null,
      "status": "passed",
      "title": "[event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "data",
        "uniqueId",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html data uniqueId refer to generic results above for uniqueID tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for uniqueID tests",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "data",
        "data",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html data data refer to generic results above for data tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for data tests",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should render and have opacity 1 and be placed on hover",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 1 and be placed on hover",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should not render when event is triggered and showTooltip is false",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should not render when event is triggered and showTooltip is false",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render default content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render default content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render default content on load sizeConfig",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render default content on load sizeConfig",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render formatted custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render formatted custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels tooltip generic tooltip tests dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels tooltip generic tooltip tests dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart sizeConfig",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart sizeConfig",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels tooltip generic tooltip tests dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels tooltip generic tooltip tests dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart sizeConfig",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart sizeConfig",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels dataLabel visible should render dataLabel by default",
      "location": null,
      "status": "passed",
      "title": "should render dataLabel by default",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels dataLabel visible should not render the bar data labels if visible is false",
      "location": null,
      "status": "passed",
      "title": "should not render the bar data labels if visible is false",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels dataLabel labelAccessor should default to the value accessor if default",
      "location": null,
      "status": "passed",
      "title": "should default to the value accessor if default",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels dataLabel labelAccessor should render label accessor if passed on load",
      "location": null,
      "status": "passed",
      "title": "should render label accessor if passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels dataLabel labelAccessor should render label accessor if passed on update",
      "location": null,
      "status": "passed",
      "title": "should render label accessor if passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "format",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels dataLabel format should format number if passed as prop",
      "location": null,
      "status": "passed",
      "title": "should format number if passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels dataLabel placement should place labels on top of markers by default",
      "location": null,
      "status": "passed",
      "title": "should place labels on top of markers by default",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels dataLabel placement should place labels on bottom of markers if passed on load",
      "location": null,
      "status": "passed",
      "title": "should place labels on bottom of markers if passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels dataLabel placement should place labels on right of markers if passed on update",
      "location": null,
      "status": "passed",
      "title": "should place labels on right of markers if passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels dataLabel placement should place labels on left of markers if passed on update",
      "location": null,
      "status": "passed",
      "title": "should place labels on left of markers if passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "legend",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels legend visible by default the legend should render",
      "location": null,
      "status": "passed",
      "title": "by default the legend should render",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "legend",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels legend visible should render, but not be visible if false is passed",
      "location": null,
      "status": "passed",
      "title": "should render, but not be visible if false is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "legend",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels legend visible should render, but not be visible if false is passed on update",
      "location": null,
      "status": "passed",
      "title": "should render, but not be visible if false is passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "legend",
        "type",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels legend type should be key/symbol legend type by default",
      "location": null,
      "status": "passed",
      "title": "should be key/symbol legend type by default",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "legend",
        "type",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels legend type should be key/symbol type even if another type is passed",
      "location": null,
      "status": "passed",
      "title": "should be key/symbol type even if another type is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "legend",
        "interactive",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels legend interactive should not be interactive by deafult",
      "location": null,
      "status": "passed",
      "title": "should not be interactive by deafult",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "legend",
        "interactive",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels legend interactive should be interactive when interactive prop is true on load",
      "location": null,
      "status": "passed",
      "title": "should be interactive when interactive prop is true on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "legend",
        "interactive",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels legend interactive should be interactive when interactive prop is true on update",
      "location": null,
      "status": "passed",
      "title": "should be interactive when interactive prop is true on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "legend",
        "format",
      ],
      "failureMessages": Array [
        "Error: expected textContent \\"$15\\" to equal \\"15\\"
    at Object.<anonymous> (./packages/scatter-plot/src/components/scatter-plot/scatter-plot.spec.tsx:1923:33)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)",
      ],
      "fullName": "<scatter-plot> rendered-html labels legend format should format number if passed as prop",
      "location": null,
      "status": "failed",
      "title": "should format number if passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "legend",
        "labels",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels legend labels should be equal to data values by default",
      "location": null,
      "status": "passed",
      "title": "should be equal to data values by default",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "labels",
        "legend",
        "labels",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html labels legend labels should have custom labels when passed as prop",
      "location": null,
      "status": "passed",
      "title": "should have custom labels when passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "reference line",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html reference line should pass referenceLines prop",
      "location": null,
      "status": "passed",
      "title": "should pass referenceLines prop",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "reference line",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html reference line should pass referenceStyle prop",
      "location": null,
      "status": "passed",
      "title": "should pass referenceStyle prop",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "markers",
        "dotOpacity",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html markers dotOpacity should render markers with default (1) dotOpacity by default",
      "location": null,
      "status": "passed",
      "title": "should render markers with default (1) dotOpacity by default",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "markers",
        "dotOpacity",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html markers dotOpacity should render markers with .5 dotOpacity if passed on load",
      "location": null,
      "status": "passed",
      "title": "should render markers with .5 dotOpacity if passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "markers",
        "dotOpacity",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html markers dotOpacity should render markers with .5 dotOpacity if passed on update",
      "location": null,
      "status": "passed",
      "title": "should render markers with .5 dotOpacity if passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "markers",
        "dotRadius",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html markers dotRadius should render markers with default dotRadius by default",
      "location": null,
      "status": "passed",
      "title": "should render markers with default dotRadius by default",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "markers",
        "dotRadius",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html markers dotRadius should render markers with 10 dotRadius if passed on load",
      "location": null,
      "status": "passed",
      "title": "should render markers with 10 dotRadius if passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "markers",
        "dotRadius",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html markers dotRadius should render markers with 10 dotRadius if passed on update",
      "location": null,
      "status": "passed",
      "title": "should render markers with 10 dotRadius if passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "markers",
        "dotSymbols",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html markers dotSymbols should render circles by default",
      "location": null,
      "status": "passed",
      "title": "should render circles by default",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "markers",
        "dotSymbols",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html markers dotSymbols should render stars if passed on load",
      "location": null,
      "status": "passed",
      "title": "should render stars if passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "markers",
        "dotSymbols",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html markers dotSymbols should render dots, square, stars, cross  if passed on load",
      "location": null,
      "status": "passed",
      "title": "should render dots, square, stars, cross  if passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "markers",
        "dotSymbols",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html markers dotSymbols should render stars if passed on update",
      "location": null,
      "status": "passed",
      "title": "should render stars if passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "markers",
        "dotSymbols",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html markers dotSymbols should render dots, square, stars, cross  if passed on update",
      "location": null,
      "status": "passed",
      "title": "should render dots, square, stars, cross  if passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "markers",
        "sizeConfig",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html markers sizeConfig should set sizeConfig.sizeAccessor on load",
      "location": null,
      "status": "passed",
      "title": "should set sizeConfig.sizeAccessor on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "markers",
        "sizeConfig",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html markers sizeConfig should set sizeConfig.sizeAccessor on update",
      "location": null,
      "status": "passed",
      "title": "should set sizeConfig.sizeAccessor on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "markers",
        "sizeConfig",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html markers sizeConfig should set sizeConfig.dualEncodeColor on load",
      "location": null,
      "status": "passed",
      "title": "should set sizeConfig.dualEncodeColor on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "markers",
        "sizeConfig",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html markers sizeConfig should set sizeConfig.dualEncodeColor on update",
      "location": null,
      "status": "passed",
      "title": "should set sizeConfig.dualEncodeColor on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "markers",
        "sizeConfig",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html markers sizeConfig should set sizeConfig.minValueOverride & sizeConfig.maxValueOverride on load",
      "location": null,
      "status": "passed",
      "title": "should set sizeConfig.minValueOverride & sizeConfig.maxValueOverride on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "markers",
        "sizeConfig",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html markers sizeConfig should set sizeConfig.minValueOverride & sizeConfig.maxValueOverride on update",
      "location": null,
      "status": "passed",
      "title": "should set sizeConfig.minValueOverride & sizeConfig.maxValueOverride on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "markers",
        "sizeConfig",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html markers sizeConfig should set sizeConfig.minSizeOverride & sizeConfig.maxSizeOverride on load",
      "location": null,
      "status": "passed",
      "title": "should set sizeConfig.minSizeOverride & sizeConfig.maxSizeOverride on load",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "markers",
        "sizeConfig",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html markers sizeConfig should set sizeConfig.minSizeOverride & sizeConfig.maxSizeOverride on update",
      "location": null,
      "status": "passed",
      "title": "should set sizeConfig.minSizeOverride & sizeConfig.maxSizeOverride on update",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html style colorPalette should render categorical palette by default",
      "location": null,
      "status": "passed",
      "title": "should render categorical palette by default",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html style colorPalette should load single supplement Pink when colorPalette is single_suppPink",
      "location": null,
      "status": "passed",
      "title": "should load single supplement Pink when colorPalette is single_suppPink",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html style colorPalette should update to single supplement Pink when colorPalette is single_suppPink",
      "location": null,
      "status": "passed",
      "title": "should update to single supplement Pink when colorPalette is single_suppPink",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html style colorPalette should render sequential orange when colorPalette is sequential_orange",
      "location": null,
      "status": "passed",
      "title": "should render sequential orange when colorPalette is sequential_orange",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html style colorPalette should render diverging_RtoB color when colorPalette is diverging_RtoB",
      "location": null,
      "status": "passed",
      "title": "should render diverging_RtoB color when colorPalette is diverging_RtoB",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "style",
        "colors",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html style colors should render colors instead of palette when passed",
      "location": null,
      "status": "passed",
      "title": "should render colors instead of palette when passed",
    },
    Object {
      "ancestorTitles": Array [
        "<scatter-plot>",
        "rendered-html",
        "style",
        "cursor",
      ],
      "failureMessages": Array [],
      "fullName": "<scatter-plot> rendered-html style cursor refer to generic interaction results above for cursor tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic interaction results above for cursor tests",
    },
  ],
  "stacked-bar-chart": Array [
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "class-logic",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> class-logic should build",
      "location": null,
      "status": "passed",
      "title": "should build",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html should build",
      "location": null,
      "status": "passed",
      "title": "should build",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "render",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html render should render with minimal props[data,oridnalAccessor,groupAccessor,valueAccessor] given",
      "location": null,
      "status": "passed",
      "title": "should render with minimal props[data,oridnalAccessor,groupAccessor,valueAccessor] given",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "render",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html render localization: should render localized with minimal props[data,accessors] given",
      "location": null,
      "status": "passed",
      "title": "localization: should render localized with minimal props[data,accessors] given",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite height: default height on load",
      "location": null,
      "status": "passed",
      "title": "height: default height on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite height: set height on load",
      "location": null,
      "status": "passed",
      "title": "height: set height on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite height: set height on update",
      "location": null,
      "status": "passed",
      "title": "height: set height on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite width: default width on load",
      "location": null,
      "status": "passed",
      "title": "width: default width on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite width: set width on load",
      "location": null,
      "status": "passed",
      "title": "width: set width on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite width: set width on update",
      "location": null,
      "status": "passed",
      "title": "width: set width on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite mainTitle: default mainTitle on load",
      "location": null,
      "status": "passed",
      "title": "mainTitle: default mainTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite mainTitle: set mainTitle on load",
      "location": null,
      "status": "passed",
      "title": "mainTitle: set mainTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite mainTitle: set mainTitle on update",
      "location": null,
      "status": "passed",
      "title": "mainTitle: set mainTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite subTitle: default subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: default subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite subTitle: set subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: set subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite subTitle: set subTitle on update",
      "location": null,
      "status": "passed",
      "title": "subTitle: set subTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite subTitle: set legend subTitle on load",
      "location": null,
      "status": "passed",
      "title": "subTitle: set legend subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite subTitle: set legend subTitle on update",
      "location": null,
      "status": "passed",
      "title": "subTitle: set legend subTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite margin: default margin on load",
      "location": null,
      "status": "passed",
      "title": "margin: default margin on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite margin: custom margin on load",
      "location": null,
      "status": "passed",
      "title": "margin: custom margin on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite margin: custom margin on update",
      "location": null,
      "status": "passed",
      "title": "margin: custom margin on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite padding: default padding on load",
      "location": null,
      "status": "passed",
      "title": "padding: default padding on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite padding: custom padding on load",
      "location": null,
      "status": "passed",
      "title": "padding: custom padding on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite padding: custom padding on update",
      "location": null,
      "status": "passed",
      "title": "padding: custom padding on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite uniqueID: default uniqueID on load",
      "location": null,
      "status": "passed",
      "title": "uniqueID: default uniqueID on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite uniqueID: custom uniqueID on load",
      "location": null,
      "status": "passed",
      "title": "uniqueID: custom uniqueID on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite uniqueID: custom uniqueID on update",
      "location": null,
      "status": "passed",
      "title": "uniqueID: custom uniqueID on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite data: custom data on load",
      "location": null,
      "status": "passed",
      "title": "data: custom data on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite data: custom data enter on update",
      "location": null,
      "status": "passed",
      "title": "data: custom data enter on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite data: custom data exit on update",
      "location": null,
      "status": "passed",
      "title": "data: custom data exit on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite accessibility: should print accessibility console warnings and logs when accessibility.disableValidation defaults to false",
      "location": null,
      "status": "passed",
      "title": "accessibility: should print accessibility console warnings and logs when accessibility.disableValidation defaults to false",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite accessibility: should not print accessibility console warnings and logs when accessibility.disableValidation set to true",
      "location": null,
      "status": "passed",
      "title": "accessibility: should not print accessibility console warnings and logs when accessibility.disableValidation set to true",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite localization: should print localization console warnings and logs when localization.skipValidation defaults to false",
      "location": null,
      "status": "passed",
      "title": "localization: should print localization console warnings and logs when localization.skipValidation defaults to false",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic test suite localization: should not print localization console warnings and logs when localization.skipValidation set to true",
      "location": null,
      "status": "passed",
      "title": "localization: should not print localization console warnings and logs when localization.skipValidation set to true",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: default instruction elements should exist and have screen reader class",
      "location": null,
      "status": "passed",
      "title": "accessibility: default instruction elements should exist and have screen reader class",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: custom instruction elements should exist and have screen reader class on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: custom instruction elements should exist and have screen reader class on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: custom instruction elements should exist and have screen reader class on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: custom instruction elements should exist and have screen reader class on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have default html tags",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have default html tags",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have h3+ html tags and headings on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have h3+ html tags and headings on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have div html tags on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have div html tags on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have h4+ html tags and all headings on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have h4+ html tags and all headings on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have p html tags on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have p html tags on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component renders in default state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component renders in default state",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component shows header in focus state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component shows header in focus state",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component displays table in click state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component displays table in click state",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component displays table in click state with space enabled",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component displays table in click state with space enabled",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: attributes should be added to static geometries on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: attributes should be added to static geometries on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: attributes should be added to geometries on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: attributes should be added to geometries on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: controller div should be created and attributes should be added on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: controller div should be created and attributes should be added on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: controller div should be created and static image attributes should be added on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: controller div should be created and static image attributes should be added on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: focus marker style should be applied on focus",
      "location": null,
      "status": "passed",
      "title": "accessibility: focus marker style should be applied on focus",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: focus group style should be applied on focus",
      "location": null,
      "status": "passed",
      "title": "accessibility: focus group style should be applied on focus",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: test whether space bar performs click action",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: test whether space bar performs click action",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: group - shift+enter will exit group",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: group - shift+enter will exit group",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - right arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - right arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - right arrow goes to first from last",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - right arrow goes to first from last",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - left arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - left arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - left arrow loops to last from first",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - left arrow loops to last from first",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - up arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - up arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - up arrow loops to last",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - up arrow loops to last",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - down arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - down arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: cousin - down arrow loops to first",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: cousin - down arrow loops to first",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - right arrow goes to next normalized",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - right arrow goes to next normalized",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: tooltip should get hidden on ESC key",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: tooltip should get hidden on ESC key",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain xAxis description on load if xAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain xAxis description on load if xAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should not contain xAxis description on load if xAxis is not visible on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should not contain xAxis description on load if xAxis is not visible on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain xAxis description on update if xAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain xAxis description on update if xAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain yAxis description on load if yAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain yAxis description on load if yAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should not contain yAxis description on load if yAxis is not visible on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should not contain yAxis description on load if yAxis is not visible on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain yAxis description on update if yAxis exists on chart",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should contain yAxis description on update if yAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are applied by default on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: accessibility textures are applied by default on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are removed on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: accessibility textures are removed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are removed on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: accessibility textures are removed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are applied in default order on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: accessibility textures are applied in default order on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is false by default",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is false by default",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is true when passed on load",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is true when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is true when passed on update",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is true when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite annotations: instruction elements should contain annotation description on load if annotation exists on chart",
      "location": null,
      "status": "passed",
      "title": "annotations: instruction elements should contain annotation description on load if annotation exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite annotations: instruction elements should contain annotation description on update if annotation exists on chart",
      "location": null,
      "status": "passed",
      "title": "annotations: instruction elements should contain annotation description on update if annotation exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite referenceLines: instruction elements should contain reference line description on load if reference line exists on chart",
      "location": null,
      "status": "passed",
      "title": "referenceLines: instruction elements should contain reference line description on load if reference line exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility generic accessibility test suite referenceLines: instruction elements should contain reference line description on update if reference line exists on chart",
      "location": null,
      "status": "passed",
      "title": "referenceLines: instruction elements should contain reference line description on update if reference line exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "accessibility",
        "validation",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html accessibility validation refer to generic results above for accessibility validation tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for accessibility validation tests",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "base",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html base refer to generic results above for base tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for base tests",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "base",
        "layout",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html base layout should render chart horizontally when layout prop is horizontal",
      "location": null,
      "status": "passed",
      "title": "should render chart horizontally when layout prop is horizontal",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "base",
        "layout",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html base layout should render chart vertically when layout prop is vertical",
      "location": null,
      "status": "passed",
      "title": "should render chart vertically when layout prop is vertical",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "margin & padding",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html margin & padding refer to generic results above for margin & padding tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for margin & padding tests",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "annotations",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html annotations should pass annotation prop on load",
      "location": null,
      "status": "passed",
      "title": "should pass annotation prop on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "annotations",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html annotations should pass annotation prop on update",
      "location": null,
      "status": "passed",
      "title": "should pass annotation prop on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "axes",
        "barIntervalRatio",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html axes barIntervalRatio should have ratio of 0.2 by default",
      "location": null,
      "status": "passed",
      "title": "should have ratio of 0.2 by default",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "axes",
        "barIntervalRatio",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html axes barIntervalRatio should have ratio of 0.5 when passed on load",
      "location": null,
      "status": "passed",
      "title": "should have ratio of 0.5 when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "axes",
        "barIntervalRatio",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html axes barIntervalRatio should have ratio of 0.5 when passed on update",
      "location": null,
      "status": "passed",
      "title": "should have ratio of 0.5 when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "axes",
        "minValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html axes minValueOverride should have effect on bar size when minValueOverride is passed on load",
      "location": null,
      "status": "pending",
      "title": "should have effect on bar size when minValueOverride is passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "axes",
        "minValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html axes minValueOverride should have effect on bar size when minValueOverride is passed on update",
      "location": null,
      "status": "pending",
      "title": "should have effect on bar size when minValueOverride is passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "axes",
        "minValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html axes minValueOverride should have no effect on bar size when minValueOverride greater than minimum data value",
      "location": null,
      "status": "pending",
      "title": "should have no effect on bar size when minValueOverride greater than minimum data value",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "axes",
        "maxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html axes maxValueOverride should have effect on bar size when maxValueOverride is passed on load",
      "location": null,
      "status": "pending",
      "title": "should have effect on bar size when maxValueOverride is passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "axes",
        "maxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html axes maxValueOverride should have effect on bar size when maxValueOverride is passed on update",
      "location": null,
      "status": "pending",
      "title": "should have effect on bar size when maxValueOverride is passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "axes",
        "maxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html axes maxValueOverride should have no effect on bar size when minValueOverride smaller than maximum data value",
      "location": null,
      "status": "pending",
      "title": "should have no effect on bar size when minValueOverride smaller than maximum data value",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests wrapLabel: wrap label should be applied by default on load",
      "location": null,
      "status": "passed",
      "title": "wrapLabel: wrap label should be applied by default on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests wrapLabel: wrap label should be disabled when passed on load",
      "location": null,
      "status": "passed",
      "title": "wrapLabel: wrap label should be disabled when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests wrapLabel: wrap label should be disabled when passed on update",
      "location": null,
      "status": "passed",
      "title": "wrapLabel: wrap label should be disabled when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests xAxis.visible: axis should be visible by default",
      "location": null,
      "status": "passed",
      "title": "xAxis.visible: axis should be visible by default",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests yAxis.visible: axis should be visible by default",
      "location": null,
      "status": "passed",
      "title": "yAxis.visible: axis should be visible by default",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests xAxis.visible: axis should not be visible when passed on load",
      "location": null,
      "status": "passed",
      "title": "xAxis.visible: axis should not be visible when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests yAxis.visible: axis should not be visible when passed on load",
      "location": null,
      "status": "passed",
      "title": "yAxis.visible: axis should not be visible when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests xAxis.visible: axis should not be visible when passed on update",
      "location": null,
      "status": "passed",
      "title": "xAxis.visible: axis should not be visible when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests yAxis.visible: axis should not be visible when passed on update",
      "location": null,
      "status": "passed",
      "title": "yAxis.visible: axis should not be visible when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests xAxis.gridVisible: axis gridlines should not be visible by default",
      "location": null,
      "status": "passed",
      "title": "xAxis.gridVisible: axis gridlines should not be visible by default",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests yAxis.gridVisible: axis gridlines should be visible by default",
      "location": null,
      "status": "passed",
      "title": "yAxis.gridVisible: axis gridlines should be visible by default",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests xAxis.gridVisible: axis gridlines should be visible on load",
      "location": null,
      "status": "pending",
      "title": "xAxis.gridVisible: axis gridlines should be visible on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests yAxis.gridVisible: axis gridlines should not be visible on load",
      "location": null,
      "status": "passed",
      "title": "yAxis.gridVisible: axis gridlines should not be visible on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests xAxis.gridVisible: axis gridlines should be visible on update",
      "location": null,
      "status": "pending",
      "title": "xAxis.gridVisible: axis gridlines should be visible on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests yAxis.gridVisible: axis gridlines should not be visible on update",
      "location": null,
      "status": "passed",
      "title": "yAxis.gridVisible: axis gridlines should not be visible on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests xAxis.label: axis label should be X Axis by default",
      "location": null,
      "status": "passed",
      "title": "xAxis.label: axis label should be X Axis by default",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests yAxis.label: axis label should be Y Axis by default",
      "location": null,
      "status": "passed",
      "title": "yAxis.label: axis label should be Y Axis by default",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests xAxis.label: axis label should be passed on load",
      "location": null,
      "status": "passed",
      "title": "xAxis.label: axis label should be passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests yAxis.label: axis label should be passed on load",
      "location": null,
      "status": "passed",
      "title": "yAxis.label: axis label should be passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests xAxis.label: axis label should be passed on update",
      "location": null,
      "status": "passed",
      "title": "xAxis.label: axis label should be passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests yAxis.label: axis label should be passed on update",
      "location": null,
      "status": "passed",
      "title": "yAxis.label: axis label should be passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests xAxis.format: axis date format should be %b %y by default",
      "location": null,
      "status": "passed",
      "title": "xAxis.format: axis date format should be %b %y by default",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests yAxis.format: axis number format should be 0[.][0][0]a by default",
      "location": null,
      "status": "passed",
      "title": "yAxis.format: axis number format should be 0[.][0][0]a by default",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests xAxis.format: axis date format should be %b %Y when passed on load",
      "location": null,
      "status": "passed",
      "title": "xAxis.format: axis date format should be %b %Y when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests yAxis.format: axis number format should be $0[.][0]a when passed on load",
      "location": null,
      "status": "passed",
      "title": "yAxis.format: axis number format should be $0[.][0]a when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests xAxis.format: axis date format should be %b %Y when passed on update",
      "location": null,
      "status": "passed",
      "title": "xAxis.format: axis date format should be %b %Y when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests yAxis.format: axis number format should be $0[.][0]a when passed on update",
      "location": null,
      "status": "passed",
      "title": "yAxis.format: axis number format should be $0[.][0]a when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests xAxis.tickInterval: axis tick interval should be 2 when passed on load",
      "location": null,
      "status": "passed",
      "title": "xAxis.tickInterval: axis tick interval should be 2 when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests yAxis.tickInterval: axis tick interval should be 2 when passed on load",
      "location": null,
      "status": "passed",
      "title": "yAxis.tickInterval: axis tick interval should be 2 when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests xAxis.tickInterval: axis tick interval should be 2 when passed on load",
      "location": null,
      "status": "passed",
      "title": "xAxis.tickInterval: axis tick interval should be 2 when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests yAxis.tickInterval: axis tick interval should be 2 when passed on update",
      "location": null,
      "status": "passed",
      "title": "yAxis.tickInterval: axis tick interval should be 2 when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "generic axis tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html generic axis tests xAxis.unit: axis date format should be unit millisecond when passed on load",
      "location": null,
      "status": "pending",
      "title": "xAxis.unit: axis date format should be unit millisecond when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "data",
        "uniqueId",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html data uniqueId refer to generic results above for uniqueID tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for uniqueID tests",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "data",
        "data",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html data data refer to generic results above for data tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for data tests",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "data",
        "sortOrder",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html data sortOrder should render bars in order by default",
      "location": null,
      "status": "passed",
      "title": "should render bars in order by default",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "data",
        "sortOrder",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html data sortOrder should render bars in sortOrder asc when passed as true on load",
      "location": null,
      "status": "passed",
      "title": "should render bars in sortOrder asc when passed as true on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "data",
        "sortOrder",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html data sortOrder should render bars in sortOrder desc when passed as true on update",
      "location": null,
      "status": "passed",
      "title": "should render bars in sortOrder desc when passed as true on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html interaction bar based interaction tests [interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html interaction bar based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html interaction bar based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html interaction bar based interaction tests [interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html interaction bar based interaction tests [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html interaction bar based interaction tests [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html interaction bar based interaction tests [interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html interaction bar based interaction tests [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "interaction",
        "bar based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html interaction bar based interaction tests [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "interaction",
        "clickStyle with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html interaction clickStyle with interaction keys [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "interaction",
        "hoverStyle custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html interaction hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html event-emitter generic event testing bar based events [event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
      "location": null,
      "status": "passed",
      "title": "[event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html event-emitter generic event testing bar based events [event] clickEvent: event object should emit and contain first data record when first mark is clicked",
      "location": null,
      "status": "passed",
      "title": "[event] clickEvent: event object should emit and contain first data record when first mark is clicked",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html event-emitter generic event testing bar based events [event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
      "location": null,
      "status": "passed",
      "title": "[event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html event-emitter generic event testing bar based events [event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
      "location": null,
      "status": "passed",
      "title": "[event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html event-emitter generic event testing bar based events [event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html event-emitter generic event testing bar based events [event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html event-emitter generic event testing bar based events [event] drawStartEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] drawStartEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html event-emitter generic event testing bar based events [event] drawEndEvent: event object should emit and contain uniqueID on update",
      "location": null,
      "status": "passed",
      "title": "[event] drawEndEvent: event object should emit and contain uniqueID on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "bar based events",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html event-emitter generic event testing bar based events [event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
      "location": null,
      "status": "passed",
      "title": "[event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should render and have opacity 1 and be placed on hover",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 1 and be placed on hover",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels tooltip generic tooltip tests showTooltip: tooltip should not render when event is triggered and showTooltip is false",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should not render when event is triggered and showTooltip is false",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render default content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render default content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render formatted custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels tooltip generic tooltip tests tooltipLabel: tooltip should render formatted custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels tooltip generic tooltip tests dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "generic tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels tooltip generic tooltip tests dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "normalized tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels tooltip normalized tooltip tests showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "normalized tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels tooltip normalized tooltip tests showTooltip: tooltip should render and have opacity 1 and be placed on hover",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 1 and be placed on hover",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "normalized tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels tooltip normalized tooltip tests showTooltip: tooltip should not render when event is triggered and showTooltip is false",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should not render when event is triggered and showTooltip is false",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "normalized tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels tooltip normalized tooltip tests tooltipLabel: tooltip should render default content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render default content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "normalized tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels tooltip normalized tooltip tests tooltipLabel: tooltip should render custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "normalized tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels tooltip normalized tooltip tests tooltipLabel: tooltip should render custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "normalized tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels tooltip normalized tooltip tests tooltipLabel: tooltip should render formatted custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "normalized tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels tooltip normalized tooltip tests tooltipLabel: tooltip should render formatted custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "normalized tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels tooltip normalized tooltip tests dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "tooltip",
        "normalized tooltip tests",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels tooltip normalized tooltip tests dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels dataLabel visible should render dataLabel by default",
      "location": null,
      "status": "passed",
      "title": "should render dataLabel by default",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels dataLabel visible should not render the bar data labels if visible is false",
      "location": null,
      "status": "passed",
      "title": "should not render the bar data labels if visible is false",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels dataLabel labelAccessor should default to the value accessor if default",
      "location": null,
      "status": "passed",
      "title": "should default to the value accessor if default",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "labelAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels dataLabel labelAccessor should render the data labels if visible is true",
      "location": null,
      "status": "passed",
      "title": "should render the data labels if visible is true",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "format",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels dataLabel format should format number if passed as prop",
      "location": null,
      "status": "passed",
      "title": "should format number if passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels dataLabel placement should place labels in middle of bars by default",
      "location": null,
      "status": "passed",
      "title": "should place labels in middle of bars by default",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "dataLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels dataLabel placement should place labels on bottom of bars if passed",
      "location": null,
      "status": "passed",
      "title": "should place labels on bottom of bars if passed",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "totalLabel",
        "showTotalValue",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels totalLabel showTotalValue should render totalLabel by default",
      "location": null,
      "status": "passed",
      "title": "should render totalLabel by default",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "totalLabel",
        "showTotalValue",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels totalLabel showTotalValue should not render the bar total labels showTotalLabel is false",
      "location": null,
      "status": "passed",
      "title": "should not render the bar total labels showTotalLabel is false",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "totalLabel",
        "placement",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels totalLabel placement should place total labels on top of stacks by default",
      "location": null,
      "status": "passed",
      "title": "should place total labels on top of stacks by default",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels legend visible by default the legend should render for stacked bar",
      "location": null,
      "status": "passed",
      "title": "by default the legend should render for stacked bar",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels legend visible should render, but not be visible if false is passed",
      "location": null,
      "status": "passed",
      "title": "should render, but not be visible if false is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "type",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels legend type should be bar default type by default",
      "location": null,
      "status": "passed",
      "title": "should be bar default type by default",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "type",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels legend type should be bar type even if another type is passed",
      "location": null,
      "status": "passed",
      "title": "should be bar type even if another type is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "interactive",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels legend interactive should not be interactive by deafult",
      "location": null,
      "status": "passed",
      "title": "should not be interactive by deafult",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "interactive",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels legend interactive should be interactive when interactive prop is true",
      "location": null,
      "status": "passed",
      "title": "should be interactive when interactive prop is true",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "format",
      ],
      "failureMessages": Array [
        "Error: expected textContent \\"$15\\" to equal \\"15\\"
    at Object.<anonymous> (./packages/stacked-bar-chart/src/components/stacked-bar-chart/stacked-bar-chart.spec.ts:1679:33)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)",
      ],
      "fullName": "<stacked-bar-chart> rendered-html labels legend format should format number if passed as prop",
      "location": null,
      "status": "failed",
      "title": "should format number if passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "labels",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels legend labels should be equal to data values by default",
      "location": null,
      "status": "passed",
      "title": "should be equal to data values by default",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "labels",
        "legend",
        "labels",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html labels legend labels should have custom labels when passed as prop",
      "location": null,
      "status": "passed",
      "title": "should have custom labels when passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "reference line",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html reference line should pass referenceLines prop",
      "location": null,
      "status": "passed",
      "title": "should pass referenceLines prop",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "reference line",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html reference line should pass referenceStyle prop",
      "location": null,
      "status": "passed",
      "title": "should pass referenceStyle prop",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "style with textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html style with textures colorPalette should render texture categorical by default",
      "location": null,
      "status": "passed",
      "title": "should render texture categorical by default",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "style with textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html style with textures colorPalette should load texture diverging R to B when colorPalette is diverging_RtoB",
      "location": null,
      "status": "passed",
      "title": "should load texture diverging R to B when colorPalette is diverging_RtoB",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "style with textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html style with textures colorPalette should update texture to diverging R to B when colorPalette is diverging_RtoB",
      "location": null,
      "status": "passed",
      "title": "should update texture to diverging R to B when colorPalette is diverging_RtoB",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "style with textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html style with textures colorPalette should render sequential grey and color when colorPalette is sequential_grey",
      "location": null,
      "status": "passed",
      "title": "should render sequential grey and color when colorPalette is sequential_grey",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "style with textures",
        "colors",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html style with textures colors should render colors texture instead of palette when passed",
      "location": null,
      "status": "passed",
      "title": "should render colors texture instead of palette when passed",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "style no textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html style no textures colorPalette should render categorical by default",
      "location": null,
      "status": "passed",
      "title": "should render categorical by default",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "style no textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html style no textures colorPalette should load diverging R to B when colorPalette is diverging_RtoB",
      "location": null,
      "status": "passed",
      "title": "should load diverging R to B when colorPalette is diverging_RtoB",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "style no textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html style no textures colorPalette should update diverging R to B when colorPalette is diverging_RtoB",
      "location": null,
      "status": "passed",
      "title": "should update diverging R to B when colorPalette is diverging_RtoB",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "style no textures",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html style no textures colorPalette should render sequential orange when colorPalette is sequential_orange",
      "location": null,
      "status": "passed",
      "title": "should render sequential orange when colorPalette is sequential_orange",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "style no textures",
        "colors",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html style no textures colors should render colors instead of palette when passed",
      "location": null,
      "status": "passed",
      "title": "should render colors instead of palette when passed",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "style no textures",
        "cursor",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html style no textures cursor refer to generic interaction results above for cursor tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic interaction results above for cursor tests",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "style no textures",
        "roundedCorner",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html style no textures roundedCorner should render rectangle bars when roundedCorner is zero (default)",
      "location": null,
      "status": "passed",
      "title": "should render rectangle bars when roundedCorner is zero (default)",
    },
    Object {
      "ancestorTitles": Array [
        "<stacked-bar-chart>",
        "rendered-html",
        "style no textures",
        "roundedCorner",
      ],
      "failureMessages": Array [],
      "fullName": "<stacked-bar-chart> rendered-html style no textures roundedCorner should render rounded bars when roundedCorner is non-zero positive number",
      "location": null,
      "status": "passed",
      "title": "should render rounded bars when roundedCorner is non-zero positive number",
    },
  ],
  "world-map": Array [
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "class-logic",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> class-logic should build",
      "location": null,
      "status": "passed",
      "title": "should build",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html should build",
      "location": null,
      "status": "passed",
      "title": "should build",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "render",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html render should render with minimal props given",
      "location": null,
      "status": "passed",
      "title": "should render with minimal props given",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "render",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html render localization: should render localized with minimal props[data,accessors] given",
      "location": null,
      "status": "passed",
      "title": "localization: should render localized with minimal props[data,accessors] given",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [base] height: default height on load",
      "location": null,
      "status": "passed",
      "title": "[base] height: default height on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [base] height: set height on load",
      "location": null,
      "status": "passed",
      "title": "[base] height: set height on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [base] height: set height on update",
      "location": null,
      "status": "passed",
      "title": "[base] height: set height on update",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [base] width: default width on load",
      "location": null,
      "status": "passed",
      "title": "[base] width: default width on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [base] width: set width on load",
      "location": null,
      "status": "passed",
      "title": "[base] width: set width on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [base] width: set width on update",
      "location": null,
      "status": "passed",
      "title": "[base] width: set width on update",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [base] mainTitle: default mainTitle on load",
      "location": null,
      "status": "passed",
      "title": "[base] mainTitle: default mainTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [base] mainTitle: set mainTitle on load",
      "location": null,
      "status": "passed",
      "title": "[base] mainTitle: set mainTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [base] mainTitle: set mainTitle on update",
      "location": null,
      "status": "passed",
      "title": "[base] mainTitle: set mainTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [base] subTitle: default subTitle on load",
      "location": null,
      "status": "passed",
      "title": "[base] subTitle: default subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [base] subTitle: set subTitle on load",
      "location": null,
      "status": "passed",
      "title": "[base] subTitle: set subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [base] subTitle: set subTitle on update",
      "location": null,
      "status": "passed",
      "title": "[base] subTitle: set subTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [base] subTitle: set legend subTitle on load",
      "location": null,
      "status": "passed",
      "title": "[base] subTitle: set legend subTitle on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [base] subTitle: set legend subTitle on update",
      "location": null,
      "status": "passed",
      "title": "[base] subTitle: set legend subTitle on update",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [margin] margin: default margin on load",
      "location": null,
      "status": "passed",
      "title": "[margin] margin: default margin on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [margin] margin: custom margin on load",
      "location": null,
      "status": "passed",
      "title": "[margin] margin: custom margin on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [margin] margin: custom margin on update",
      "location": null,
      "status": "passed",
      "title": "[margin] margin: custom margin on update",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [padding] padding: default padding on load",
      "location": null,
      "status": "passed",
      "title": "[padding] padding: default padding on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [padding] padding: custom padding on load",
      "location": null,
      "status": "passed",
      "title": "[padding] padding: custom padding on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [padding] padding: custom padding on update",
      "location": null,
      "status": "passed",
      "title": "[padding] padding: custom padding on update",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [data] uniqueID: default uniqueID on load",
      "location": null,
      "status": "passed",
      "title": "[data] uniqueID: default uniqueID on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [data] uniqueID: custom uniqueID on load",
      "location": null,
      "status": "passed",
      "title": "[data] uniqueID: custom uniqueID on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [data] uniqueID: custom uniqueID on update",
      "location": null,
      "status": "passed",
      "title": "[data] uniqueID: custom uniqueID on update",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [data] data: custom data on load",
      "location": null,
      "status": "passed",
      "title": "[data] data: custom data on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [data] data: custom data enter on update",
      "location": null,
      "status": "passed",
      "title": "[data] data: custom data enter on update",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [data] data: custom data exit on update",
      "location": null,
      "status": "passed",
      "title": "[data] data: custom data exit on update",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [accessibility] accessibility: should print accessibility console warnings and logs when accessibility.disableValidation defaults to false",
      "location": null,
      "status": "passed",
      "title": "[accessibility] accessibility: should print accessibility console warnings and logs when accessibility.disableValidation defaults to false",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [accessibility] accessibility: should not print accessibility console warnings and logs when accessibility.disableValidation set to true",
      "location": null,
      "status": "passed",
      "title": "[accessibility] accessibility: should not print accessibility console warnings and logs when accessibility.disableValidation set to true",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [localization] localization: should print localization console warnings and logs when localization.skipValidation defaults to false",
      "location": null,
      "status": "passed",
      "title": "[localization] localization: should print localization console warnings and logs when localization.skipValidation defaults to false",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "generic test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html generic test suite [localization] localization: should not print localization console warnings and logs when localization.skipValidation set to true",
      "location": null,
      "status": "passed",
      "title": "[localization] localization: should not print localization console warnings and logs when localization.skipValidation set to true",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: default instruction elements should exist and have screen reader class",
      "location": null,
      "status": "passed",
      "title": "accessibility: default instruction elements should exist and have screen reader class",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: custom instruction elements should exist and have screen reader class on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: custom instruction elements should exist and have screen reader class on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: custom instruction elements should exist and have screen reader class on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: custom instruction elements should exist and have screen reader class on update",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have default html tags",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have default html tags",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have h3+ html tags and headings on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have h3+ html tags and headings on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have div html tags on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have div html tags on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have h4+ html tags and all headings on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have h4+ html tags and all headings on update",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should have p html tags on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: instruction elements should have p html tags on update",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component renders in default state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component renders in default state",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component shows header in focus state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component shows header in focus state",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component displays table in click state",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component displays table in click state",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: keyboard instruction component displays table in click state with space enabled",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard instruction component displays table in click state with space enabled",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: attributes should be added to static geometries on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: attributes should be added to static geometries on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: attributes should be added to geometries on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: attributes should be added to geometries on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: controller div should be created and attributes should be added on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: controller div should be created and attributes should be added on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: controller div should be created and static image attributes should be added on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: controller div should be created and static image attributes should be added on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: focus marker style should be applied on focus",
      "location": null,
      "status": "pending",
      "title": "accessibility: focus marker style should be applied on focus",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: focus group style should be applied on focus",
      "location": null,
      "status": "passed",
      "title": "accessibility: focus group style should be applied on focus",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: test whether space bar performs click action",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: test whether space bar performs click action",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - right arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - right arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - right arrow goes to first from last",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - right arrow goes to first from last",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - left arrow goes to next",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - left arrow goes to next",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: sibling - left arrow loops to last from first",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: sibling - left arrow loops to last from first",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: group - shift+enter will move up to group",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: group - shift+enter will move up to group",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: keyboard nav: tooltip should get hidden on ESC key",
      "location": null,
      "status": "passed",
      "title": "accessibility: keyboard nav: tooltip should get hidden on ESC key",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain xAxis description on load if xAxis exists on chart",
      "location": null,
      "status": "pending",
      "title": "accessibility: instruction elements should contain xAxis description on load if xAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should not contain xAxis description on load if xAxis is not visible on chart",
      "location": null,
      "status": "pending",
      "title": "accessibility: instruction elements should not contain xAxis description on load if xAxis is not visible on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain xAxis description on update if xAxis exists on chart",
      "location": null,
      "status": "pending",
      "title": "accessibility: instruction elements should contain xAxis description on update if xAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain yAxis description on load if yAxis exists on chart",
      "location": null,
      "status": "pending",
      "title": "accessibility: instruction elements should contain yAxis description on load if yAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should not contain yAxis description on load if yAxis is not visible on chart",
      "location": null,
      "status": "pending",
      "title": "accessibility: instruction elements should not contain yAxis description on load if yAxis is not visible on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: instruction elements should contain yAxis description on update if yAxis exists on chart",
      "location": null,
      "status": "pending",
      "title": "accessibility: instruction elements should contain yAxis description on update if yAxis exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are applied by default on load",
      "location": null,
      "status": "pending",
      "title": "accessibility: accessibility textures are applied by default on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are removed on load",
      "location": null,
      "status": "passed",
      "title": "accessibility: accessibility textures are removed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are removed on update",
      "location": null,
      "status": "passed",
      "title": "accessibility: accessibility textures are removed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite accessibility: accessibility textures are applied in default order on load",
      "location": null,
      "status": "pending",
      "title": "accessibility: accessibility textures are applied in default order on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is false by default",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is false by default",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is true when passed on load",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is true when passed on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite animationConfig: animationConfig disabled is true when passed on update",
      "location": null,
      "status": "passed",
      "title": "animationConfig: animationConfig disabled is true when passed on update",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite annotations: instruction elements should contain annotation description on load if annotation exists on chart",
      "location": null,
      "status": "passed",
      "title": "annotations: instruction elements should contain annotation description on load if annotation exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite annotations: instruction elements should contain annotation description on update if annotation exists on chart",
      "location": null,
      "status": "passed",
      "title": "annotations: instruction elements should contain annotation description on update if annotation exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite referenceLines: instruction elements should contain reference line description on load if reference line exists on chart",
      "location": null,
      "status": "pending",
      "title": "referenceLines: instruction elements should contain reference line description on load if reference line exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "generic accessibility test suite",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility generic accessibility test suite referenceLines: instruction elements should contain reference line description on update if reference line exists on chart",
      "location": null,
      "status": "pending",
      "title": "referenceLines: instruction elements should contain reference line description on update if reference line exists on chart",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "accessibility",
        "validation",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html accessibility validation refer to generic results above for accessibility validation tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for accessibility validation tests",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "base",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html base refer to generic results above for base tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for base tests",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "margin & padding",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html margin & padding refer to generic results above for margin & padding tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for margin & padding tests",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "annotations",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html annotations should pass annotation prop on load",
      "location": null,
      "status": "passed",
      "title": "should pass annotation prop on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "annotations",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html annotations should pass annotation prop on update",
      "location": null,
      "status": "passed",
      "title": "should pass annotation prop on update",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "mapOptions",
        "mapProjection",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html mapOptions mapProjection should render the equal earth mapProjection by default",
      "location": null,
      "status": "passed",
      "title": "should render the equal earth mapProjection by default",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "mapOptions",
        "mapProjection",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html mapOptions mapProjection should render the natural earth mapProjection upon setting prop",
      "location": null,
      "status": "passed",
      "title": "should render the natural earth mapProjection upon setting prop",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "mapOptions",
        "setMapScaleZoom",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html mapOptions setMapScaleZoom should render the map with zoomed out view",
      "location": null,
      "status": "passed",
      "title": "should render the map with zoomed out view",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "mapOptions",
        "showGridlines",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html mapOptions showGridlines should not render the map gridlines by default",
      "location": null,
      "status": "passed",
      "title": "should not render the map gridlines by default",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "mapOptions",
        "showGridlines",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html mapOptions showGridlines should render the map gridlines if showGridlines is true",
      "location": null,
      "status": "passed",
      "title": "should render the map gridlines if showGridlines is true",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "mapOptions",
        "quality",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html mapOptions quality should render the low quality map upon setting prop",
      "location": null,
      "status": "passed",
      "title": "should render the low quality map upon setting prop",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "countryStyle",
        "fill",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html countryStyle fill choropleth should be on by default",
      "location": null,
      "status": "passed",
      "title": "choropleth should be on by default",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "countryStyle",
        "fill",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html countryStyle fill choropleth should use color provided when .fill is false",
      "location": null,
      "status": "passed",
      "title": "choropleth should use color provided when .fill is false",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "countryStyle",
        "opacity",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html countryStyle opacity opacity should be .8 by default",
      "location": null,
      "status": "passed",
      "title": "opacity should be .8 by default",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "countryStyle",
        "opacity",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html countryStyle opacity opacity should be .5 when setting the prop",
      "location": null,
      "status": "passed",
      "title": "opacity should be .5 when setting the prop",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "countryStyle",
        "strokeWidth",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html countryStyle strokeWidth stroke width should be .5 px by default",
      "location": null,
      "status": "passed",
      "title": "stroke width should be .5 px by default",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "countryStyle",
        "strokeWidth",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html countryStyle strokeWidth stroke width should be 2 when setting the prop",
      "location": null,
      "status": "passed",
      "title": "stroke width should be 2 when setting the prop",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "markerStyle",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html markerStyle visible markers should be rendered, but not visible by default",
      "location": null,
      "status": "passed",
      "title": "markers should be rendered, but not visible by default",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "markerStyle",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html markerStyle visible markers should be rendered, and visible when prop is passed",
      "location": null,
      "status": "passed",
      "title": "markers should be rendered, and visible when prop is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "markerStyle",
        "fill and blend",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html markerStyle fill and blend markers should be rendered, and have fill by default, though not visible",
      "location": null,
      "status": "passed",
      "title": "markers should be rendered, and have fill by default, though not visible",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "markerStyle",
        "fill and blend",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html markerStyle fill and blend markers should be rendered, and not filled when false is passed to prop",
      "location": null,
      "status": "passed",
      "title": "markers should be rendered, and not filled when false is passed to prop",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "markerStyle",
        "fill and blend",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html markerStyle fill and blend markers should be rendered, and multiply true is passed to blend prop",
      "location": null,
      "status": "passed",
      "title": "markers should be rendered, and multiply true is passed to blend prop",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "markerStyle",
        "opacity",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html markerStyle opacity opacity should be .8 by default",
      "location": null,
      "status": "passed",
      "title": "opacity should be .8 by default",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "markerStyle",
        "opacity",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html markerStyle opacity opacity should be .5 when setting the prop",
      "location": null,
      "status": "passed",
      "title": "opacity should be .5 when setting the prop",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "markerStyle",
        "strokeWidth",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html markerStyle strokeWidth stroke width should be 1px by default",
      "location": null,
      "status": "passed",
      "title": "stroke width should be 1px by default",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "markerStyle",
        "strokeWidth",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html markerStyle strokeWidth stroke width should be 2px when setting the prop",
      "location": null,
      "status": "passed",
      "title": "stroke width should be 2px when setting the prop",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "markerStyle",
        "radius and radius range",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html markerStyle radius and radius range radius should be 5 by default",
      "location": null,
      "status": "passed",
      "title": "radius should be 5 by default",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "markerStyle",
        "radius and radius range",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html markerStyle radius and radius range radius should update to 10 when passed to the prop",
      "location": null,
      "status": "passed",
      "title": "radius should update to 10 when passed to the prop",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "markerStyle",
        "radius and radius range",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html markerStyle radius and radius range radius should be based on range when passed radius range prop is passed",
      "location": null,
      "status": "passed",
      "title": "radius should be based on range when passed radius range prop is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "interaction",
        "path based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html interaction path based interaction tests [interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "interaction",
        "path based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html interaction path based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "interaction",
        "path based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html interaction path based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "interaction",
        "path based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html interaction path based interaction tests [interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "interaction",
        "path based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html interaction path based interaction tests [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "interaction",
        "path based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html interaction path based interaction tests [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "interaction",
        "path based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html interaction path based interaction tests [interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "interaction",
        "path based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html interaction path based interaction tests [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "interaction",
        "path based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html interaction path based interaction tests [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html interaction marker based interaction tests [interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render default(arrow) pointer on mark when cursor type is default",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html interaction marker based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html interaction marker based interaction tests [interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
      "location": null,
      "status": "passed",
      "title": "[interaction] cursor: should render link pointer on mark when cursor type is pointer on update",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html interaction marker based interaction tests [interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click the selected mark should be default clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html interaction marker based interaction tests [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html interaction marker based interaction tests [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html interaction marker based interaction tests [interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover the mark should be default hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html interaction marker based interaction tests [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "interaction",
        "marker based interaction tests",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html interaction marker based interaction tests [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "clickStyle",
        "custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html clickStyle custom with interaction keys [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "clickStyle",
        "custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html clickStyle custom with interaction keys [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "clickStyle",
        "custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html clickStyle custom with interaction keys [interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (load) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "clickStyle",
        "custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html clickStyle custom with interaction keys [interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] clickStyle: on click (update) the selected mark should be custom clickStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "hoverStyle",
        "custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "hoverStyle",
        "custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey group",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "hoverStyle",
        "custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (load) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "hoverStyle",
        "custom with interaction keys",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html hoverStyle custom with interaction keys [interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
      "location": null,
      "status": "passed",
      "title": "[interaction] hoverStyle: on hover (update) the mark should be custom hoverStyle and others should have hoverOpacity interactionKey value",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "data",
        "uniqueId",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html data uniqueId refer to generic results above for uniqueID tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for uniqueID tests",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "data",
        "data",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html data data refer to generic results above for data tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic results above for data tests",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "data",
        "minValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html data minValueOverride should reset legend and component when min override is passed",
      "location": null,
      "status": "passed",
      "title": "should reset legend and component when min override is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "data",
        "maxValueOverride",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html data maxValueOverride should reset legend and component when min override is passed",
      "location": null,
      "status": "passed",
      "title": "should reset legend and component when min override is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "data",
        "valueAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html data valueAccessor should update legend and component when different valueAccessor is passed",
      "location": null,
      "status": "passed",
      "title": "should update legend and component when different valueAccessor is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "data",
        "groupAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html data groupAccessor should update legend and component when groupAccessor is passed",
      "location": null,
      "status": "passed",
      "title": "should update legend and component when groupAccessor is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "data",
        "sort",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html data sort should render data in ascending order when sortOrder is asc",
      "location": null,
      "status": "passed",
      "title": "should render data in ascending order when sortOrder is asc",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "data",
        "sort",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html data sort should render data in descending order when sortOrder is desc",
      "location": null,
      "status": "passed",
      "title": "should render data in descending order when sortOrder is desc",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "data",
        "sort",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html data sort should render data in descending order when sortOrder is updated to desc",
      "location": null,
      "status": "passed",
      "title": "should render data in descending order when sortOrder is updated to desc",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "data",
        "sort",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html data sort should render data in default order when sortOrder is not provided",
      "location": null,
      "status": "passed",
      "title": "should render data in default order when sortOrder is not provided",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "dataLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html dataLabel visible should not render dataLabel by default",
      "location": null,
      "status": "passed",
      "title": "should not render dataLabel by default",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "dataLabel",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html dataLabel visible should render the map data labels if visible is true",
      "location": null,
      "status": "passed",
      "title": "should render the map data labels if visible is true",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "dataLabel",
        "labelAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html dataLabel labelAccessor should default to the join/marker name if default",
      "location": null,
      "status": "passed",
      "title": "should default to the join/marker name if default",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "dataLabel",
        "labelAccessor",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html dataLabel labelAccessor should render the map data labels if visible is true",
      "location": null,
      "status": "passed",
      "title": "should render the map data labels if visible is true",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "dataLabel",
        "format",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html dataLabel format should format number if passed as prop",
      "location": null,
      "status": "passed",
      "title": "should format number if passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "legend",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html legend visible by default the legend should render, be key type and visible",
      "location": null,
      "status": "passed",
      "title": "by default the legend should render, be key type and visible",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "legend",
        "visible",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html legend visible should render, but not be visible if false is passed",
      "location": null,
      "status": "passed",
      "title": "should render, but not be visible if false is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "legend",
        "type",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html legend type should be default type if default is passed",
      "location": null,
      "status": "passed",
      "title": "should be default type if default is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "legend",
        "type",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html legend type should be gradient type if gradient is passed",
      "location": null,
      "status": "passed",
      "title": "should be gradient type if gradient is passed",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "legend",
        "interactive",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html legend interactive should not be interactive by deafult",
      "location": null,
      "status": "passed",
      "title": "should not be interactive by deafult",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "legend",
        "interactive",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html legend interactive should be interactive when interactive prop is true",
      "location": null,
      "status": "passed",
      "title": "should be interactive when interactive prop is true",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "legend",
        "format",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html legend format should format number if passed as prop",
      "location": null,
      "status": "passed",
      "title": "should format number if passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "legend",
        "labels",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html legend labels should be equal to data values by default",
      "location": null,
      "status": "passed",
      "title": "should be equal to data values by default",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "legend",
        "labels",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html legend labels should have custom labels when passed as prop",
      "location": null,
      "status": "passed",
      "title": "should have custom labels when passed as prop",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "tooltip",
        "generic tooltip tests for paths",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html tooltip generic tooltip tests for paths showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "tooltip",
        "generic tooltip tests for paths",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html tooltip generic tooltip tests for paths showTooltip: tooltip should render and have opacity 1 and be placed on hover",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 1 and be placed on hover",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "tooltip",
        "generic tooltip tests for paths",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html tooltip generic tooltip tests for paths showTooltip: tooltip should not render when event is triggered and showTooltip is false",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should not render when event is triggered and showTooltip is false",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "tooltip",
        "generic tooltip tests for paths",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html tooltip generic tooltip tests for paths tooltipLabel: tooltip should render default content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render default content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "tooltip",
        "generic tooltip tests for paths",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html tooltip generic tooltip tests for paths tooltipLabel: tooltip should render custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "tooltip",
        "generic tooltip tests for paths",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html tooltip generic tooltip tests for paths tooltipLabel: tooltip should render custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "tooltip",
        "generic tooltip tests for paths",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html tooltip generic tooltip tests for paths tooltipLabel: tooltip should render formatted custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "tooltip",
        "generic tooltip tests for paths",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html tooltip generic tooltip tests for paths tooltipLabel: tooltip should render formatted custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "tooltip",
        "custom tooltip test for paths",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html tooltip custom tooltip test for paths check that paths do not show tooltip when markers are visible",
      "location": null,
      "status": "passed",
      "title": "check that paths do not show tooltip when markers are visible",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "tooltip",
        "generic tooltip tests for markers",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html tooltip generic tooltip tests for markers showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 0 by default on load (before a hover)",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "tooltip",
        "generic tooltip tests for markers",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html tooltip generic tooltip tests for markers showTooltip: tooltip should render and have opacity 1 and be placed on hover",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should render and have opacity 1 and be placed on hover",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "tooltip",
        "generic tooltip tests for markers",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html tooltip generic tooltip tests for markers showTooltip: tooltip should not render when event is triggered and showTooltip is false",
      "location": null,
      "status": "passed",
      "title": "showTooltip: tooltip should not render when event is triggered and showTooltip is false",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "tooltip",
        "generic tooltip tests for markers",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html tooltip generic tooltip tests for markers tooltipLabel: tooltip should render default content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render default content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "tooltip",
        "generic tooltip tests for markers",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html tooltip generic tooltip tests for markers tooltipLabel: tooltip should render custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "tooltip",
        "generic tooltip tests for markers",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html tooltip generic tooltip tests for markers tooltipLabel: tooltip should render custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "tooltip",
        "generic tooltip tests for markers",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html tooltip generic tooltip tests for markers tooltipLabel: tooltip should render formatted custom content on load",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "tooltip",
        "generic tooltip tests for markers",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html tooltip generic tooltip tests for markers tooltipLabel: tooltip should render formatted custom content on update",
      "location": null,
      "status": "passed",
      "title": "tooltipLabel: tooltip should render formatted custom content on update",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "tooltip",
        "generic tooltip tests for markers",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html tooltip generic tooltip tests for markers dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on load, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "tooltip",
        "generic tooltip tests for markers",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html tooltip generic tooltip tests for markers dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
      "location": null,
      "status": "passed",
      "title": "dataKeyNames: if provided on update, dataKeyNames prop is used for key names across chart",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html style colorPalette should render sequential purple by default",
      "location": null,
      "status": "passed",
      "title": "should render sequential purple by default",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html style colorPalette should render sequential grey when colorPalette is sequential_grey",
      "location": null,
      "status": "passed",
      "title": "should render sequential grey when colorPalette is sequential_grey",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html style colorPalette should render diverging RtoB based color when colorPalette is diverging_RtoB",
      "location": null,
      "status": "passed",
      "title": "should render diverging RtoB based color when colorPalette is diverging_RtoB",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "style",
        "colorPalette",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html style colorPalette should render categorical color when colorPalette is categorical",
      "location": null,
      "status": "passed",
      "title": "should render categorical color when colorPalette is categorical",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "style",
        "colors",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html style colors should render colors instead of palette when passed",
      "location": null,
      "status": "passed",
      "title": "should render colors instead of palette when passed",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "style",
        "colorSteps",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html style colorSteps should change colorStep ramp based on new prop being passed",
      "location": null,
      "status": "passed",
      "title": "should change colorStep ramp based on new prop being passed",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "style",
        "cursor",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html style cursor refer to generic interaction results above for cursor tests",
      "location": null,
      "status": "passed",
      "title": "refer to generic interaction results above for cursor tests",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "path based events",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html event-emitter generic event testing path based events [event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
      "location": null,
      "status": "passed",
      "title": "[event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "path based events",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html event-emitter generic event testing path based events [event] clickEvent: event object should emit and contain first data record when first mark is clicked",
      "location": null,
      "status": "passed",
      "title": "[event] clickEvent: event object should emit and contain first data record when first mark is clicked",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "path based events",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html event-emitter generic event testing path based events [event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
      "location": null,
      "status": "passed",
      "title": "[event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "path based events",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html event-emitter generic event testing path based events [event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
      "location": null,
      "status": "passed",
      "title": "[event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "path based events",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html event-emitter generic event testing path based events [event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "path based events",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html event-emitter generic event testing path based events [event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "path based events",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html event-emitter generic event testing path based events [event] drawStartEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] drawStartEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "path based events",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html event-emitter generic event testing path based events [event] drawEndEvent: event object should emit and contain uniqueID on update",
      "location": null,
      "status": "passed",
      "title": "[event] drawEndEvent: event object should emit and contain uniqueID on update",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "path based events",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html event-emitter generic event testing path based events [event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
      "location": null,
      "status": "passed",
      "title": "[event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html event-emitter generic event testing marker based events [event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
      "location": null,
      "status": "passed",
      "title": "[event] suppressEvents: event object should not emit when first mark is clicked and surpress events is true",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html event-emitter generic event testing marker based events [event] clickEvent: event object should emit and contain first data record when first mark is clicked",
      "location": null,
      "status": "passed",
      "title": "[event] clickEvent: event object should emit and contain first data record when first mark is clicked",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html event-emitter generic event testing marker based events [event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
      "location": null,
      "status": "passed",
      "title": "[event] hoverEvent: event object should emit and contain first data record when first mark is hovered",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html event-emitter generic event testing marker based events [event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
      "location": null,
      "status": "passed",
      "title": "[event] mouseOutEvent: event object should emit and have undefined data object on mouse out",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html event-emitter generic event testing marker based events [event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html event-emitter generic event testing marker based events [event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
      "location": null,
      "status": "passed",
      "title": "[event] initialLoadEndEvent: event object should emit and contain uniqueID on initial load end",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html event-emitter generic event testing marker based events [event] drawStartEvent: event object should emit and contain uniqueID on initial load",
      "location": null,
      "status": "passed",
      "title": "[event] drawStartEvent: event object should emit and contain uniqueID on initial load",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html event-emitter generic event testing marker based events [event] drawEndEvent: event object should emit and contain uniqueID on update",
      "location": null,
      "status": "passed",
      "title": "[event] drawEndEvent: event object should emit and contain uniqueID on update",
    },
    Object {
      "ancestorTitles": Array [
        "<world-map />",
        "rendered-html",
        "event-emitter",
        "generic event testing",
        "marker based events",
      ],
      "failureMessages": Array [],
      "fullName": "<world-map /> rendered-html event-emitter generic event testing marker based events [event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
      "location": null,
      "status": "passed",
      "title": "[event] transitionEndEvent: event object should emit and contain uniqueID when transition ends",
    },
  ],
}
`;
